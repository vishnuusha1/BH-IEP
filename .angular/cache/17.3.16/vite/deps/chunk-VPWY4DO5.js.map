{
  "version": 3,
  "sources": ["../../../../../node_modules/@progress/kendo-angular-treeview/fesm2022/progress-kendo-angular-treeview.mjs"],
  "sourcesContent": ["/**-----------------------------------------------------------------------------------------\n* Copyright © 2025 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Directive, Optional, Input, HostBinding, Component, forwardRef, isDevMode, ViewContainerRef, ChangeDetectionStrategy, ViewChild, Output, ContentChild, Host, NgModule } from '@angular/core';\nimport { isDocumentAvailable, Keys, anyChanged, hasObservers, isChanged, guid, ResizeBatchService } from '@progress/kendo-angular-common';\nimport * as i1 from '@progress/kendo-angular-l10n';\nimport { ComponentMessages, LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { Subject, Subscription, of, EMPTY, BehaviorSubject, merge } from 'rxjs';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { getter, setter } from '@progress/kendo-common';\nimport { caretAltDownIcon, caretAltRightIcon, caretAltLeftIcon, searchIcon, cancelIcon, insertMiddleIcon, insertBottomIcon, insertTopIcon, plusIcon } from '@progress/kendo-svg-icons';\nimport { CheckBoxComponent, TextBoxComponent, TextBoxPrefixTemplateDirective } from '@progress/kendo-angular-inputs';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { filter, tap, switchMap, delay, takeUntil, catchError, finalize, take, map } from 'rxjs/operators';\nimport { NgFor, NgClass, NgIf, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgSwitchDefault } from '@angular/common';\nimport { IconWrapperComponent, IconsService } from '@progress/kendo-angular-icons';\nimport { Draggable } from '@progress/kendo-draggable';\nimport { DialogContainerService, DialogService, WindowService, WindowContainerService } from '@progress/kendo-angular-dialog';\nimport { PopupService } from '@progress/kendo-angular-popup';\n\n/**\n * @hidden\n */\nconst _c0 = [\"kendoTreeViewGroup\", \"\"];\nconst _c1 = (a0, a1) => ({\n  $implicit: a0,\n  index: a1\n});\nconst _c2 = a0 => ({\n  index: a0\n});\nfunction TreeViewGroupComponent_li_0_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵlistener(\"click\", function TreeViewGroupComponent_li_0_span_2_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      const node_r3 = ctx_r1.$implicit;\n      const index_r4 = ctx_r1.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.expandNode(ctx_r4.nodeIndex(index_r4), node_r3, !ctx_r4.isExpanded(node_r3, ctx_r4.nodeIndex(index_r4))));\n    });\n    i0.ɵɵelement(1, \"kendo-icon-wrapper\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const node_r3 = ctx_r1.$implicit;\n    const index_r4 = ctx_r1.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"k-disabled\", !ctx_r4.isItemExpandable(node_r3, index_r4));\n    i0.ɵɵproperty(\"kendoTreeViewLoading\", ctx_r4.nodeIndex(index_r4));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"name\", ctx_r4.getFontIcon(node_r3, ctx_r4.nodeIndex(index_r4)))(\"svgIcon\", ctx_r4.getSvgIcon(node_r3, ctx_r4.nodeIndex(index_r4)));\n  }\n}\nfunction TreeViewGroupComponent_li_0_kendo_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"kendo-checkbox\", 15, 0);\n    i0.ɵɵlistener(\"checkedStateChange\", function TreeViewGroupComponent_li_0_kendo_checkbox_3_Template_kendo_checkbox_checkedStateChange_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const checkbox_r7 = i0.ɵɵreference(1);\n      const index_r4 = i0.ɵɵnextContext().index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.checkNode(ctx_r4.nodeIndex(index_r4), checkbox_r7));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const node_r3 = ctx_r1.$implicit;\n    const index_r4 = ctx_r1.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r4.isItemDisabled(node_r3, index_r4))(\"size\", ctx_r4.size)(\"checkedState\", ctx_r4.getCheckBoxState(node_r3, ctx_r4.nodeIndex(index_r4)))(\"tabindex\", -1)(\"inputAttributes\", ctx_r4.getCheckboxAttributes(index_r4));\n  }\n}\nfunction TreeViewGroupComponent_li_0_ng_container_7_ng_template_1_Template(rf, ctx) {}\nfunction TreeViewGroupComponent_li_0_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeViewGroupComponent_li_0_ng_container_7_ng_template_1_Template, 0, 0, \"ng-template\", 16);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const node_r3 = ctx_r1.$implicit;\n    const index_r4 = ctx_r1.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.nodeTemplateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, node_r3, ctx_r4.nodeIndex(index_r4)));\n  }\n}\nfunction TreeViewGroupComponent_li_0_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const node_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.nodeText(node_r3), \" \");\n  }\n}\nfunction TreeViewGroupComponent_li_0_ul_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ul\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const node_r3 = ctx_r1.$implicit;\n    const index_r4 = ctx_r1.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"size\", ctx_r4.size)(\"nodes\", ctx_r4.fetchChildren)(\"loadOnDemand\", ctx_r4.loadOnDemand)(\"checkboxes\", ctx_r4.checkboxes)(\"expandIcons\", ctx_r4.expandIcons)(\"selectable\", ctx_r4.selectable)(\"touchActions\", ctx_r4.touchActions)(\"children\", ctx_r4.children)(\"hasChildren\", ctx_r4.hasChildren)(\"isChecked\", ctx_r4.isChecked)(\"isDisabled\", ctx_r4.isDisabled)(\"hasCheckbox\", ctx_r4.hasCheckbox)(\"disabled\", ctx_r4.isItemDisabled(node_r3, index_r4))(\"expandDisabledNodes\", ctx_r4.expandDisabledNodes)(\"isExpanded\", ctx_r4.isExpanded)(\"isSelected\", ctx_r4.isSelected)(\"isVisible\", ctx_r4.isVisible)(\"nodeTemplateRef\", ctx_r4.nodeTemplateRef)(\"loadMoreButtonTemplateRef\", ctx_r4.loadMoreButtonTemplateRef)(\"parentIndex\", ctx_r4.nodeIndex(index_r4))(\"parentDataItem\", node_r3)(\"textField\", ctx_r4.nextFields)(\"loadMoreService\", ctx_r4.loadMoreService)(\"@toggle\", true)(\"trackBy\", ctx_r4.trackBy)(\"disableParentNodesOnly\", ctx_r4.disableParentNodesOnly);\n  }\n}\nfunction TreeViewGroupComponent_li_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 3)(1, \"div\", 4);\n    i0.ɵɵtemplate(2, TreeViewGroupComponent_li_0_span_2_Template, 2, 5, \"span\", 5)(3, TreeViewGroupComponent_li_0_kendo_checkbox_3_Template, 2, 5, \"kendo-checkbox\", 6);\n    i0.ɵɵelementStart(4, \"span\", 7)(5, \"span\", 8);\n    i0.ɵɵelementContainerStart(6, 9);\n    i0.ɵɵtemplate(7, TreeViewGroupComponent_li_0_ng_container_7_Template, 2, 5, \"ng-container\", 10)(8, TreeViewGroupComponent_li_0_ng_container_8_Template, 2, 1, \"ng-container\", 11);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(9, TreeViewGroupComponent_li_0_ul_9_Template, 1, 26, \"ul\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r3 = ctx.$implicit;\n    const index_r4 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"k-hidden\", !ctx_r4.isVisible(node_r3, ctx_r4.nodeIndex(index_r4)));\n    i0.ɵɵproperty(\"dataItem\", node_r3)(\"index\", ctx_r4.nodeIndex(index_r4))(\"parentDataItem\", ctx_r4.parentDataItem)(\"parentIndex\", ctx_r4.parentIndex)(\"loadOnDemand\", ctx_r4.loadOnDemand)(\"checkable\", ctx_r4.checkboxes)(\"isChecked\", ctx_r4.isChecked(node_r3, ctx_r4.nodeIndex(index_r4)))(\"isDisabled\", ctx_r4.isItemDisabled(node_r3, index_r4))(\"isVisible\", ctx_r4.isVisible(node_r3, ctx_r4.nodeIndex(index_r4)))(\"expandable\", ctx_r4.expandIcons && ctx_r4.hasChildren(node_r3))(\"isExpanded\", ctx_r4.isExpanded(node_r3, ctx_r4.nodeIndex(index_r4)))(\"selectable\", ctx_r4.selectable)(\"isSelected\", ctx_r4.isSelected(node_r3, ctx_r4.nodeIndex(index_r4)));\n    i0.ɵɵattribute(\"aria-setsize\", ctx_r4.totalNodesCount)(\"data-treeindex\", ctx_r4.nodeIndex(index_r4));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.setItemClasses(ctx_r4.data.length, index_r4));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.expandIcons && ctx_r4.hasChildren(node_r3));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.checkboxes && ctx_r4.hasCheckbox(node_r3, ctx_r4.nodeIndex(index_r4)));\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"touch-action\", ctx_r4.touchActions ? \"\" : \"none\");\n    i0.ɵɵclassProp(\"k-disabled\", ctx_r4.isItemDisabled(node_r3, index_r4));\n    i0.ɵɵproperty(\"id\", ctx_r4.nodeIndex(index_r4))(\"dataItem\", node_r3)(\"index\", ctx_r4.nodeIndex(index_r4))(\"initialSelection\", ctx_r4.isSelected(node_r3, ctx_r4.nodeIndex(index_r4)))(\"isSelected\", ctx_r4.isSelected);\n    i0.ɵɵattribute(\"data-treeindex\", ctx_r4.nodeIndex(index_r4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r4.hasTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isExpanded(node_r3, ctx_r4.nodeIndex(index_r4)) && ctx_r4.hasChildren(node_r3));\n  }\n}\nfunction TreeViewGroupComponent_li_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 23);\n  }\n}\nfunction TreeViewGroupComponent_li_1_5_ng_template_0_Template(rf, ctx) {}\nfunction TreeViewGroupComponent_li_1_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeViewGroupComponent_li_1_5_ng_template_0_Template, 0, 0, \"ng-template\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.loadMoreButtonTemplateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r4.loadMoreButtonIndex));\n  }\n}\nfunction TreeViewGroupComponent_li_1_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.loadMoreTitle, \" \");\n  }\n}\nfunction TreeViewGroupComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 18)(1, \"div\", 19);\n    i0.ɵɵtemplate(2, TreeViewGroupComponent_li_1_span_2_Template, 1, 0, \"span\", 20);\n    i0.ɵɵelementStart(3, \"span\", 21)(4, \"span\", 8);\n    i0.ɵɵtemplate(5, TreeViewGroupComponent_li_1_5_Template, 1, 4, null, 22)(6, TreeViewGroupComponent_li_1_ng_container_6_Template, 2, 1, \"ng-container\", 22);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"k-treeview-load-more-checkboxes-container\", ctx_r4.checkboxes);\n    i0.ɵɵproperty(\"selectable\", false)(\"checkable\", false)(\"expandable\", false)(\"index\", ctx_r4.loadMoreButtonIndex)(\"parentDataItem\", ctx_r4.parentDataItem)(\"parentIndex\", ctx_r4.parentIndex);\n    i0.ɵɵattribute(\"data-treeindex\", ctx_r4.loadMoreButtonIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.loadingMoreNodes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"index\", ctx_r4.loadMoreButtonIndex);\n    i0.ɵɵattribute(\"data-treeindex\", ctx_r4.loadMoreButtonIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.loadMoreButtonTemplateRef);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.loadMoreButtonTemplateRef);\n  }\n}\nconst _c3 = [\"assetsContainer\"];\nconst _c4 = [\"searchbox\"];\nfunction TreeViewComponent_span_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"kendo-icon-wrapper\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r1.searchIcon);\n  }\n}\nfunction TreeViewComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 5)(1, \"kendo-textbox\", 6, 1);\n    i0.ɵɵlistener(\"valueChange\", function TreeViewComponent_span_1_Template_kendo_textbox_valueChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.filterChange.emit($event));\n    });\n    i0.ɵɵtemplate(3, TreeViewComponent_span_1_ng_template_3_Template, 1, 1, \"ng-template\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"size\", ctx_r1.size)(\"value\", ctx_r1.filter)(\"clearButton\", true)(\"placeholder\", ctx_r1.filterInputPlaceholder);\n  }\n}\nconst _c5 = (a0, a1, a2, a3) => ({\n  text: a0,\n  action: a1,\n  sourceItem: a2,\n  destinationItem: a3\n});\nfunction DragClueComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"kendo-icon-wrapper\", 1);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"name\", ctx_r0.statusIconClass)(\"svgIcon\", ctx_r0.statusSVGIcon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.text);\n  }\n}\nfunction DragClueComponent_1_ng_template_0_Template(rf, ctx) {}\nfunction DragClueComponent_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DragClueComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c5, ctx_r0.text, ctx_r0.action, ctx_r0.sourceItem, ctx_r0.destinationItem));\n  }\n}\nconst _c6 = (a0, a1, a2) => ({\n  action: a0,\n  sourceItem: a1,\n  destinationItem: a2\n});\nfunction DropHintComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"div\", 3)(2, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DropHintComponent_1_ng_template_0_ng_template_0_Template(rf, ctx) {}\nfunction DropHintComponent_1_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DropHintComponent_1_ng_template_0_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction DropHintComponent_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DropHintComponent_1_ng_template_0_Template, 1, 0, \"ng-template\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(2, _c6, ctx_r0.action, ctx_r0.sourceItem, ctx_r0.destinationItem));\n  }\n}\nconst packageMetadata = {\n  name: '@progress/kendo-angular-treeview',\n  productName: 'Kendo UI for Angular',\n  productCode: 'KENDOUIANGULAR',\n  productCodes: ['KENDOUIANGULAR'],\n  publishDate: 1749540105,\n  version: '19.1.1',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/'\n};\n\n/**\n * @hidden\n */\nclass DataChangeNotificationService {\n  changes = new EventEmitter();\n  notify() {\n    this.changes.emit();\n  }\n}\n\n/**\n * @hidden\n */\nconst hasChildren = () => false;\n/**\n * @hidden\n */\nconst isChecked = () => 'none';\n/**\n * @hidden\n */\nconst isDisabled = () => false;\n/**\n * @hidden\n */\nconst hasCheckbox = () => true;\n/**\n * @hidden\n */\nconst isExpanded = () => true;\n/**\n * @hidden\n */\nconst isSelected = () => false;\n/**\n * @hidden\n */\nconst isVisible = () => true;\n/**\n * @hidden\n */\nconst trackBy = (_, item) => item;\n\n/**\n * @hidden\n */\nclass ExpandStateService {\n  changes = new Subject();\n  expand(index, dataItem) {\n    this.changes.next({\n      dataItem,\n      index,\n      expand: true\n    });\n  }\n  collapse(index, dataItem) {\n    this.changes.next({\n      dataItem,\n      index,\n      expand: false\n    });\n  }\n  static ɵfac = function ExpandStateService_Factory(t) {\n    return new (t || ExpandStateService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ExpandStateService,\n    factory: ExpandStateService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ExpandStateService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @hidden\n */\nclass IndexBuilderService {\n  INDEX_SEPARATOR = '_';\n  nodeIndex(index = '', parentIndex = '') {\n    return `${parentIndex}${parentIndex ? this.INDEX_SEPARATOR : ''}${index}`;\n  }\n  indexForLevel(index, level) {\n    return index.split(this.INDEX_SEPARATOR).slice(0, level).join(this.INDEX_SEPARATOR);\n  }\n  lastLevelIndex(index = '') {\n    const parts = index.split(this.INDEX_SEPARATOR);\n    if (!parts.length) {\n      return NaN;\n    }\n    return parseInt(parts[parts.length - 1], 10);\n  }\n  level(index) {\n    return index.split(this.INDEX_SEPARATOR).length;\n  }\n  static ɵfac = function IndexBuilderService_Factory(t) {\n    return new (t || IndexBuilderService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IndexBuilderService,\n    factory: IndexBuilderService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IndexBuilderService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @hidden\n */\nclass LoadingNotificationService {\n  changes = new Subject();\n  notifyLoaded(index) {\n    this.changes.next(index);\n  }\n  static ɵfac = function LoadingNotificationService_Factory(t) {\n    return new (t || LoadingNotificationService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LoadingNotificationService,\n    factory: LoadingNotificationService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingNotificationService, [{\n    type: Injectable\n  }], null, null);\n})();\nconst focusableRegex = /^(?:a|input|select|option|textarea|button|object)$/i;\n/**\n * @hidden\n */\nconst match = (element, selector) => {\n  const matcher = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n  if (!matcher) {\n    return false;\n  }\n  return matcher.call(element, selector.toLowerCase());\n};\n/**\n * @hidden\n */\nconst closestWithMatch = (element, selector) => {\n  if (!document.documentElement.contains(element)) {\n    return null;\n  }\n  let parent = element;\n  while (parent !== null && parent.nodeType === 1) {\n    if (match(parent, selector)) {\n      return parent;\n    }\n    parent = parent.parentElement || parent.parentNode;\n  }\n  return null;\n};\n/**\n * @hidden\n */\nconst noop = () => {};\n/**\n * @hidden\n */\nconst isPresent = value => value !== null && value !== undefined;\n/**\n * @hidden\n */\nconst isBlank = value => value === null || value === undefined;\n/**\n * @hidden\n */\nconst isArray = value => Array.isArray(value);\n/**\n * @hidden\n */\nconst isNullOrEmptyString = value => isBlank(value) || value.trim().length === 0;\n/**\n * @hidden\n */\nconst isBoolean = value => typeof value === 'boolean';\n/**\n * @hidden\n */\nconst closestNode = element => {\n  const selector = 'li.k-treeview-item';\n  if (!isDocumentAvailable()) {\n    return null;\n  }\n  if (element.closest) {\n    return element.closest(selector);\n  } else {\n    return closestWithMatch(element, selector);\n  }\n};\n/**\n * @hidden\n */\nconst isFocusable = element => {\n  if (element.tagName) {\n    const tagName = element.tagName.toLowerCase();\n    const tabIndex = element.getAttribute('tabIndex');\n    const skipTab = tabIndex === '-1';\n    let focusable = tabIndex !== null && !skipTab;\n    if (focusableRegex.test(tagName)) {\n      focusable = !element.disabled && !skipTab;\n    }\n    return focusable;\n  }\n  return false;\n};\n/**\n * @hidden\n */\nconst isContent = element => {\n  const scopeSelector = '.k-treeview-leaf:not(.k-treeview-load-more-button),.k-treeview-item,.k-treeview';\n  if (!isDocumentAvailable()) {\n    return null;\n  }\n  let node = element;\n  while (node && !match(node, scopeSelector)) {\n    node = node.parentNode;\n  }\n  if (node) {\n    return match(node, '.k-treeview-leaf:not(.k-treeview-load-more-button)');\n  }\n};\n/**\n * @hidden\n *\n * Returns the nested .k-treeview-leaf:not(.k-treeview-load-more-button) element.\n * If the passed parent item is itself a content node, it is returned.\n */\nconst getContentElement = parent => {\n  if (!isPresent(parent)) {\n    return null;\n  }\n  const selector = '.k-treeview-leaf:not(.k-treeview-load-more-button)';\n  if (match(parent, selector)) {\n    return parent;\n  }\n  return parent.querySelector(selector);\n};\n/**\n * @hidden\n */\nconst isLoadMoreButton = element => {\n  return isPresent(closestWithMatch(element, '.k-treeview-leaf.k-treeview-load-more-button'));\n};\n/**\n * @hidden\n */\nconst closest = (node, predicate) => {\n  while (node && !predicate(node)) {\n    node = node.parentNode;\n  }\n  return node;\n};\n/**\n * @hidden\n */\nconst hasParent = (element, container) => {\n  return Boolean(closest(element, node => node === container));\n};\n/**\n * @hidden\n */\nconst focusableNode = element => element.nativeElement.querySelector('li[tabindex=\"0\"]');\n/**\n * @hidden\n */\nconst hasActiveNode = (target, node) => {\n  const closestItem = node || closestNode(target);\n  return closestItem && (closestItem === target || target.tabIndex < 0);\n};\n/**\n * @hidden\n */\nconst nodeId = node => node ? node.getAttribute('data-treeindex') : '';\n/**\n * @hidden\n */\nconst nodeIndex = item => (item || {}).index;\n/**\n * @hidden\n */\nconst dataItemsEqual = (first, second) => {\n  if (!isPresent(first) && !isPresent(second)) {\n    return true;\n  }\n  return isPresent(first) && isPresent(second) && first.item.dataItem === second.item.dataItem;\n};\n/**\n * @hidden\n */\nconst getDataItem = lookup => {\n  if (!isPresent(lookup)) {\n    return lookup;\n  }\n  return lookup.item.dataItem;\n};\n/**\n * @hidden\n */\nconst isArrayWithAtLeastOneItem = v => v && Array.isArray(v) && v.length !== 0;\n/**\n * @hidden\n * A recursive tree-filtering algorithm that returns:\n * - all child nodes of matching nodes\n * - a chain parent nodes from the match to the root node\n */\nconst filterTree = (items, term, {\n  operator,\n  ignoreCase,\n  mode\n}, textField, depth = 0) => {\n  const field = typeof textField === \"string\" ? textField : textField[depth];\n  items.forEach(wrapper => {\n    const matcher = typeof operator === \"string\" ? matchByFieldAndCase(field, operator, ignoreCase) : operator;\n    const isMatch = matcher(wrapper.dataItem, term);\n    wrapper.isMatch = isMatch;\n    wrapper.visible = isMatch;\n    wrapper.containsMatches = false;\n    if (isMatch) {\n      setParentChain(wrapper.parent);\n    }\n    if (wrapper.children && wrapper.children.length > 0) {\n      if (mode === \"strict\" || !isMatch) {\n        filterTree(wrapper.children, term, {\n          operator,\n          ignoreCase,\n          mode\n        }, textField, depth + 1);\n      } else {\n        makeAllVisible(wrapper.children);\n      }\n    }\n  });\n};\nconst setParentChain = node => {\n  if (!isPresent(node)) {\n    return;\n  }\n  node.containsMatches = true;\n  node.visible = true;\n  if (isPresent(node.parent) && !node.parent.containsMatches) {\n    setParentChain(node.parent);\n  }\n};\nconst makeAllVisible = nodes => {\n  nodes.forEach(node => {\n    node.visible = true;\n    if (node.children) {\n      makeAllVisible(node.children);\n    }\n  });\n};\nconst operators = {\n  contains: (a, b) => a.indexOf(b) >= 0,\n  doesnotcontain: (a, b) => a.indexOf(b) === -1,\n  startswith: (a, b) => a.lastIndexOf(b, 0) === 0,\n  doesnotstartwith: (a, b) => a.lastIndexOf(b, 0) === -1,\n  endswith: (a, b) => a.indexOf(b, a.length - b.length) >= 0,\n  doesnotendwith: (a, b) => a.indexOf(b, a.length - b.length) < 0\n};\nconst matchByCase = (matcher, ignoreCase) => (a, b) => {\n  if (ignoreCase) {\n    return matcher(a.toLowerCase(), b.toLowerCase());\n  }\n  return matcher(a, b);\n};\nconst matchByFieldAndCase = (field, operator, ignoreCase) => (dataItem, term) => matchByCase(operators[operator], ignoreCase)(getter(field)(dataItem), term);\n/**\n * @hidden\n */\nconst buildTreeIndex = (parentIndex, itemIndex) => {\n  return [parentIndex, itemIndex].filter(part => isPresent(part)).join('_');\n};\n/**\n * @hidden\n */\nconst buildTreeItem = (dataItem, currentLevelIndex, parentIndex) => {\n  if (!isPresent(dataItem)) {\n    return null;\n  }\n  return {\n    dataItem,\n    index: buildTreeIndex(parentIndex, currentLevelIndex)\n  };\n};\n/**\n * @hidden\n *\n * Retrieves all descendant nodes' lookups which are currently registered in the provided lookup item as a flat array.\n */\nconst fetchLoadedDescendants = (lookup, filterExpression) => {\n  if (!isPresent(lookup) || lookup.children.length === 0) {\n    return [];\n  }\n  let descendants = lookup.children;\n  if (isPresent(filterExpression)) {\n    descendants = descendants.filter(filterExpression);\n  }\n  descendants.forEach(child => descendants = descendants.concat(fetchLoadedDescendants(child, filterExpression)));\n  return descendants;\n};\n/**\n * @hidden\n *\n * Compares two Seets to determine whether all unique elements in one, are present in the other.\n * Important:\n *  - it disregards the element order\n */\nconst sameValues = (as, bs) => {\n  if (as.size !== bs.size) {\n    return false;\n  }\n  return Array.from(as).every(v => bs.has(v));\n};\n/**\n * @hidden\n * Returns the size class based on the component and size input.\n */\nconst getSizeClass = (component, size) => {\n  const SIZE_CLASSES = {\n    'small': `k-${component}-sm`,\n    'medium': `k-${component}-md`,\n    'large': `k-${component}-lg`\n  };\n  return SIZE_CLASSES[size];\n};\nconst safe = node => node || {};\nconst safeChildren = node => safe(node).children || [];\nconst lastVisibleNode = nodes => {\n  if (!Array.isArray(nodes) || nodes.length === 0) {\n    return null;\n  }\n  const nodesCount = nodes.length;\n  const lastIndex = nodesCount - 1;\n  for (let index = lastIndex; index >= 0; index -= 1) {\n    const node = nodes[index];\n    if (node.visible) {\n      return node;\n    }\n  }\n  return null;\n};\n/**\n * @hidden\n */\nclass NavigationModel {\n  ib = new IndexBuilderService();\n  nodes = [];\n  firstVisibleNode() {\n    return (this.nodes || []).find(node => node.visible);\n  }\n  lastVisibleNode() {\n    let node = lastVisibleNode(this.nodes);\n    while (isPresent(node) && safeChildren(node).length > 0) {\n      const children = safeChildren(node);\n      const lastVisibleChild = lastVisibleNode(children);\n      if (!isPresent(lastVisibleChild)) {\n        return node;\n      }\n      node = lastVisibleChild;\n    }\n    return node;\n  }\n  closestNode(index) {\n    const {\n      prev\n    } = safe(this.findNode(index));\n    const sibling = prev || this.firstVisibleNode();\n    return safe(sibling).index === index ? this.visibleSibling(sibling, 1) : sibling;\n  }\n  firstFocusableNode() {\n    return this.nodes.find(node => {\n      return !node.disabled && node.visible;\n    });\n  }\n  findNode(index) {\n    return this.find(index, this.nodes);\n  }\n  findParent(index) {\n    const parentLevel = this.ib.level(index) - 1;\n    return this.findNode(this.ib.indexForLevel(index, parentLevel));\n  }\n  findVisibleChild(index) {\n    const node = this.findNode(index);\n    const children = safeChildren(node);\n    return children.find(child => child.visible);\n  }\n  findVisiblePrev(item) {\n    const index = item.index;\n    const parent = this.findParent(index);\n    const levelIndex = this.ib.lastLevelIndex(index);\n    const prevNodes = this.container(parent).slice(0, levelIndex);\n    const prevNodesHidden = prevNodes.every(node => !node.visible);\n    if (levelIndex === 0 || prevNodesHidden) {\n      return parent;\n    }\n    const currentNode = this.findNode(index);\n    let prev = this.visibleSibling(currentNode, -1);\n    if (prev) {\n      let children = this.container(prev);\n      while (children.length > 0 && children.some(node => node.visible)) {\n        prev = lastVisibleNode(children);\n        children = this.container(prev);\n      }\n    }\n    return prev;\n  }\n  findVisibleNext(item) {\n    const children = this.container(item);\n    const hasVisibleChildren = children.some(child => child.visible);\n    if (children.length === 0 || !hasVisibleChildren) {\n      return this.visibleSibling(item, 1);\n    }\n    return children.find(child => child.visible);\n  }\n  registerItem(id, index, disabled, loadMoreButton = false, visible = true) {\n    const children = [];\n    const level = this.ib.level(index);\n    const parent = this.findParent(index);\n    if (parent || level === 1) {\n      const node = {\n        id,\n        children,\n        index,\n        parent,\n        disabled,\n        loadMoreButton,\n        visible\n      };\n      this.insert(node, parent);\n    }\n  }\n  unregisterItem(id, index) {\n    const node = this.find(index, this.nodes);\n    if (!node || node.id !== id) {\n      return;\n    }\n    const children = this.container(node.parent);\n    children.splice(children.indexOf(node), 1);\n  }\n  childLevel(nodes) {\n    const children = nodes.filter(node => isPresent(node));\n    if (!children || !children.length) {\n      return 1;\n    }\n    return this.ib.level(children[0].index);\n  }\n  container(node) {\n    return node ? node.children : this.nodes;\n  }\n  find(index, nodes) {\n    const childLevel = this.childLevel(nodes);\n    const indexToMatch = this.ib.indexForLevel(index, childLevel);\n    const isLeaf = childLevel === this.ib.level(index);\n    const node = nodes.find(n => n && n.index === indexToMatch);\n    if (!node) {\n      return null;\n    }\n    return isLeaf ? node : this.find(index, node.children);\n  }\n  insert(node, parent) {\n    const nodes = this.container(parent);\n    nodes.splice(this.ib.lastLevelIndex(node.index), 0, node);\n  }\n  visibleSibling(node, offset) {\n    if (!node) {\n      return null;\n    }\n    const parent = this.findParent(node.index);\n    const container = this.container(parent);\n    let nextItemIndex = container.indexOf(node) + offset;\n    let nextItem = container[nextItemIndex];\n    while (isPresent(nextItem)) {\n      if (nextItem.visible) {\n        return nextItem;\n      }\n      nextItemIndex += offset;\n      nextItem = container[nextItemIndex];\n    }\n    return this.visibleSibling(parent, offset);\n  }\n}\n\n/**\n * @hidden\n */\nclass NavigationService {\n  localization;\n  expands = new Subject();\n  moves = new Subject();\n  checks = new Subject();\n  selects = new Subject();\n  deselectAllButCurrentItem = new Subject();\n  loadMore = new Subject();\n  navigable = true;\n  selection = 'single';\n  isTreeViewActive = false;\n  get model() {\n    return this._model;\n  }\n  set model(model) {\n    this._model = model;\n  }\n  actions = {\n    [Keys.ArrowUp]: () => this.activate(this.model.findVisiblePrev(this.focusableItem), true),\n    [Keys.ArrowDown]: () => this.activate(this.model.findVisibleNext(this.focusableItem), true),\n    [Keys.ArrowLeft]: () => !this.isLoadMoreButton && this.expand({\n      expand: this.localization.rtl,\n      intercept: this.localization.rtl ? this.moveToFirstVisibleChild : this.moveToParent\n    }),\n    [Keys.ArrowRight]: () => !this.isLoadMoreButton && this.expand({\n      expand: !this.localization.rtl,\n      intercept: this.localization.rtl ? this.moveToParent : this.moveToFirstVisibleChild\n    }),\n    [Keys.Home]: () => this.activate(this.model.firstVisibleNode(), true),\n    [Keys.End]: () => this.activate(this.model.lastVisibleNode(), true),\n    [Keys.Enter]: e => this.handleEnter(e),\n    [Keys.Space]: () => this.handleSpace()\n  };\n  activeItem;\n  isFocused = false;\n  shouldScroll = false;\n  _model = new NavigationModel();\n  get activeIndex() {\n    return nodeIndex(this.activeItem) || null;\n  }\n  get isActiveExpanded() {\n    return this.activeItem && this.activeItem.children.length > 0;\n  }\n  get isLoadMoreButton() {\n    return this.activeItem && this.activeItem.loadMoreButton;\n  }\n  get focusableItem() {\n    return this.activeItem || this.model.firstFocusableNode();\n  }\n  constructor(localization) {\n    this.localization = localization;\n    this.moveToFirstVisibleChild = this.moveToFirstVisibleChild.bind(this);\n    this.moveToParent = this.moveToParent.bind(this);\n  }\n  activate(item, shouldScroll = false) {\n    if (!this.navigable || !item || this.isActive(nodeIndex(item))) {\n      return;\n    }\n    this.isFocused = true;\n    this.activeItem = item || this.activeItem;\n    this.shouldScroll = shouldScroll;\n    this.notifyMove();\n  }\n  activateParent(index) {\n    this.activate(this.model.findParent(index));\n  }\n  activateIndex(index) {\n    if (!index) {\n      return;\n    }\n    this.activate(this.model.findNode(index));\n  }\n  activateClosest(index) {\n    if (!index || nodeIndex(this.focusableItem) !== index) {\n      return;\n    }\n    this.activeItem = this.model.closestNode(index);\n    this.notifyMove();\n  }\n  activateFocusable() {\n    if (this.activeItem) {\n      return;\n    }\n    this.activeItem = this.model.firstVisibleNode();\n    this.notifyMove();\n  }\n  deactivate() {\n    if (!this.navigable || !this.isFocused) {\n      return;\n    }\n    this.isFocused = false;\n    this.notifyMove();\n  }\n  checkIndex(index) {\n    if (!this.isDisabled(index)) {\n      this.checks.next(index);\n    }\n  }\n  selectIndex(index) {\n    if (!this.isDisabled(index)) {\n      this.selects.next(index);\n    }\n  }\n  notifyLoadMore(index) {\n    if (!isPresent(index)) {\n      return;\n    }\n    this.loadMore.next(index);\n  }\n  isActive(index) {\n    if (!index) {\n      return false;\n    }\n    return this.isFocused && this.activeIndex === index;\n  }\n  isFocusable(index) {\n    return nodeIndex(this.focusableItem) === index;\n  }\n  isDisabled(index) {\n    if (!index) {\n      return false;\n    }\n    return this.model.findNode(index).disabled;\n  }\n  registerItem(id, index, disabled, loadMoreButton = false, visible = true) {\n    const itemAtIndex = this.model.findNode(index);\n    if (isPresent(itemAtIndex)) {\n      this.model.unregisterItem(itemAtIndex.id, itemAtIndex.index);\n      if (this.isActive(index)) {\n        this.deactivate();\n      }\n    }\n    this.model.registerItem(id, index, disabled, loadMoreButton, visible);\n  }\n  updateItem(index, disabled, visible = true) {\n    const itemAtIndex = this.model.findNode(index);\n    if (isPresent(itemAtIndex)) {\n      if (this.isActive(index)) {\n        this.deactivate();\n      }\n    }\n    itemAtIndex.disabled = disabled;\n    itemAtIndex.visible = visible;\n  }\n  unregisterItem(id, index) {\n    if (this.isActive(index)) {\n      this.activateParent(index);\n    }\n    this.model.unregisterItem(id, index);\n  }\n  move(e) {\n    if (!this.navigable) {\n      return;\n    }\n    const moveAction = this.actions[e.keyCode];\n    if (!moveAction) {\n      return;\n    }\n    moveAction(e);\n    e.preventDefault();\n  }\n  expand({\n    expand,\n    intercept\n  }) {\n    const index = nodeIndex(this.activeItem);\n    if (!index || intercept(index)) {\n      return;\n    }\n    this.notifyExpand(expand);\n  }\n  moveToParent() {\n    if (this.isActiveExpanded) {\n      return false;\n    }\n    this.activate(this.model.findParent(nodeIndex(this.activeItem)));\n    return true;\n  }\n  moveToFirstVisibleChild() {\n    if (!this.isActiveExpanded) {\n      return false;\n    }\n    this.activate(this.model.findVisibleChild(nodeIndex(this.activeItem)));\n    return true;\n  }\n  notifyExpand(expand) {\n    this.expands.next(this.navigationState(expand));\n  }\n  notifyMove() {\n    this.moves.next(this.navigationState());\n  }\n  navigationState(expand = false) {\n    return {\n      expand,\n      index: this.activeIndex,\n      isFocused: this.isFocused,\n      shouldScroll: this.shouldScroll\n    };\n  }\n  handleEnter(event) {\n    if (!this.navigable) {\n      return;\n    }\n    if (this.isLoadMoreButton) {\n      this.notifyLoadMore(this.activeIndex);\n    } else {\n      const isCtrlPressed = event.ctrlKey || event.metaKey;\n      if (isCtrlPressed) {\n        this.selectIndex(this.activeIndex);\n      } else {\n        if (this.selection === 'multiple') {\n          this.deselectAllButCurrentItem.next({\n            dataItem: this.activeItem,\n            index: this.activeIndex\n          });\n        } else {\n          this.selectIndex(this.activeIndex);\n        }\n      }\n    }\n  }\n  handleSpace() {\n    if (!this.navigable) {\n      return;\n    }\n    if (this.isLoadMoreButton) {\n      this.notifyLoadMore(this.activeIndex);\n    } else {\n      this.checkIndex(this.activeIndex);\n    }\n  }\n  static ɵfac = function NavigationService_Factory(t) {\n    return new (t || NavigationService)(i0.ɵɵinject(i1.LocalizationService));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NavigationService,\n    factory: NavigationService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NavigationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.LocalizationService\n    }];\n  }, null);\n})();\n\n/**\n * @hidden\n */\nclass NodeChildrenService {\n  changes = new Subject();\n  childrenLoaded(item, children) {\n    this.changes.next({\n      item,\n      children\n    });\n  }\n  static ɵfac = function NodeChildrenService_Factory(t) {\n    return new (t || NodeChildrenService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NodeChildrenService,\n    factory: NodeChildrenService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NodeChildrenService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * Represents the template for the TreeView nodes ([more information and example]({% slug nodetemplate_treeview %})).\n * The template helps to customize the content of the nodes. To define the node template, nest an `<ng-template>`\n * tag with the `kendoTreeViewNodeTemplate` directive inside a `<kendo-treeview>` tag.\n *\n *\n * The node data item and its hierarchical index are available as context variables:\n *\n * - `let-dataItem` (`any`) - available as implicit context variable\n * - `let-index=\"index\"` (`string`)\n *\n *\n * @example\n * ```ts\n *\n *  import { Component } from '@angular/core';\n *  @Component({\n *      selector: 'my-app',\n *      template: `\n *      <kendo-treeview\n *          [nodes]=\"data\"\n *          kendoTreeViewExpandable\n *\n *          kendoTreeViewHierarchyBinding\n *          childrenField=\"items\">\n *        <ng-template kendoTreeViewNodeTemplate let-dataItem let-index=\"index\">\n *          <span [style.fontWeight]=\"dataItem.items ? 'bolder': 'normal' \">{{ index }}: {{ dataItem.text }}</span>\n *        </ng-template>\n *      </kendo-treeview>\n *    `\n *  })\n *  export class AppComponent {\n *      public data: any[] = [\n *          {\n *              text: \"Inbox\",\n *              items: [{ text: \"Read Mail\" }]\n *          },\n *          {\n *              text: \"Drafts\"\n *          },\n *          {\n *              text: \"Search Folders\",\n *              items: [\n *                  { text: \"Categorized Mail\" },\n *                  { text: \"Large Mail\" },\n *                  { text: \"Unread Mail\"}\n *              ]\n *          },\n *          { text: \"Settings\" }\n *      ];\n *  }\n *\n * ```\n */\nclass NodeTemplateDirective {\n  templateRef;\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n  static ɵfac = function NodeTemplateDirective_Factory(t) {\n    return new (t || NodeTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NodeTemplateDirective,\n    selectors: [[\"\", \"kendoTreeViewNodeTemplate\", \"\"]],\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NodeTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewNodeTemplate]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Represents the template for the TreeView load more buttons.\n * To define a button template, nest an `<ng-template>`\n * tag with the `kendoTreeViewLoadMoreButtonTemplate` directive inside a `<kendo-treeview>` tag\n * ([see example]({% slug loadmorebutton_treeview %}#toc-button-template)).\n *\n * The hierarchical index of the load more button node is available as a context variable:\n *\n * - `let-index=\"index\"` (`string`)\n */\nclass LoadMoreButtonTemplateDirective {\n  templateRef;\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n  static ɵfac = function LoadMoreButtonTemplateDirective_Factory(t) {\n    return new (t || LoadMoreButtonTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LoadMoreButtonTemplateDirective,\n    selectors: [[\"\", \"kendoTreeViewLoadMoreButtonTemplate\", \"\"]],\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadMoreButtonTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewLoadMoreButtonTemplate]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @hidden\n *\n * An injection token used by the data binding directives to interface with\n * the TreeView or the DropDownTree components.\n */\nclass DataBoundComponent {\n  static ɵfac = function DataBoundComponent_Factory(t) {\n    return new (t || DataBoundComponent)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DataBoundComponent,\n    factory: DataBoundComponent.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataBoundComponent, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @hidden\n *\n * An injection token used by the expand-directive to interface with\n * the TreeView or the DropDownTree components.\n */\nclass ExpandableComponent {\n  static ɵfac = function ExpandableComponent_Factory(t) {\n    return new (t || ExpandableComponent)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ExpandableComponent,\n    factory: ExpandableComponent.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ExpandableComponent, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @hidden\n */\nclass SelectionService {\n  changes = new Subject();\n  firstIndex;\n  isFirstSelected(index) {\n    return this.firstIndex === index;\n  }\n  setFirstSelected(index, selected) {\n    if (this.firstIndex === index && selected === false) {\n      this.firstIndex = null;\n    } else if (!this.firstIndex && selected) {\n      this.firstIndex = index;\n    }\n  }\n  select(index, dataItem) {\n    this.changes.next({\n      dataItem,\n      index\n    });\n  }\n  static ɵfac = function SelectionService_Factory(t) {\n    return new (t || SelectionService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SelectionService,\n    factory: SelectionService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectionService, [{\n    type: Injectable\n  }], null, null);\n})();\nconst INDEX_REGEX = /\\d+$/;\n/**\n * @hidden\n */\nclass TreeViewLookupService {\n  map = new Map();\n  reset() {\n    this.map.clear();\n  }\n  registerItem(item, parent) {\n    const currentLookup = {\n      children: [],\n      item,\n      parent: this.item(nodeIndex(parent))\n    };\n    this.map.set(item.index, currentLookup);\n  }\n  registerChildren(index, children) {\n    const item = this.item(index);\n    if (!item) {\n      return;\n    }\n    item.children = children;\n  }\n  unregisterItem(index, dataItem) {\n    const current = this.item(index);\n    if (current && current.item.dataItem === dataItem) {\n      this.map.delete(index);\n      if (current.parent && current.parent.children) {\n        current.parent.children = current.parent.children.filter(item => item.dataItem !== dataItem);\n      }\n    }\n  }\n  replaceItem(index, item, parent) {\n    if (!item) {\n      return;\n    }\n    this.unregisterItem(index, item.dataItem);\n    this.registerItem(item, parent);\n    this.addToParent(item, parent);\n  }\n  itemLookup(index) {\n    const item = this.item(index);\n    if (!item) {\n      return null;\n    }\n    return {\n      children: this.mapChildren(item.children),\n      item: item.item,\n      parent: item.parent\n    };\n  }\n  hasItem(index) {\n    return this.map.has(index);\n  }\n  item(index) {\n    return this.map.get(index) || null;\n  }\n  addToParent(item, parent) {\n    if (parent) {\n      const parentItem = this.item(parent.index);\n      const index = parseInt(INDEX_REGEX.exec(item.index)[0], 10);\n      parentItem.children = parentItem.children || [];\n      parentItem.children.splice(index, 0, item);\n    }\n  }\n  mapChildren(children = []) {\n    return children.map(c => {\n      const {\n        item,\n        parent,\n        children\n      } = this.item(c.index);\n      return {\n        children: this.mapChildren(children),\n        item,\n        parent\n      };\n    });\n  }\n  static ɵfac = function TreeViewLookupService_Factory(t) {\n    return new (t || TreeViewLookupService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TreeViewLookupService,\n    factory: TreeViewLookupService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewLookupService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @hidden\n *\n * A directive which manages the expanded state of the TreeView.\n */\nclass TreeViewItemContentDirective {\n  element;\n  navigationService;\n  selectionService;\n  renderer;\n  dataItem;\n  index;\n  initialSelection = false;\n  isSelected = isSelected;\n  subscriptions = new Subscription();\n  constructor(element, navigationService, selectionService, renderer) {\n    this.element = element;\n    this.navigationService = navigationService;\n    this.selectionService = selectionService;\n    this.renderer = renderer;\n    this.subscriptions.add(this.navigationService.moves.subscribe(this.updateFocusClass.bind(this)));\n    this.subscriptions.add(this.navigationService.selects.pipe(filter(index => index === this.index)).subscribe(index => this.selectionService.select(index, this.dataItem)));\n    this.subscriptions.add(this.selectionService.changes.subscribe(() => {\n      this.updateSelectionClass(this.isSelected(this.dataItem, this.index));\n    }));\n  }\n  ngOnChanges(changes) {\n    if (changes['initialSelection']) {\n      this.updateSelectionClass(this.initialSelection);\n    }\n    if (changes['index']) {\n      this.updateFocusClass();\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  updateFocusClass() {\n    this.render(this.navigationService.isActive(this.index), 'k-focus');\n  }\n  updateSelectionClass(selected) {\n    this.render(selected, 'k-selected');\n  }\n  render(addClass, className) {\n    const action = addClass ? 'addClass' : 'removeClass';\n    this.renderer[action](this.element.nativeElement, className);\n  }\n  static ɵfac = function TreeViewItemContentDirective_Factory(t) {\n    return new (t || TreeViewItemContentDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NavigationService), i0.ɵɵdirectiveInject(SelectionService), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TreeViewItemContentDirective,\n    selectors: [[\"\", \"kendoTreeViewItemContent\", \"\"]],\n    inputs: {\n      dataItem: \"dataItem\",\n      index: \"index\",\n      initialSelection: \"initialSelection\",\n      isSelected: \"isSelected\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewItemContentDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewItemContent]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: NavigationService\n    }, {\n      type: SelectionService\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    dataItem: [{\n      type: Input\n    }],\n    index: [{\n      type: Input\n    }],\n    initialSelection: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @hidden\n */\nclass LoadingIndicatorDirective {\n  expandService;\n  loadingService;\n  cd;\n  get loading() {\n    return this._loading;\n  }\n  set loading(value) {\n    this._loading = value;\n    this.cd.markForCheck();\n  }\n  index;\n  _loading = false;\n  subscription;\n  constructor(expandService, loadingService, cd) {\n    this.expandService = expandService;\n    this.loadingService = loadingService;\n    this.cd = cd;\n  }\n  ngOnInit() {\n    const loadingNotifications = this.loadingService.changes.pipe(filter(index => index === this.index));\n    this.subscription = this.expandService.changes.pipe(filter(({\n      index\n    }) => index === this.index), tap(({\n      expand\n    }) => {\n      if (!expand && this.loading) {\n        this.loading = false;\n      }\n    }), filter(({\n      expand\n    }) => expand), switchMap(x => of(x).pipe(delay(100), takeUntil(loadingNotifications)))).subscribe(() => this.loading = true);\n    this.subscription.add(loadingNotifications.subscribe(() => this.loading = false));\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function LoadingIndicatorDirective_Factory(t) {\n    return new (t || LoadingIndicatorDirective)(i0.ɵɵdirectiveInject(ExpandStateService), i0.ɵɵdirectiveInject(LoadingNotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LoadingIndicatorDirective,\n    selectors: [[\"\", \"kendoTreeViewLoading\", \"\"]],\n    hostVars: 2,\n    hostBindings: function LoadingIndicatorDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"k-i-loading\", ctx.loading);\n      }\n    },\n    inputs: {\n      index: [i0.ɵɵInputFlags.None, \"kendoTreeViewLoading\", \"index\"]\n    },\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingIndicatorDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewLoading]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: ExpandStateService\n    }, {\n      type: LoadingNotificationService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    loading: [{\n      type: HostBinding,\n      args: [\"class.k-i-loading\"]\n    }],\n    index: [{\n      type: Input,\n      args: [\"kendoTreeViewLoading\"]\n    }]\n  });\n})();\nconst buildItem = (index, dataItem) => ({\n  dataItem,\n  index\n});\nlet id = 0;\nconst TREE_ITEM_ROLE = 'treeitem';\nconst BUTTON_ROLE = 'button';\n/**\n * @hidden\n *\n * A directive which manages the expanded state of the TreeView.\n */\nclass TreeViewItemDirective {\n  element;\n  expandService;\n  navigationService;\n  selectionService;\n  lookupService;\n  renderer;\n  ib;\n  dataItem;\n  index;\n  parentDataItem;\n  parentIndex;\n  role = TREE_ITEM_ROLE;\n  loadOnDemand = true;\n  checkable;\n  selectable;\n  expandable;\n  set isChecked(checked) {\n    if (checked === 'checked') {\n      this.ariaChecked = 'true';\n    } else if (checked === 'indeterminate') {\n      this.ariaChecked = 'mixed';\n    } else {\n      this.ariaChecked = 'false';\n    }\n  }\n  isDisabled = false;\n  isVisible = true;\n  get isExpanded() {\n    return this._isExpanded || false;\n  }\n  set isExpanded(isExpanded) {\n    this._isExpanded = isExpanded;\n  }\n  get isSelected() {\n    return this._isSelected || false;\n  }\n  set isSelected(isSelected) {\n    this._isSelected = isSelected;\n  }\n  get isButton() {\n    return this.role === BUTTON_ROLE;\n  }\n  get treeItem() {\n    return buildItem(this.index, this.dataItem);\n  }\n  get parentTreeItem() {\n    return this.parentDataItem ? buildItem(this.parentIndex, this.parentDataItem) : null;\n  }\n  ariaChecked = 'false';\n  id = id++;\n  _isExpanded;\n  _isSelected;\n  isInitialized = false;\n  subscriptions = [];\n  constructor(element, expandService, navigationService, selectionService, lookupService, renderer, ib) {\n    this.element = element;\n    this.expandService = expandService;\n    this.navigationService = navigationService;\n    this.selectionService = selectionService;\n    this.lookupService = lookupService;\n    this.renderer = renderer;\n    this.ib = ib;\n    this.subscribe();\n  }\n  ngOnInit() {\n    if (this.loadOnDemand && !this.isButton) {\n      this.lookupService.registerItem(this.treeItem, this.parentTreeItem);\n    }\n    this.registerNavigationItem();\n    this.isInitialized = true;\n    this.setAttribute('role', this.role);\n    this.setAriaAttributes();\n    this.updateTabIndex();\n  }\n  ngOnChanges(changes) {\n    const {\n      index\n    } = changes;\n    if (anyChanged(['index', 'checkable', 'isChecked', 'expandable', 'isExpanded', 'selectable', 'isSelected'], changes)) {\n      this.setAriaAttributes();\n    }\n    if (this.loadOnDemand && !this.isButton) {\n      this.moveLookupItem(changes);\n    }\n    this.moveNavigationItem(index);\n    if (anyChanged(['isDisabled', 'isVisible'], changes)) {\n      this.updateNodeAvailability();\n    }\n  }\n  ngOnDestroy() {\n    this.navigationService.unregisterItem(this.id, this.index);\n    if (this.loadOnDemand && !this.isButton) {\n      this.lookupService.unregisterItem(this.index, this.dataItem);\n    }\n    this.subscriptions = this.subscriptions.reduce((list, callback) => (callback.unsubscribe(), list), []);\n  }\n  subscribe() {\n    this.subscriptions = [this.navigationService.moves.subscribe(navState => {\n      this.updateTabIndex();\n      this.focusItem(navState.shouldScroll);\n    }), this.navigationService.expands.pipe(filter(({\n      index\n    }) => index === this.index && !this.isDisabled)).subscribe(({\n      expand\n    }) => this.expand(expand))];\n  }\n  registerNavigationItem() {\n    this.navigationService.registerItem(this.id, this.index, this.isDisabled, this.isButton, this.isVisible);\n    this.activateItem();\n  }\n  activateItem() {\n    if (this.isDisabled) {\n      return;\n    }\n    const navigationService = this.navigationService;\n    const selectionService = this.selectionService;\n    const index = this.index;\n    selectionService.setFirstSelected(index, this.isSelected);\n    if (!navigationService.isActive(index) && selectionService.isFirstSelected(index)) {\n      navigationService.activateIndex(index);\n    }\n  }\n  expand(shouldExpand) {\n    this.expandService[shouldExpand ? 'expand' : 'collapse'](this.index, this.dataItem);\n  }\n  isFocusable() {\n    return !this.isDisabled && this.navigationService.isFocusable(this.index);\n  }\n  focusItem(scrollIntoView = false) {\n    if (this.isInitialized && this.navigationService.isActive(this.index)) {\n      this.element.nativeElement.focus({\n        preventScroll: !scrollIntoView\n      });\n    }\n  }\n  moveLookupItem(changes = {}) {\n    const {\n      dataItem,\n      index,\n      parentDataItem,\n      parentIndex\n    } = changes;\n    if (index && index.firstChange ||\n    //skip first change\n    !dataItem && !index && !parentDataItem && !parentIndex) {\n      return;\n    }\n    const oldIndex = (index || {}).previousValue || this.index;\n    this.lookupService.replaceItem(oldIndex, this.treeItem, this.parentTreeItem);\n  }\n  moveNavigationItem(indexChange = {}) {\n    const {\n      currentValue,\n      firstChange,\n      previousValue\n    } = indexChange;\n    if (!firstChange && isPresent(currentValue) && isPresent(previousValue)) {\n      this.navigationService.unregisterItem(this.id, previousValue);\n      this.navigationService.registerItem(this.id, currentValue, this.isDisabled, this.isButton);\n    }\n  }\n  updateNodeAvailability() {\n    const service = this.navigationService;\n    if (this.isDisabled || !this.isVisible && this.navigationService.isTreeViewActive) {\n      service.activateClosest(this.index); // activate before updating the item\n    } else {\n      service.activateFocusable();\n    }\n    service.updateItem(this.index, this.isDisabled, this.isVisible);\n  }\n  setAriaAttributes() {\n    this.setAttribute('aria-level', this.ib.level(this.index).toString());\n    // don't render attributes when the component configuration doesn't allow the specified state\n    this.setAttribute('aria-expanded', this.expandable ? this.isExpanded.toString() : null);\n    this.setAttribute('aria-selected', this.selectable ? this.isSelected.toString() : null);\n    this.setAttribute('aria-checked', this.checkable ? this.ariaChecked : null);\n  }\n  updateTabIndex() {\n    this.setAttribute('tabIndex', this.isFocusable() ? '0' : '-1');\n  }\n  setAttribute(attr, value) {\n    if (!isPresent(value)) {\n      this.renderer.removeAttribute(this.element.nativeElement, attr);\n      return;\n    }\n    this.renderer.setAttribute(this.element.nativeElement, attr, value);\n  }\n  static ɵfac = function TreeViewItemDirective_Factory(t) {\n    return new (t || TreeViewItemDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ExpandStateService), i0.ɵɵdirectiveInject(NavigationService), i0.ɵɵdirectiveInject(SelectionService), i0.ɵɵdirectiveInject(TreeViewLookupService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(IndexBuilderService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TreeViewItemDirective,\n    selectors: [[\"\", \"kendoTreeViewItem\", \"\"]],\n    inputs: {\n      dataItem: \"dataItem\",\n      index: \"index\",\n      parentDataItem: \"parentDataItem\",\n      parentIndex: \"parentIndex\",\n      role: \"role\",\n      loadOnDemand: \"loadOnDemand\",\n      checkable: \"checkable\",\n      selectable: \"selectable\",\n      expandable: \"expandable\",\n      isChecked: \"isChecked\",\n      isDisabled: \"isDisabled\",\n      isVisible: \"isVisible\",\n      isExpanded: \"isExpanded\",\n      isSelected: \"isSelected\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewItemDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewItem]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ExpandStateService\n    }, {\n      type: NavigationService\n    }, {\n      type: SelectionService\n    }, {\n      type: TreeViewLookupService\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: IndexBuilderService\n    }];\n  }, {\n    dataItem: [{\n      type: Input\n    }],\n    index: [{\n      type: Input\n    }],\n    parentDataItem: [{\n      type: Input\n    }],\n    parentIndex: [{\n      type: Input\n    }],\n    role: [{\n      type: Input\n    }],\n    loadOnDemand: [{\n      type: Input\n    }],\n    checkable: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    expandable: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    isVisible: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }]\n  });\n})();\nconst TOP_ITEM = 'k-treeview-top';\nconst MID_ITEM = 'k-treeview-mid';\nconst BOT_ITEM = 'k-treeview-bot';\n/**\n * @hidden\n */\nclass TreeViewGroupComponent {\n  expandService;\n  loadingService;\n  indexBuilder;\n  treeViewLookupService;\n  navigationService;\n  nodeChildrenService;\n  dataChangeNotification;\n  changeDetectorRef;\n  localization;\n  renderer;\n  /**\n   * @hidden\n   */\n  caretAltDownIcon = caretAltDownIcon;\n  /**\n   * @hidden\n   */\n  caretAltRightIcon = caretAltRightIcon;\n  /**\n   * @hidden\n   */\n  caretAltLeftIcon = caretAltLeftIcon;\n  /**\n   * @hidden\n   */\n  loadMoreTitle;\n  kGroupClass = true;\n  get role() {\n    return this.parentIndex ? 'group' : 'tree';\n  }\n  checkboxes;\n  expandIcons;\n  disabled;\n  selectable;\n  touchActions;\n  disableParentNodesOnly;\n  loadOnDemand = true;\n  trackBy;\n  nodes;\n  textField = \"\";\n  parentDataItem;\n  parentIndex;\n  nodeTemplateRef;\n  loadMoreButtonTemplateRef;\n  loadMoreService;\n  size = 'medium';\n  expandDisabledNodes;\n  initialNodesLoaded = false;\n  loadingMoreNodes = false;\n  isItemExpandable = (node, index) => this.expandDisabledNodes || !this.isItemDisabled(node, index);\n  getFontIcon(node, index) {\n    return this.isExpanded(node, index) ? 'caret-alt-down' : !this.localization.rtl ? 'caret-alt-right' : 'caret-alt-left';\n  }\n  getSvgIcon(node, index) {\n    return this.isExpanded(node, index) ? caretAltDownIcon : !this.localization.rtl ? caretAltRightIcon : caretAltLeftIcon;\n  }\n  get moreNodesAvailable() {\n    if (!isPresent(this.loadMoreService) || this.data.length === 0) {\n      return false;\n    }\n    return this.pageSize < this.totalNodesCount;\n  }\n  get pageSize() {\n    if (!isPresent(this.loadMoreService)) {\n      return null;\n    }\n    return this.loadMoreService.getGroupSize(this.parentDataItem);\n  }\n  set pageSize(pageSize) {\n    this.loadMoreService.setGroupSize(this.parentDataItem, pageSize);\n  }\n  get data() {\n    if (isPresent(this.pageSize)) {\n      const normalizedSizeValue = this.pageSize > 0 ? this.pageSize : 0;\n      return this._data.slice(0, normalizedSizeValue);\n    }\n    return this._data;\n  }\n  set data(data) {\n    this._data = data;\n    this.registerLoadedNodes(this.data);\n  }\n  get loadMoreButtonIndex() {\n    if (!this.loadMoreService) {\n      return null;\n    }\n    return this.nodeIndex(this.data.length);\n  }\n  /**\n   * Represents the total number of nodes for the current level.\n   */\n  get totalNodesCount() {\n    if (!this.loadMoreService) {\n      return this.data.length;\n    }\n    return this.loadMoreService.getTotalNodesCount(this.parentDataItem, this._data.length);\n  }\n  _data = [];\n  nodesSubscription;\n  loadMoreNodesSubscription;\n  singleRecordSubscriptions = new Subscription();\n  localizationSubscriptions = new Subscription();\n  constructor(expandService, loadingService, indexBuilder, treeViewLookupService, navigationService, nodeChildrenService, dataChangeNotification, changeDetectorRef, localization, renderer) {\n    this.expandService = expandService;\n    this.loadingService = loadingService;\n    this.indexBuilder = indexBuilder;\n    this.treeViewLookupService = treeViewLookupService;\n    this.navigationService = navigationService;\n    this.nodeChildrenService = nodeChildrenService;\n    this.dataChangeNotification = dataChangeNotification;\n    this.changeDetectorRef = changeDetectorRef;\n    this.localization = localization;\n    this.renderer = renderer;\n  }\n  isChecked = () => 'none';\n  isDisabled = () => false;\n  hasCheckbox = () => true;\n  isExpanded = () => false;\n  isVisible = () => true;\n  isSelected = () => false;\n  children = () => of([]);\n  hasChildren = () => false;\n  get hasTemplate() {\n    return isPresent(this.nodeTemplateRef);\n  }\n  expandNode(index, dataItem, expand) {\n    if (expand) {\n      this.expandService.expand(index, dataItem);\n    } else {\n      this.expandService.collapse(index, dataItem);\n    }\n  }\n  checkNode(index, checkBox) {\n    this.navigationService.checkIndex(index);\n    this.navigationService.activateIndex(index);\n    if (checkBox?.input) {\n      this.renderer.removeClass(checkBox.input.nativeElement, 'k-focus');\n    }\n  }\n  nodeIndex(index) {\n    return this.indexBuilder.nodeIndex(index.toString(), this.parentIndex);\n  }\n  nodeText(dataItem) {\n    const textField = isArray(this.textField) ? this.textField[0] : this.textField;\n    return getter(textField)(dataItem);\n  }\n  getCheckBoxState(item, index) {\n    const state = this.isChecked(item, index);\n    if (state === 'indeterminate') {\n      return state;\n    }\n    return state === 'checked';\n  }\n  getCheckboxAttributes(index) {\n    return {\n      'aria-hidden': 'true',\n      role: 'none',\n      'aria-labelledby': this.nodeIndex(index)\n    };\n  }\n  ngOnDestroy() {\n    if (isPresent(this.nodesSubscription)) {\n      this.nodesSubscription.unsubscribe();\n    }\n    if (isPresent(this.loadMoreNodesSubscription)) {\n      this.loadMoreNodesSubscription.unsubscribe();\n    }\n    this.singleRecordSubscriptions.unsubscribe();\n    this.localizationSubscriptions.unsubscribe();\n  }\n  ngOnInit() {\n    this.subscribeToNodesChange();\n    this.singleRecordSubscriptions.add(this.dataChangeNotification.changes.subscribe(this.subscribeToNodesChange.bind(this)));\n    this.singleRecordSubscriptions.add(this.navigationService.loadMore.pipe(filter(index => index === this.loadMoreButtonIndex)).subscribe(this.loadMoreNodes.bind(this)));\n    this.localizationSubscriptions.add(this.localization.changes.subscribe(this.l10nChange.bind(this)));\n  }\n  ngOnChanges(changes) {\n    if (changes.parentIndex && this.loadOnDemand) {\n      this.setNodeChildren(this.mapToTreeItem(this.data));\n    }\n    if (this.localization.get('loadMore')) {\n      this.loadMoreTitle = this.localization.get('loadMore');\n    }\n  }\n  l10nChange() {\n    if (this.localization.get('loadMore')) {\n      this.loadMoreTitle = this.localization.get('loadMore');\n    }\n    this.changeDetectorRef.markForCheck();\n  }\n  fetchChildren(node, index) {\n    return this.children(node).pipe(catchError(() => {\n      this.loadingService.notifyLoaded(index);\n      return EMPTY;\n    }), tap(() => this.loadingService.notifyLoaded(index)));\n  }\n  get nextFields() {\n    if (isArray(this.textField)) {\n      return this.textField.length > 1 ? this.textField.slice(1) : this.textField;\n    }\n    return [this.textField];\n  }\n  loadMoreNodes() {\n    if (isPresent(this.loadMoreService.loadMoreNodes)) {\n      this.fetchMoreNodes();\n    } else {\n      this.loadMoreLocalNodes();\n    }\n  }\n  /**\n   * @hidden\n   */\n  isItemDisabled(node, index) {\n    return this.disabled && !this.disableParentNodesOnly || this.isDisabled(node, this.nodeIndex(index));\n  }\n  /**\n   * @hidden\n   */\n  setItemClasses(dataLength, index) {\n    if (dataLength === 1) {\n      return this.parentIndex ? BOT_ITEM : `${TOP_ITEM} ${BOT_ITEM}`;\n    }\n    if (index === 0) {\n      return TOP_ITEM;\n    }\n    if (index > 0 && index < dataLength - 1) {\n      return MID_ITEM;\n    }\n    return index === this.totalNodesCount - 1 ? BOT_ITEM : MID_ITEM;\n  }\n  loadMoreLocalNodes() {\n    const initialLoadMoreButtonIndex = this.loadMoreButtonIndex;\n    this.pageSize += this.loadMoreService.getInitialPageSize(this.parentDataItem);\n    this.registerLoadedNodes(this.data);\n    // forces the new items to be registered before the focus is changed\n    this.changeDetectorRef.detectChanges();\n    this.reselectItemAt(initialLoadMoreButtonIndex);\n  }\n  fetchMoreNodes() {\n    if (this.loadingMoreNodes) {\n      return;\n    }\n    this.loadingMoreNodes = true;\n    if (isPresent(this.loadMoreNodesSubscription)) {\n      this.loadMoreNodesSubscription.unsubscribe();\n    }\n    this.loadMoreNodesSubscription = this.loadMoreService.loadMoreNodes({\n      dataItem: this.parentDataItem,\n      skip: this.data.length,\n      take: this.loadMoreService.getInitialPageSize(this.parentDataItem)\n    }).pipe(finalize(() => this.loadingMoreNodes = false)).subscribe(items => {\n      if (!(Array.isArray(items) && items.length > 0)) {\n        return;\n      }\n      const initialLoadMoreButtonIndex = this.loadMoreButtonIndex;\n      this.pageSize += items.length;\n      this.data = this.data.concat(items);\n      if (this.navigationService.isActive(initialLoadMoreButtonIndex)) {\n        // forces the new items to be registered before the focus is changed\n        this.changeDetectorRef.detectChanges();\n        this.reselectItemAt(initialLoadMoreButtonIndex);\n      }\n    });\n  }\n  setNodeChildren(children) {\n    this.treeViewLookupService.registerChildren(this.parentIndex, children);\n  }\n  mapToTreeItem(data) {\n    if (!this.parentIndex) {\n      return [];\n    }\n    return data.map((dataItem, idx) => ({\n      dataItem,\n      index: this.nodeIndex(idx)\n    }));\n  }\n  emitChildrenLoaded(children) {\n    if (!this.parentIndex) {\n      return;\n    }\n    // ignores the registered load-more button\n    const contentChildren = children.filter(item => item.dataItem);\n    this.nodeChildrenService.childrenLoaded({\n      dataItem: this.parentDataItem,\n      index: this.parentIndex\n    }, contentChildren);\n  }\n  subscribeToNodesChange() {\n    if (this.nodesSubscription) {\n      this.nodesSubscription.unsubscribe();\n    }\n    this.nodesSubscription = this.nodes(this.parentDataItem, this.parentIndex).subscribe(data => {\n      this.data = data;\n      this.initialNodesLoaded = true;\n    });\n  }\n  reselectItemAt(index) {\n    if (!isPresent(index)) {\n      return;\n    }\n    // make sure the old index is cleared first\n    this.navigationService.deactivate();\n    this.navigationService.activateIndex(index);\n  }\n  registerLoadedNodes(nodes = []) {\n    const mappedChildren = this.mapToTreeItem(nodes);\n    if (this.loadOnDemand) {\n      this.setNodeChildren(mappedChildren);\n    }\n    this.emitChildrenLoaded(mappedChildren);\n  }\n  static ɵfac = function TreeViewGroupComponent_Factory(t) {\n    return new (t || TreeViewGroupComponent)(i0.ɵɵdirectiveInject(ExpandStateService), i0.ɵɵdirectiveInject(LoadingNotificationService), i0.ɵɵdirectiveInject(IndexBuilderService), i0.ɵɵdirectiveInject(TreeViewLookupService), i0.ɵɵdirectiveInject(NavigationService), i0.ɵɵdirectiveInject(NodeChildrenService), i0.ɵɵdirectiveInject(DataChangeNotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.LocalizationService), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeViewGroupComponent,\n    selectors: [[\"\", \"kendoTreeViewGroup\", \"\"]],\n    hostVars: 3,\n    hostBindings: function TreeViewGroupComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", ctx.role);\n        i0.ɵɵclassProp(\"k-treeview-group\", ctx.kGroupClass);\n      }\n    },\n    inputs: {\n      checkboxes: \"checkboxes\",\n      expandIcons: \"expandIcons\",\n      disabled: \"disabled\",\n      selectable: \"selectable\",\n      touchActions: \"touchActions\",\n      disableParentNodesOnly: \"disableParentNodesOnly\",\n      loadOnDemand: \"loadOnDemand\",\n      trackBy: \"trackBy\",\n      nodes: \"nodes\",\n      textField: \"textField\",\n      parentDataItem: \"parentDataItem\",\n      parentIndex: \"parentIndex\",\n      nodeTemplateRef: \"nodeTemplateRef\",\n      loadMoreButtonTemplateRef: \"loadMoreButtonTemplateRef\",\n      loadMoreService: \"loadMoreService\",\n      size: \"size\",\n      expandDisabledNodes: \"expandDisabledNodes\",\n      isChecked: \"isChecked\",\n      isDisabled: \"isDisabled\",\n      hasCheckbox: \"hasCheckbox\",\n      isExpanded: \"isExpanded\",\n      isVisible: \"isVisible\",\n      isSelected: \"isSelected\",\n      children: \"children\",\n      hasChildren: \"hasChildren\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 2,\n    vars: 3,\n    consts: [[\"checkbox\", \"\"], [\"class\", \"k-treeview-item\", \"kendoTreeViewItem\", \"\", 3, \"k-hidden\", \"dataItem\", \"index\", \"parentDataItem\", \"parentIndex\", \"loadOnDemand\", \"checkable\", \"isChecked\", \"isDisabled\", \"isVisible\", \"expandable\", \"isExpanded\", \"selectable\", \"isSelected\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"k-treeview-item\", \"kendoTreeViewItem\", \"\", \"role\", \"button\", 3, \"k-treeview-load-more-checkboxes-container\", \"selectable\", \"checkable\", \"expandable\", \"index\", \"parentDataItem\", \"parentIndex\", 4, \"ngIf\"], [\"kendoTreeViewItem\", \"\", 1, \"k-treeview-item\", 3, \"dataItem\", \"index\", \"parentDataItem\", \"parentIndex\", \"loadOnDemand\", \"checkable\", \"isChecked\", \"isDisabled\", \"isVisible\", \"expandable\", \"isExpanded\", \"selectable\", \"isSelected\"], [3, \"ngClass\"], [\"class\", \"k-treeview-toggle\", 3, \"k-disabled\", \"kendoTreeViewLoading\", \"click\", 4, \"ngIf\"], [3, \"disabled\", \"size\", \"checkedState\", \"tabindex\", \"inputAttributes\", \"checkedStateChange\", 4, \"ngIf\"], [\"kendoTreeViewItemContent\", \"\", 1, \"k-treeview-leaf\", 3, \"id\", \"dataItem\", \"index\", \"initialSelection\", \"isSelected\"], [1, \"k-treeview-leaf-text\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [\"kendoTreeViewGroup\", \"\", \"role\", \"group\", 3, \"size\", \"nodes\", \"loadOnDemand\", \"checkboxes\", \"expandIcons\", \"selectable\", \"touchActions\", \"children\", \"hasChildren\", \"isChecked\", \"isDisabled\", \"hasCheckbox\", \"disabled\", \"expandDisabledNodes\", \"isExpanded\", \"isSelected\", \"isVisible\", \"nodeTemplateRef\", \"loadMoreButtonTemplateRef\", \"parentIndex\", \"parentDataItem\", \"textField\", \"loadMoreService\", \"trackBy\", \"disableParentNodesOnly\", 4, \"ngIf\"], [1, \"k-treeview-toggle\", 3, \"click\", \"kendoTreeViewLoading\"], [3, \"name\", \"svgIcon\"], [3, \"checkedStateChange\", \"disabled\", \"size\", \"checkedState\", \"tabindex\", \"inputAttributes\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"kendoTreeViewGroup\", \"\", \"role\", \"group\", 3, \"size\", \"nodes\", \"loadOnDemand\", \"checkboxes\", \"expandIcons\", \"selectable\", \"touchActions\", \"children\", \"hasChildren\", \"isChecked\", \"isDisabled\", \"hasCheckbox\", \"disabled\", \"expandDisabledNodes\", \"isExpanded\", \"isSelected\", \"isVisible\", \"nodeTemplateRef\", \"loadMoreButtonTemplateRef\", \"parentIndex\", \"parentDataItem\", \"textField\", \"loadMoreService\", \"trackBy\", \"disableParentNodesOnly\"], [\"kendoTreeViewItem\", \"\", \"role\", \"button\", 1, \"k-treeview-item\", 3, \"selectable\", \"checkable\", \"expandable\", \"index\", \"parentDataItem\", \"parentIndex\"], [1, \"k-treeview-bot\"], [\"class\", \"k-icon k-i-loading\", 4, \"ngIf\"], [\"kendoTreeViewItemContent\", \"\", 1, \"k-treeview-leaf\", \"k-treeview-load-more-button\", 3, \"index\"], [4, \"ngIf\"], [1, \"k-icon\", \"k-i-loading\"]],\n    template: function TreeViewGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TreeViewGroupComponent_li_0_Template, 10, 33, \"li\", 1)(1, TreeViewGroupComponent_li_1_Template, 7, 14, \"li\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.initialNodesLoaded && ctx.moreNodesAvailable);\n      }\n    },\n    dependencies: [TreeViewGroupComponent, NgFor, TreeViewItemDirective, NgClass, NgIf, LoadingIndicatorDirective, IconWrapperComponent, CheckBoxComponent, TreeViewItemContentDirective, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgSwitchDefault],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('toggle', [transition('void => *', [style({\n        height: 0\n      }), animate('0.1s ease-in', style({\n        height: \"*\"\n      }))]), transition('* => void', [style({\n        height: \"*\"\n      }), animate('0.1s ease-in', style({\n        height: 0\n      }))])])]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewGroupComponent, [{\n    type: Component,\n    args: [{\n      animations: [trigger('toggle', [transition('void => *', [style({\n        height: 0\n      }), animate('0.1s ease-in', style({\n        height: \"*\"\n      }))]), transition('* => void', [style({\n        height: \"*\"\n      }), animate('0.1s ease-in', style({\n        height: 0\n      }))])])],\n      // eslint-disable-next-line\n      selector: '[kendoTreeViewGroup]',\n      template: `\n        <li\n            *ngFor=\"let node of data; let index = index; trackBy: trackBy\"\n            class=\"k-treeview-item\"\n            [class.k-hidden]=\"!isVisible(node, nodeIndex(index))\"\n            kendoTreeViewItem\n            [attr.aria-setsize]=\"totalNodesCount\"\n            [dataItem]=\"node\"\n            [index]=\"nodeIndex(index)\"\n            [parentDataItem]=\"parentDataItem\"\n            [parentIndex]=\"parentIndex\"\n            [loadOnDemand]=\"loadOnDemand\"\n            [checkable]=\"checkboxes\"\n            [isChecked]=\"isChecked(node, nodeIndex(index))\"\n            [isDisabled]=\"isItemDisabled(node, index)\"\n            [isVisible]=\"isVisible(node, nodeIndex(index))\"\n            [expandable]=\"expandIcons && hasChildren(node)\"\n            [isExpanded]=\"isExpanded(node, nodeIndex(index))\"\n            [selectable]=\"selectable\"\n            [isSelected]=\"isSelected(node, nodeIndex(index))\"\n            [attr.data-treeindex]=\"nodeIndex(index)\"\n        >\n            <div [ngClass]=\"setItemClasses(data.length, index)\">\n                <span\n                    [class.k-disabled]=\"!isItemExpandable(node, index)\"\n                    class=\"k-treeview-toggle\"\n                    [kendoTreeViewLoading]=\"nodeIndex(index)\"\n                    (click)=\"expandNode(nodeIndex(index), node, !isExpanded(node, nodeIndex(index)))\"\n                    *ngIf=\"expandIcons && hasChildren(node)\"\n                >\n                    <kendo-icon-wrapper\n                        [name]=\"getFontIcon(node, nodeIndex(index))\"\n                        [svgIcon]=\"getSvgIcon(node, nodeIndex(index))\">\n                    </kendo-icon-wrapper>\n                </span>\n                <kendo-checkbox\n                    #checkbox\n                    *ngIf=\"checkboxes && hasCheckbox(node, nodeIndex(index))\"\n                    [disabled]=\"isItemDisabled(node, index)\"\n                    [size]=\"size\"\n                    [checkedState]=\"getCheckBoxState(node, nodeIndex(index))\"\n                    (checkedStateChange)=\"checkNode(nodeIndex(index), checkbox)\"\n                    [tabindex]=\"-1\"\n                    [inputAttributes]=\"getCheckboxAttributes(index)\"\n                ></kendo-checkbox>\n                <span kendoTreeViewItemContent\n                    [id]=\"nodeIndex(index)\"\n                    [attr.data-treeindex]=\"nodeIndex(index)\"\n                    [dataItem]=\"node\"\n                    [index]=\"nodeIndex(index)\"\n                    [initialSelection]=\"isSelected(node, nodeIndex(index))\"\n                    [isSelected]=\"isSelected\"\n                    class=\"k-treeview-leaf\"\n                    [style.touch-action]=\"touchActions ? '' : 'none'\"\n                    [class.k-disabled]=\"isItemDisabled(node, index)\"\n                >\n                    <span class=\"k-treeview-leaf-text\">\n                        <ng-container [ngSwitch]=\"hasTemplate\">\n                            <ng-container *ngSwitchCase=\"true\">\n                                <ng-template\n                                    [ngTemplateOutlet]=\"nodeTemplateRef\"\n                                    [ngTemplateOutletContext]=\"{\n                                        $implicit: node,\n                                        index: nodeIndex(index)\n                                    }\"\n                                >\n                                </ng-template>\n                            </ng-container>\n                            <ng-container *ngSwitchDefault>\n                                {{nodeText(node)}}\n                            </ng-container>\n                        </ng-container>\n                    </span>\n                </span>\n            </div>\n            <ul\n                *ngIf=\"isExpanded(node, nodeIndex(index)) && hasChildren(node)\"\n                kendoTreeViewGroup\n                role=\"group\"\n                [size]=\"size\"\n                [nodes]=\"fetchChildren\"\n                [loadOnDemand]=\"loadOnDemand\"\n                [checkboxes]=\"checkboxes\"\n                [expandIcons]=\"expandIcons\"\n                [selectable]=\"selectable\"\n                [touchActions]=\"touchActions\"\n                [children]=\"children\"\n                [hasChildren]=\"hasChildren\"\n                [isChecked]=\"isChecked\"\n                [isDisabled]=\"isDisabled\"\n                [hasCheckbox]=\"hasCheckbox\"\n                [disabled]=\"isItemDisabled(node, index)\"\n                [expandDisabledNodes]=\"expandDisabledNodes\"\n                [isExpanded]=\"isExpanded\"\n                [isSelected]=\"isSelected\"\n                [isVisible]=\"isVisible\"\n                [nodeTemplateRef]=\"nodeTemplateRef\"\n                [loadMoreButtonTemplateRef]=\"loadMoreButtonTemplateRef\"\n                [parentIndex]=\"nodeIndex(index)\"\n                [parentDataItem]=\"node\"\n                [textField]=\"nextFields\"\n                [loadMoreService]=\"loadMoreService\"\n                [@toggle]=\"true\"\n                [trackBy]=\"trackBy\"\n                [disableParentNodesOnly]=\"disableParentNodesOnly\"\n            >\n            </ul>\n        </li>\n        <li\n            *ngIf=\"initialNodesLoaded && moreNodesAvailable\"\n            class=\"k-treeview-item\"\n            [class.k-treeview-load-more-checkboxes-container]=\"checkboxes\"\n            kendoTreeViewItem\n            role=\"button\"\n            [selectable]=\"false\"\n            [checkable]=\"false\"\n            [expandable]=\"false\"\n            [index]=\"loadMoreButtonIndex\"\n            [parentDataItem]=\"parentDataItem\"\n            [parentIndex]=\"parentIndex\"\n            [attr.data-treeindex]=\"loadMoreButtonIndex\"\n        >\n            <div class=\"k-treeview-bot\">\n                <span\n                    *ngIf=\"loadingMoreNodes\"\n                    class=\"k-icon k-i-loading\"\n                >\n                </span>\n                <span\n                    class=\"k-treeview-leaf k-treeview-load-more-button\"\n                    [attr.data-treeindex]=\"loadMoreButtonIndex\"\n                    kendoTreeViewItemContent\n                    [index]=\"loadMoreButtonIndex\"\n                >\n                    <span class=\"k-treeview-leaf-text\">\n                        <ng-template\n                            *ngIf=\"loadMoreButtonTemplateRef\"\n                            [ngTemplateOutlet]=\"loadMoreButtonTemplateRef\"\n                            [ngTemplateOutletContext]=\"{\n                                index: loadMoreButtonIndex\n                            }\"\n                        >\n                        </ng-template>\n                        <ng-container *ngIf=\"!loadMoreButtonTemplateRef\">\n                            {{ loadMoreTitle }}\n                        </ng-container>\n                    </span>\n                </span>\n            </div>\n        </li>\n    `,\n      standalone: true,\n      imports: [NgFor, TreeViewItemDirective, NgClass, NgIf, LoadingIndicatorDirective, IconWrapperComponent, CheckBoxComponent, TreeViewItemContentDirective, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgSwitchDefault]\n    }]\n  }], function () {\n    return [{\n      type: ExpandStateService\n    }, {\n      type: LoadingNotificationService\n    }, {\n      type: IndexBuilderService\n    }, {\n      type: TreeViewLookupService\n    }, {\n      type: NavigationService\n    }, {\n      type: NodeChildrenService\n    }, {\n      type: DataChangeNotificationService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.LocalizationService\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    kGroupClass: [{\n      type: HostBinding,\n      args: [\"class.k-treeview-group\"]\n    }],\n    role: [{\n      type: HostBinding,\n      args: [\"attr.role\"]\n    }],\n    checkboxes: [{\n      type: Input\n    }],\n    expandIcons: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    touchActions: [{\n      type: Input\n    }],\n    disableParentNodesOnly: [{\n      type: Input\n    }],\n    loadOnDemand: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    nodes: [{\n      type: Input\n    }],\n    textField: [{\n      type: Input\n    }],\n    parentDataItem: [{\n      type: Input\n    }],\n    parentIndex: [{\n      type: Input\n    }],\n    nodeTemplateRef: [{\n      type: Input\n    }],\n    loadMoreButtonTemplateRef: [{\n      type: Input\n    }],\n    loadMoreService: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    expandDisabledNodes: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    hasCheckbox: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isVisible: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    children: [{\n      type: Input\n    }],\n    hasChildren: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @hidden\n */\nclass TreeViewMessages extends ComponentMessages {\n  /**\n   * The text of the `Load More` button title.\n   */\n  loadMore;\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵTreeViewMessages_BaseFactory;\n    return function TreeViewMessages_Factory(t) {\n      return (ɵTreeViewMessages_BaseFactory || (ɵTreeViewMessages_BaseFactory = i0.ɵɵgetInheritedFactory(TreeViewMessages)))(t || TreeViewMessages);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TreeViewMessages,\n    selectors: [[\"kendo-treeview-messages-base\"]],\n    inputs: {\n      loadMore: \"loadMore\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewMessages, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'kendo-treeview-messages-base'\n    }]\n  }], null, {\n    loadMore: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @hidden\n */\nclass LocalizedMessagesDirective extends TreeViewMessages {\n  service;\n  constructor(service) {\n    super();\n    this.service = service;\n  }\n  static ɵfac = function LocalizedMessagesDirective_Factory(t) {\n    return new (t || LocalizedMessagesDirective)(i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LocalizedMessagesDirective,\n    selectors: [[\"\", \"kendoTreeViewLocalizedMessages\", \"\"]],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TreeViewMessages,\n      useExisting: forwardRef(() => LocalizedMessagesDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalizedMessagesDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        provide: TreeViewMessages,\n        useExisting: forwardRef(() => LocalizedMessagesDirective)\n      }],\n      selector: '[kendoTreeViewLocalizedMessages]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i1.LocalizationService\n    }];\n  }, null);\n})();\nlet nextId = 0;\nconst LOAD_MORE_DOC_LINK$1 = 'https://www.telerik.com/kendo-angular-ui/components/treeview/load-more-button/';\nconst providers = [ExpandStateService, IndexBuilderService, TreeViewLookupService, LoadingNotificationService, NodeChildrenService, NavigationService, SelectionService, DataChangeNotificationService, LocalizationService, {\n  provide: L10N_PREFIX,\n  useValue: 'kendo.treeview'\n}, {\n  provide: DataBoundComponent,\n  useExisting: forwardRef(() => TreeViewComponent)\n}, {\n  provide: ExpandableComponent,\n  useExisting: forwardRef(() => TreeViewComponent)\n}];\n/**\n * Represents the [Kendo UI TreeView component for Angular]({% slug overview_treeview %}).\n *\n */\nclass TreeViewComponent {\n  element;\n  changeDetectorRef;\n  expandService;\n  navigationService;\n  nodeChildrenService;\n  selectionService;\n  treeViewLookupService;\n  ngZone;\n  renderer;\n  dataChangeNotification;\n  localization;\n  /**\n   * @hidden\n   */\n  searchIcon = searchIcon;\n  classNames = true;\n  /** @hidden */\n  get direction() {\n    return this.localization.rtl ? 'rtl' : 'ltr';\n  }\n  /**\n   * @hidden\n   */\n  assetsContainer;\n  /**\n   * @hidden\n   */\n  searchbox;\n  /**\n   * The hint which is displayed when the component is empty.\n   */\n  filterInputPlaceholder = \"\";\n  /**\n   * Determines whether to allow expanding disabled nodes.\n   * @default false\n   */\n  expandDisabledNodes;\n  /**\n   * Determines whether the content animation is enabled.\n   */\n  set animate(value) {\n    this._animate = value;\n  }\n  get animate() {\n    return !this._animate;\n  }\n  /** @hidden */\n  fetchNodes = () => this.data;\n  /**\n   * Fires when the children of the expanded node are loaded.\n   */\n  childrenLoaded = new EventEmitter();\n  /**\n   * Fires when the user blurs the component.\n   */\n  onBlur = new EventEmitter();\n  /**\n   * Fires when the user focuses the component.\n   */\n  onFocus = new EventEmitter();\n  /**\n   * Fires when the user expands a TreeView node.\n   */\n  expand = new EventEmitter();\n  /**\n   * Fires when the user collapses a TreeView node.\n   */\n  collapse = new EventEmitter();\n  /**\n   * Fires just before the dragging of the node starts ([see example]({% slug draganddrop_treeview %}#toc-setup)). This event is preventable.\n   * If you prevent the event default, no drag hint will be created and the subsequent drag-related events will not be fired.\n   */\n  nodeDragStart = new EventEmitter();\n  /**\n   * Fires when an item is being dragged ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n   */\n  nodeDrag = new EventEmitter();\n  /**\n   * Emits when the built-in filtering mechanism in the data-binding directives updates the node's visibility.\n   * Used for the built-in auto-expand functionalities of the component and available for custom implementations.\n   */\n  filterStateChange = new EventEmitter();\n  /**\n   * Fires on the target TreeView when a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n   * This event is preventable. If you prevent the event default (`event.preventDefualt()`) or invalidate its state (`event.setValid(false)`),\n   * the `addItem` and `removeItem` events will not be triggered.\n   *\n   * Both operations cancel the default drop operation, but the indication to the user is different. `event.setValid(false)` indicates that the operation was\n   * unsuccessful by animating the drag clue to its original position. `event.preventDefault()` simply removes the clue, as if it has been dropped successfully.\n   * As a general rule, use `preventDefault` to manually handle the add and remove operations, and `setValid(false)` to indicate the operation was unsuccessful.\n   */\n  nodeDrop = new EventEmitter();\n  /**\n   * Fires on the source TreeView after the dragged item has been dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n   */\n  nodeDragEnd = new EventEmitter();\n  /**\n   * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n   * Called on the TreeView where the item is dropped.\n   */\n  addItem = new EventEmitter();\n  /**\n   * Fires after a dragged item is dropped ([see example]({% slug draganddrop_treeview %}#toc-setup)).\n   * Called on the TreeView from where the item is dragged.\n   */\n  removeItem = new EventEmitter();\n  /**\n   * Fires when the user selects a TreeView node checkbox\n   * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).\n   */\n  checkedChange = new EventEmitter();\n  /**\n   * Fires when the user selects a TreeView node\n   * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).\n   */\n  selectionChange = new EventEmitter();\n  /**\n   * Fires when the value of the built-in filter input element changes.\n   */\n  filterChange = new EventEmitter();\n  /**\n   * Fires when the user clicks a TreeView node.\n   */\n  nodeClick = new EventEmitter();\n  /**\n   * Fires when the user double clicks a TreeView node.\n   */\n  nodeDblClick = new EventEmitter();\n  /**\n   * @hidden\n   *\n   * Queries the template for a node template declaration.\n   * Ignored if a `[nodeTemplate]` value is explicitly provided.\n   */\n  nodeTemplateQuery;\n  /**\n   * @hidden\n   *\n   * Defines the template for each node.\n   * Takes precedence over nested templates in the TreeView tag.\n   */\n  set nodeTemplateRef(template) {\n    this._nodeTemplateRef = template;\n  }\n  get nodeTemplateRef() {\n    return this._nodeTemplateRef || this.nodeTemplateQuery;\n  }\n  /**\n   * @hidden\n   *\n   * Queries the template for a load-more button template declaration.\n   * Ignored if a `[loadMoreButtonTemplate]` value is explicitly provided.\n   */\n  loadMoreButtonTemplateQuery;\n  /**\n   * @hidden\n   *\n   * Defines the template for each load-more button.\n   * Takes precedence over nested templates in the TreeView tag.\n   */\n  set loadMoreButtonTemplateRef(template) {\n    this._loadMoreButtonTemplateRef = template;\n  }\n  get loadMoreButtonTemplateRef() {\n    return this._loadMoreButtonTemplateRef || this.loadMoreButtonTemplateQuery;\n  }\n  /**\n   * A function that defines how to track node changes.\n   * By default, the TreeView tracks the nodes by data item object reference.\n   *\n   * @example\n   * ```ts\n   *  @Component({\n   *      selector: 'my-app',\n   *      template: `\n   *          <kendo-treeview\n   *              [nodes]=\"data\"\n   *              textField=\"text\"\n   *              [trackBy]=\"trackBy\"\n   *          >\n   *          </kendo-treeview>\n   *      `\n   *  })\n   *  export class AppComponent {\n   *      public data: any[] = [\n   *          { text: \"Furniture\" },\n   *          { text: \"Decor\" }\n   *      ];\n   *\n   *      public trackBy(index: number, item: any): any {\n   *          return item.text;\n   *      }\n   *  }\n   * ```\n   */\n  trackBy = trackBy;\n  /**\n   * The nodes which will be displayed by the TreeView\n   * ([see example]({% slug databinding_treeview %})).\n   */\n  set nodes(value) {\n    this.data.next(value || []);\n    this.dataChangeNotification.notify();\n  }\n  get nodes() {\n    return this.data.value;\n  }\n  /**\n   * The fields of the data item that provide the text content of the nodes\n   * ([see example]({% slug databinding_treeview %})). If the `textField` input is set\n   * to an array, each hierarchical level uses the field that corresponds to the same\n   * index in the array, or the last item in the array.\n   */\n  textField;\n  /**\n   * A function which determines if a specific node has child nodes\n   * ([see example]({% slug databinding_treeview %})).\n   */\n  get hasChildren() {\n    return this._hasChildren || hasChildren;\n  }\n  set hasChildren(callback) {\n    this._hasChildren = callback;\n    this.expandIcons = Boolean(this._isExpanded && this._hasChildren);\n  }\n  /**\n   * A function which determines if a specific node is checked\n   * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).\n   */\n  get isChecked() {\n    return this._isChecked || isChecked;\n  }\n  set isChecked(callback) {\n    this._isChecked = callback;\n    this.checkboxes = Boolean(this._isChecked);\n  }\n  /**\n   * A function which determines if a specific node is disabled.\n   */\n  isDisabled = isDisabled;\n  /**\n   * A function which determines if a specific node has a checkbox.\n   *\n   * > If there is no checkbox for a node, then this node is not checkable and is excluded from any built-in check functionality.\n   */\n  hasCheckbox = hasCheckbox;\n  /**\n   * A function which determines if a specific node is expanded.\n   */\n  get isExpanded() {\n    return this._isExpanded || isExpanded;\n  }\n  set isExpanded(callback) {\n    this._isExpanded = callback;\n    this.expandIcons = Boolean(this._isExpanded && this._hasChildren);\n  }\n  /**\n   * A function which determines if a specific node is selected\n   * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).\n   */\n  get isSelected() {\n    return this._isSelected || isSelected;\n  }\n  set isSelected(callback) {\n    this._isSelected = callback;\n    this.selectable = Boolean(this._isSelected);\n  }\n  /**\n   * A callback which determines whether a TreeView node should be rendered as hidden. The utility .k-hidden class is used to hide the nodes.\n   * Useful for custom filtering implementations.\n   */\n  isVisible = isVisible;\n  /**\n   * Determines whether the TreeView keyboard navigable is enabled.\n   */\n  navigable = true;\n  /**\n   * A function which provides the child nodes for a given parent node\n   * ([see example]({% slug databinding_treeview %})).\n   */\n  children = () => of([]);\n  /**\n   * Indicates whether the child nodes will be fetched on node expand or will be initially prefetched.\n   * @default true\n   */\n  loadOnDemand = true;\n  /**\n   * Renders the built-in input element for filtering the TreeView.\n   * If set to `true`, the component emits the `filterChange` event, which can be used to [filter the TreeView manually]({% slug filtering_treeview %}#toc-manual-filtering).\n   * A built-in filtering implementation is available to use with the [`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %}) and [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %}) directives.\n   */\n  filterable = false;\n  /**\n   * Sets an initial value of the built-in input element used for filtering.\n   */\n  filter = '';\n  /**\n   * Sets the size of the component.\n   *\n   * The possible values are:\n   * * `small`\n   * * `medium` (default)\n   * * `large`\n   * * `none`\n   */\n  set size(size) {\n    const newSize = size ? size : 'medium';\n    if (this.size !== 'none') {\n      this.renderer.removeClass(this.element.nativeElement, getSizeClass('treeview', this.size));\n    }\n    this.renderer.addClass(this.element.nativeElement, getSizeClass('treeview', newSize));\n    this._size = size;\n  }\n  get size() {\n    return this._size;\n  }\n  get isActive() {\n    return this.navigationService.isTreeViewActive;\n  }\n  /**\n   * @hidden\n   */\n  get treeviewId() {\n    return `treeview_${this._nextId}`;\n  }\n  /**\n   * Indicates whether only parent nodes should be disabled or their child nodes as well\n   * @default false\n   */\n  disableParentNodesOnly = false;\n  /**\n   * @hidden\n   */\n  loadMoreService;\n  /**\n   * @hidden\n   */\n  editService;\n  checkboxes = false;\n  expandIcons = false;\n  selectable = false;\n  touchActions = true;\n  data = new BehaviorSubject([]);\n  _animate = true;\n  _isChecked;\n  _isExpanded;\n  _isSelected;\n  _hasChildren;\n  _nodeTemplateRef;\n  _loadMoreButtonTemplateRef;\n  _size = 'medium';\n  subscriptions = new Subscription();\n  domSubscriptions = [];\n  _nextId = nextId;\n  constructor(element, changeDetectorRef, expandService, navigationService, nodeChildrenService, selectionService, treeViewLookupService, ngZone, renderer, dataChangeNotification, localization) {\n    this.element = element;\n    this.changeDetectorRef = changeDetectorRef;\n    this.expandService = expandService;\n    this.navigationService = navigationService;\n    this.nodeChildrenService = nodeChildrenService;\n    this.selectionService = selectionService;\n    this.treeViewLookupService = treeViewLookupService;\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.dataChangeNotification = dataChangeNotification;\n    this.localization = localization;\n    validatePackage(packageMetadata);\n    nextId++;\n  }\n  ngOnChanges(changes) {\n    this.navigationService.navigable = Boolean(this.navigable);\n    // TODO: should react to changes.loadOnDemand as well - should preload the data or clear the already cached items\n    if (anyChanged(['nodes', 'children', 'hasChildren', 'loadOnDemand'], changes, false) && !this.loadOnDemand) {\n      this.preloadChildNodes();\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n    this.domSubscriptions.forEach(subscription => subscription());\n  }\n  ngOnInit() {\n    this.subscriptions.add(this.nodeChildrenService.changes.subscribe(x => this.childrenLoaded.emit(x)));\n    this.subscriptions.add(this.expandService.changes.subscribe(({\n      index,\n      dataItem,\n      expand\n    }) => expand ? this.expand.emit({\n      index,\n      dataItem\n    }) : this.collapse.emit({\n      index,\n      dataItem\n    })));\n    this.subscriptions.add(this.navigationService.checks.subscribe(x => this.checkedChange.emit(this.treeViewLookupService.itemLookup(x))));\n    this.subscriptions.add(this.selectionService.changes.subscribe(x => {\n      if (hasObservers(this.selectionChange)) {\n        this.ngZone.run(() => {\n          this.selectionChange.emit(x);\n        });\n      }\n    }));\n    if (this.element) {\n      this.ngZone.runOutsideAngular(() => {\n        this.attachDomHandlers();\n      });\n    }\n    if (this.size) {\n      this.renderer.addClass(this.element.nativeElement, getSizeClass('treeview', this.size));\n    }\n  }\n  ngAfterViewInit() {\n    if (this.searchbox) {\n      this.renderer.setAttribute(this.searchbox.input.nativeElement, 'role', 'searchbox');\n      this.renderer.setAttribute(this.searchbox.input.nativeElement, 'aria-controls', this.treeviewId);\n      this.renderer.setAttribute(this.searchbox.input.nativeElement, 'aria-label', 'searchbar');\n    }\n  }\n  /**\n   * Blurs the focused TreeView item.\n   */\n  blur() {\n    if (!isDocumentAvailable()) {\n      return;\n    }\n    const target = focusableNode(this.element);\n    if (document.activeElement === target) {\n      target.blur();\n    }\n  }\n  /**\n   * Focuses the first focusable item in the TreeView component if no hierarchical index is provided.\n   *\n   * @example\n   * ```ts\n   * import { Component } from '@angular/core';\n   *\n   *  @Component({\n   *      selector: 'my-app',\n   *      template: `\n   *      <button (click)=\"treeview.focus('1')\">Focuses the second node</button>\n   *      <kendo-treeview\n   *          #treeview\n   *          [nodes]=\"data\"\n   *          textField=\"text\"\n   *      >\n   *      </kendo-treeview>\n   *  `\n   *  })\n   *  export class AppComponent {\n   *      public data: any[] = [\n   *          { text: \"Furniture\" },\n   *          { text: \"Decor\" }\n   *      ];\n   *  }\n   * ```\n   */\n  focus(index) {\n    const focusIndex = index || nodeIndex(this.navigationService.focusableItem);\n    this.navigationService.activateIndex(focusIndex);\n    const target = focusableNode(this.element);\n    if (target) {\n      target.focus();\n    }\n  }\n  /**\n   * Based on the specified index, returns the TreeItemLookup node.\n   *\n   * @param index - The index of the node.\n   * @returns {TreeItemLookup} - The item that was searched (looked up).\n   */\n  itemLookup(index) {\n    return this.treeViewLookupService.itemLookup(index);\n  }\n  /**\n   * Triggers the [`children`]({% slug api_treeview_treeviewcomponent %}#toc-children) function for every expanded node,\n   * causing all rendered child nodes to be fetched again.\n   */\n  rebindChildren() {\n    this.dataChangeNotification.notify();\n  }\n  /**\n   * Triggers the `expand` event for the provided node and displays it's loading indicator.\n   */\n  expandNode(item, index) {\n    this.expandService.expand(index, item);\n  }\n  /**\n   * Triggers the `collapse` event for the provided node.\n   */\n  collapseNode(item, index) {\n    this.expandService.collapse(index, item);\n  }\n  /**\n   * Gets the current page size of the checked data item children collection\n   * ([see example]({% slug loadmorebutton_treeview %}#toc-managing-page-sizes)).\n   *\n   * > Since the root nodes collection is not associated with any parent data item, pass `null` as `dataItem` param to get its page size.\n   *\n   * @param dataItem {any} - The parent data item of the targeted collection.\n   * @returns {number} - The page size of the checked data item children collection.\n   */\n  getNodePageSize(dataItem) {\n    this.verifyLoadMoreService();\n    return this.loadMoreService.getGroupSize(dataItem);\n  }\n  /**\n   * Sets the page size of the targeted data item children collection\n   * ([see example]({% slug loadmorebutton_treeview %}#toc-managing-page-sizes)).\n   *\n   * > Since the root nodes collection is not associated with any parent data item, pass `null` as `dataItem` param to target its page size.\n   *\n   * @param dataItem {any} - The parent data item of the targeted collection.\n   * @param pageSize {number} - The new page size.\n   */\n  setNodePageSize(dataItem, pageSize) {\n    this.verifyLoadMoreService();\n    this.loadMoreService.setGroupSize(dataItem, pageSize);\n  }\n  /**\n   * @hidden\n   *\n   * Clears the current TreeViewLookupService node map and re-registers all nodes anew.\n   * Child nodes are acquired through the provided `children` callback.\n   */\n  preloadChildNodes() {\n    this.treeViewLookupService.reset();\n    this.registerLookupItems(this.nodes);\n  }\n  attachDomHandlers() {\n    const element = this.element.nativeElement;\n    this.clickHandler = this.clickHandler.bind(this);\n    this.domSubscriptions.push(this.renderer.listen(element, 'contextmenu', this.clickHandler), this.renderer.listen(element, 'click', this.clickHandler), this.renderer.listen(element, 'dblclick', this.clickHandler), this.renderer.listen(element, 'focusin', this.focusHandler.bind(this)), this.renderer.listen(element, 'focusout', this.blurHandler.bind(this)), this.renderer.listen(element, 'keydown', this.keydownHandler.bind(this)));\n  }\n  focusHandler(e) {\n    let focusItem;\n    if (match(e.target, '.k-treeview-item')) {\n      focusItem = e.target;\n    } else if (!isFocusable(e.target)) {\n      // with compliments to IE\n      focusItem = closestNode(e.target);\n    }\n    if (focusItem) {\n      const nodeIndex = nodeId(e.target);\n      if (this.navigationService.isDisabled(nodeIndex)) {\n        return;\n      }\n      this.navigationService.activateIndex(nodeIndex);\n      if (!this.isActive && hasObservers(this.onFocus)) {\n        this.ngZone.run(() => {\n          this.onFocus.emit();\n        });\n      }\n      this.navigationService.isTreeViewActive = true;\n    }\n  }\n  blurHandler(e) {\n    if (this.isActive && match(e.target, '.k-treeview-item') && (!e.relatedTarget || !match(e.relatedTarget, '.k-treeview-item') || !hasParent(e.relatedTarget, this.element.nativeElement))) {\n      this.navigationService.deactivate();\n      this.navigationService.isTreeViewActive = false;\n      if (hasObservers(this.onBlur)) {\n        this.ngZone.run(() => {\n          this.onBlur.emit();\n        });\n      }\n    }\n  }\n  clickHandler(e) {\n    const target = e.target;\n    if (e.type === 'contextmenu' && !hasObservers(this.nodeClick) || e.type === 'click' && !hasObservers(this.nodeClick) && !hasObservers(this.selectionChange) && !isLoadMoreButton(target) || e.type === 'dblclick' && !hasObservers(this.nodeDblClick) || isFocusable(target) || !isContent(target) && !isLoadMoreButton(target) || !hasParent(target, this.element.nativeElement)) {\n      return;\n    }\n    const index = nodeId(closestNode(target));\n    // the disabled check is probably not needed due to the k-disabled styles\n    if (!index || this.navigationService.isDisabled(index)) {\n      return;\n    }\n    this.ngZone.run(() => {\n      // record this value before emitting selectionChange (`this.navigationService.selectIndex`), as the treeview state may be changed on its emission\n      const lookup = this.treeViewLookupService.itemLookup(index);\n      if (e.type === 'click') {\n        const loadMoreButton = this.navigationService.model.findNode(index).loadMoreButton;\n        if (loadMoreButton) {\n          this.navigationService.notifyLoadMore(index);\n          return;\n        } else {\n          this.navigationService.selectIndex(index);\n        }\n      }\n      const emitter = e.type === 'dblclick' ? this.nodeDblClick : this.nodeClick;\n      emitter.emit({\n        item: lookup.item,\n        originalEvent: e,\n        type: e.type\n      });\n    });\n  }\n  keydownHandler(e) {\n    if (this.isActive && this.navigable) {\n      this.ngZone.run(() => {\n        this.navigationService.move(e);\n      });\n    }\n  }\n  verifyLoadMoreService() {\n    if (isDevMode() && !isPresent(this.loadMoreService)) {\n      throw new Error(`To use the TreeView paging functionality, you need to assign the \\`kendoTreeViewLoadMore\\` directive. See ${LOAD_MORE_DOC_LINK$1}.`);\n    }\n  }\n  registerLookupItems(data, parentItem = null) {\n    if (!isPresent(data) || data.length === 0) {\n      return;\n    }\n    const parentIndex = nodeIndex(parentItem);\n    const treeItems = data.map((node, index) => buildTreeItem(node, index, parentIndex));\n    if (isPresent(parentItem)) {\n      this.treeViewLookupService.registerChildren(parentIndex, treeItems);\n    }\n    treeItems.forEach(item => {\n      this.treeViewLookupService.registerItem(item, parentItem);\n      if (this.hasChildren(item.dataItem)) {\n        this.children(item.dataItem).subscribe(children => this.registerLookupItems(children, item));\n      }\n    });\n  }\n  static ɵfac = function TreeViewComponent_Factory(t) {\n    return new (t || TreeViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(ExpandStateService), i0.ɵɵdirectiveInject(NavigationService), i0.ɵɵdirectiveInject(NodeChildrenService), i0.ɵɵdirectiveInject(SelectionService), i0.ɵɵdirectiveInject(TreeViewLookupService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(DataChangeNotificationService), i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TreeViewComponent,\n    selectors: [[\"kendo-treeview\"]],\n    contentQueries: function TreeViewComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NodeTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, LoadMoreButtonTemplateDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeTemplateQuery = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadMoreButtonTemplateQuery = _t.first);\n      }\n    },\n    viewQuery: function TreeViewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c3, 7, ViewContainerRef);\n        i0.ɵɵviewQuery(_c4, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.assetsContainer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchbox = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function TreeViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@.disabled\", ctx.animate);\n        i0.ɵɵattribute(\"dir\", ctx.direction);\n        i0.ɵɵclassProp(\"k-treeview\", ctx.classNames);\n      }\n    },\n    inputs: {\n      filterInputPlaceholder: \"filterInputPlaceholder\",\n      expandDisabledNodes: \"expandDisabledNodes\",\n      animate: \"animate\",\n      nodeTemplateRef: [i0.ɵɵInputFlags.None, \"nodeTemplate\", \"nodeTemplateRef\"],\n      loadMoreButtonTemplateRef: [i0.ɵɵInputFlags.None, \"loadMoreButtonTemplate\", \"loadMoreButtonTemplateRef\"],\n      trackBy: \"trackBy\",\n      nodes: \"nodes\",\n      textField: \"textField\",\n      hasChildren: \"hasChildren\",\n      isChecked: \"isChecked\",\n      isDisabled: \"isDisabled\",\n      hasCheckbox: \"hasCheckbox\",\n      isExpanded: \"isExpanded\",\n      isSelected: \"isSelected\",\n      isVisible: \"isVisible\",\n      navigable: \"navigable\",\n      children: \"children\",\n      loadOnDemand: \"loadOnDemand\",\n      filterable: \"filterable\",\n      filter: \"filter\",\n      size: \"size\",\n      disableParentNodesOnly: \"disableParentNodesOnly\"\n    },\n    outputs: {\n      childrenLoaded: \"childrenLoaded\",\n      onBlur: \"blur\",\n      onFocus: \"focus\",\n      expand: \"expand\",\n      collapse: \"collapse\",\n      nodeDragStart: \"nodeDragStart\",\n      nodeDrag: \"nodeDrag\",\n      filterStateChange: \"filterStateChange\",\n      nodeDrop: \"nodeDrop\",\n      nodeDragEnd: \"nodeDragEnd\",\n      addItem: \"addItem\",\n      removeItem: \"removeItem\",\n      checkedChange: \"checkedChange\",\n      selectionChange: \"selectionChange\",\n      filterChange: \"filterChange\",\n      nodeClick: \"nodeClick\",\n      nodeDblClick: \"nodeDblClick\"\n    },\n    exportAs: [\"kendoTreeView\"],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    decls: 5,\n    vars: 24,\n    consts: () => {\n      let i18n_0;\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        /**\n         * @desc The title of the Load More button\n         * @meaning kendo.treeview.loadMore\n         */\n        const MSG__USERS_VISHNU_DESKTOP_PROJECTS_BH_IEP_NODE_MODULES__PROGRESS_KENDO_ANGULAR_TREEVIEW_FESM2022_PROGRESS_KENDO_ANGULAR_TREEVIEW_MJS_0 = goog.getMsg(\"Load more...\");\n        i18n_0 = MSG__USERS_VISHNU_DESKTOP_PROJECTS_BH_IEP_NODE_MODULES__PROGRESS_KENDO_ANGULAR_TREEVIEW_FESM2022_PROGRESS_KENDO_ANGULAR_TREEVIEW_MJS_0;\n      } else {\n        i18n_0 = $localize`:kendo.treeview.loadMore|The title of the Load More button:Load more...`;\n      }\n      return [[\"assetsContainer\", \"\"], [\"searchbox\", \"\"], [\"kendoTreeViewLocalizedMessages\", \"\", \"loadMore\", i18n_0], [\"class\", \"k-treeview-filter\", 4, \"ngIf\"], [\"kendoTreeViewGroup\", \"\", \"role\", \"tree\", 1, \"k-treeview-lines\", 3, \"size\", \"loadOnDemand\", \"checkboxes\", \"expandIcons\", \"selectable\", \"touchActions\", \"children\", \"hasChildren\", \"isChecked\", \"isDisabled\", \"hasCheckbox\", \"disableParentNodesOnly\", \"isExpanded\", \"isSelected\", \"isVisible\", \"nodeTemplateRef\", \"loadMoreButtonTemplateRef\", \"textField\", \"nodes\", \"loadMoreService\", \"trackBy\", \"expandDisabledNodes\"], [1, \"k-treeview-filter\"], [3, \"valueChange\", \"size\", \"value\", \"clearButton\", \"placeholder\"], [\"kendoTextBoxPrefixTemplate\", \"\"], [\"innerCssClass\", \"k-input-icon\", \"name\", \"search\", 3, \"svgIcon\"]];\n    },\n    template: function TreeViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 2);\n        i0.ɵɵtemplate(1, TreeViewComponent_span_1_Template, 4, 4, \"span\", 3);\n        i0.ɵɵelement(2, \"ul\", 4);\n        i0.ɵɵelementContainer(3, null, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.filterable);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"size\", ctx.size)(\"loadOnDemand\", ctx.loadOnDemand)(\"checkboxes\", ctx.checkboxes)(\"expandIcons\", ctx.expandIcons)(\"selectable\", ctx.selectable)(\"touchActions\", ctx.touchActions)(\"children\", ctx.children)(\"hasChildren\", ctx.hasChildren)(\"isChecked\", ctx.isChecked)(\"isDisabled\", ctx.isDisabled)(\"hasCheckbox\", ctx.hasCheckbox)(\"disableParentNodesOnly\", ctx.disableParentNodesOnly)(\"isExpanded\", ctx.isExpanded)(\"isSelected\", ctx.isSelected)(\"isVisible\", ctx.isVisible)(\"nodeTemplateRef\", ctx.nodeTemplateRef == null ? null : ctx.nodeTemplateRef.templateRef)(\"loadMoreButtonTemplateRef\", ctx.loadMoreButtonTemplateRef == null ? null : ctx.loadMoreButtonTemplateRef.templateRef)(\"textField\", ctx.textField)(\"nodes\", ctx.fetchNodes)(\"loadMoreService\", ctx.loadMoreService)(\"trackBy\", ctx.trackBy)(\"expandDisabledNodes\", ctx.expandDisabledNodes);\n        i0.ɵɵattribute(\"id\", ctx.treeviewId);\n      }\n    },\n    dependencies: [LocalizedMessagesDirective, NgIf, TextBoxComponent, TextBoxPrefixTemplateDirective, IconWrapperComponent, TreeViewGroupComponent],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.Default,\n      exportAs: 'kendoTreeView',\n      providers: providers,\n      selector: 'kendo-treeview',\n      template: `\n        <ng-container kendoTreeViewLocalizedMessages\n            i18n-loadMore=\"kendo.treeview.loadMore|The title of the Load More button\"\n            loadMore=\"Load more...\"\n        >\n        </ng-container>\n        <span\n            class=\"k-treeview-filter\"\n            *ngIf=\"filterable\"\n        >\n            <kendo-textbox\n                #searchbox\n                [size]=\"size\"\n                [value]=\"filter\"\n                [clearButton]=\"true\"\n                (valueChange)=\"filterChange.emit($event)\"\n                [placeholder]=\"filterInputPlaceholder\"\n            >\n                <ng-template kendoTextBoxPrefixTemplate>\n                    <kendo-icon-wrapper\n                        innerCssClass=\"k-input-icon\"\n                        name=\"search\"\n                        [svgIcon]=\"searchIcon\"\n                        >\n                    </kendo-icon-wrapper>\n                </ng-template>\n            </kendo-textbox>\n        </span>\n        <ul class=\"k-treeview-lines\"\n            kendoTreeViewGroup\n            [attr.id]=\"treeviewId\"\n            role=\"tree\"\n            [size]=\"size\"\n            [loadOnDemand]=\"loadOnDemand\"\n            [checkboxes]=\"checkboxes\"\n            [expandIcons]=\"expandIcons\"\n            [selectable]=\"selectable\"\n            [touchActions]=\"touchActions\"\n            [children]=\"children\"\n            [hasChildren]=\"hasChildren\"\n            [isChecked]=\"isChecked\"\n            [isDisabled]=\"isDisabled\"\n            [hasCheckbox]=\"hasCheckbox\"\n            [disableParentNodesOnly]=\"disableParentNodesOnly\"\n            [isExpanded]=\"isExpanded\"\n            [isSelected]=\"isSelected\"\n            [isVisible]=\"isVisible\"\n            [nodeTemplateRef]=\"nodeTemplateRef?.templateRef\"\n            [loadMoreButtonTemplateRef]=\"loadMoreButtonTemplateRef?.templateRef\"\n            [textField]=\"textField\"\n            [nodes]=\"fetchNodes\"\n            [loadMoreService]=\"loadMoreService\"\n            [trackBy]=\"trackBy\"\n            [expandDisabledNodes]=\"expandDisabledNodes\"\n        >\n        </ul>\n        <ng-container #assetsContainer></ng-container>\n    `,\n      standalone: true,\n      imports: [LocalizedMessagesDirective, NgIf, TextBoxComponent, TextBoxPrefixTemplateDirective, IconWrapperComponent, TreeViewGroupComponent]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: ExpandStateService\n    }, {\n      type: NavigationService\n    }, {\n      type: NodeChildrenService\n    }, {\n      type: SelectionService\n    }, {\n      type: TreeViewLookupService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: DataChangeNotificationService\n    }, {\n      type: i1.LocalizationService\n    }];\n  }, {\n    classNames: [{\n      type: HostBinding,\n      args: [\"class.k-treeview\"]\n    }],\n    direction: [{\n      type: HostBinding,\n      args: [\"attr.dir\"]\n    }],\n    assetsContainer: [{\n      type: ViewChild,\n      args: ['assetsContainer', {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }],\n    searchbox: [{\n      type: ViewChild,\n      args: ['searchbox']\n    }],\n    filterInputPlaceholder: [{\n      type: Input\n    }],\n    expandDisabledNodes: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: ['@.disabled']\n    }],\n    childrenLoaded: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output,\n      args: ['blur']\n    }],\n    onFocus: [{\n      type: Output,\n      args: ['focus']\n    }],\n    expand: [{\n      type: Output\n    }],\n    collapse: [{\n      type: Output\n    }],\n    nodeDragStart: [{\n      type: Output\n    }],\n    nodeDrag: [{\n      type: Output\n    }],\n    filterStateChange: [{\n      type: Output\n    }],\n    nodeDrop: [{\n      type: Output\n    }],\n    nodeDragEnd: [{\n      type: Output\n    }],\n    addItem: [{\n      type: Output\n    }],\n    removeItem: [{\n      type: Output\n    }],\n    checkedChange: [{\n      type: Output\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    filterChange: [{\n      type: Output\n    }],\n    nodeClick: [{\n      type: Output\n    }],\n    nodeDblClick: [{\n      type: Output\n    }],\n    nodeTemplateQuery: [{\n      type: ContentChild,\n      args: [NodeTemplateDirective, {\n        static: false\n      }]\n    }],\n    nodeTemplateRef: [{\n      type: Input,\n      args: ['nodeTemplate']\n    }],\n    loadMoreButtonTemplateQuery: [{\n      type: ContentChild,\n      args: [LoadMoreButtonTemplateDirective, {\n        static: false\n      }]\n    }],\n    loadMoreButtonTemplateRef: [{\n      type: Input,\n      args: ['loadMoreButtonTemplate']\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    nodes: [{\n      type: Input\n    }],\n    textField: [{\n      type: Input\n    }],\n    hasChildren: [{\n      type: Input\n    }],\n    isChecked: [{\n      type: Input\n    }],\n    isDisabled: [{\n      type: Input\n    }],\n    hasCheckbox: [{\n      type: Input\n    }],\n    isExpanded: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    isVisible: [{\n      type: Input\n    }],\n    navigable: [{\n      type: Input\n    }],\n    children: [{\n      type: Input\n    }],\n    loadOnDemand: [{\n      type: Input\n    }],\n    filterable: [{\n      type: Input\n    }],\n    filter: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    disableParentNodesOnly: [{\n      type: Input\n    }]\n  });\n})();\nconst indexChecked = (keys, index) => keys.filter(k => k === index).length > 0;\nconst matchKey = index => k => {\n  if (index === k) {\n    return true;\n  }\n  if (!k.split) {\n    return false;\n  }\n  return k.split('_').reduce(({\n    key,\n    result\n  }, part) => {\n    key += part;\n    if (index === key || result) {\n      return {\n        result: true\n      };\n    }\n    key += \"_\";\n    return {\n      key,\n      result: false\n    };\n  }, {\n    key: \"\",\n    result: false\n  }).result;\n};\n/**\n * A directive which manages the in-memory checked state of the TreeView node\n * ([see example]({% slug checkboxes_treeview %})).\n */\nclass CheckDirective {\n  treeView;\n  zone;\n  /**\n   * @hidden\n   */\n  set isChecked(value) {\n    this.treeView.isChecked = value;\n  }\n  /**\n   * Defines the item key that will be stored in the `checkedKeys` collection.\n   */\n  checkKey;\n  /**\n   * Defines the collection that will store the checked keys\n   * ([see example]({% slug checkboxes_treeview %})).\n   */\n  checkedKeys;\n  /**\n   * Defines the checkable settings ([see example]({% slug checkboxes_treeview %}#toc-setup)).\n   * If no value is provided, the default [`CheckableSettings`]({% slug api_treeview_checkablesettings %}) are applied.\n   */\n  checkable;\n  /**\n   * Fires when the `checkedKeys` collection was updated.\n   */\n  checkedKeysChange = new EventEmitter();\n  subscriptions = new Subscription();\n  get options() {\n    const defaultOptions = {\n      checkChildren: true,\n      checkParents: true,\n      enabled: true,\n      mode: \"multiple\",\n      uncheckCollapsedChildren: false\n    };\n    if (!isPresent(this.checkable) || typeof this.checkable === 'string') {\n      return defaultOptions;\n    }\n    const checkSettings = isBoolean(this.checkable) ? {\n      enabled: this.checkable\n    } : this.checkable;\n    return Object.assign(defaultOptions, checkSettings);\n  }\n  checkActions = {\n    'multiple': e => this.checkMultiple(e),\n    'single': e => this.checkSingle(e)\n  };\n  /**\n   * Reflectes the internal `checkedKeys` state.\n   */\n  state = new Set();\n  clickSubscription;\n  /**\n   * Holds the last emitted `checkedKeys` collection.\n   */\n  lastChange;\n  constructor(treeView, zone) {\n    this.treeView = treeView;\n    this.zone = zone;\n    this.subscriptions.add(this.treeView.checkedChange.subscribe(e => this.check(e)));\n    const expandedItems = [];\n    this.subscriptions.add(this.treeView.childrenLoaded.pipe(filter(() => this.options.checkChildren && this.treeView.loadOnDemand), tap(item => expandedItems.push(item)), switchMap(() => this.zone.onStable.pipe(take(1)))).subscribe(() => this.addCheckedItemsChildren(expandedItems)));\n    this.treeView.isChecked = this.isItemChecked.bind(this);\n  }\n  ngOnChanges(changes) {\n    if (changes.checkable) {\n      this.treeView.checkboxes = this.options.enabled;\n      this.toggleCheckOnClick();\n    }\n    if (isChanged('checkedKeys', changes, false) && changes.checkedKeys.currentValue !== this.lastChange) {\n      this.state = new Set(changes.checkedKeys.currentValue);\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n    this.unsubscribeClick();\n  }\n  isItemChecked(dataItem, index) {\n    if (!this.checkKey) {\n      return this.isIndexChecked(index);\n    }\n    const hasKey = this.state.has(this.itemKey({\n      dataItem,\n      index\n    }));\n    return hasKey ? 'checked' : 'none';\n  }\n  isIndexChecked(index) {\n    const checkedKeys = Array.from(this.state).filter(matchKey(index));\n    if (indexChecked(checkedKeys, index)) {\n      return 'checked';\n    }\n    const {\n      mode,\n      checkParents\n    } = this.options;\n    if (mode === 'multiple' && checkParents && checkedKeys.length) {\n      return 'indeterminate';\n    }\n    return 'none';\n  }\n  itemKey(item) {\n    if (!isPresent(this.checkKey)) {\n      return item.index;\n    }\n    if (typeof this.checkKey === \"string\" && isPresent(item.dataItem)) {\n      return item.dataItem[this.checkKey];\n    }\n    if (typeof this.checkKey === \"function\") {\n      return this.checkKey(item);\n    }\n  }\n  check(e) {\n    const {\n      enabled,\n      mode\n    } = this.options;\n    const performSelection = this.checkActions[mode] || noop;\n    if (!enabled) {\n      return;\n    }\n    performSelection(e);\n  }\n  checkSingle(node) {\n    const key = this.itemKey(node.item);\n    const hasKey = this.state.has(key);\n    this.state.clear();\n    if (!hasKey) {\n      this.state.add(key);\n    }\n    this.notify();\n  }\n  checkMultiple(node) {\n    this.checkNode(node);\n    if (this.options.checkParents) {\n      this.checkParents(node.parent);\n    }\n    this.notify();\n  }\n  toggleCheckOnClick() {\n    this.unsubscribeClick();\n    if (this.options.checkOnClick) {\n      this.clickSubscription = this.treeView.nodeClick.subscribe(args => {\n        if (args.type === 'click') {\n          const lookup = this.treeView.itemLookup(args.item.index);\n          this.check(lookup);\n        }\n      });\n    }\n  }\n  unsubscribeClick() {\n    if (this.clickSubscription) {\n      this.clickSubscription.unsubscribe();\n      this.clickSubscription = null;\n    }\n  }\n  checkNode(node) {\n    if (!isPresent(node.item.dataItem) || this.treeView.isDisabled(node.item.dataItem, node.item.index) || !this.treeView.hasCheckbox(node.item.dataItem, node.item.index)) {\n      return;\n    }\n    const currentKey = this.itemKey(node.item);\n    if (!isPresent(currentKey)) {\n      return;\n    }\n    const pendingCheck = [currentKey];\n    if (this.options.checkChildren) {\n      const descendants = fetchLoadedDescendants(node, ({\n        item\n      }) => this.treeView.disableParentNodesOnly || this.options.checkDisabledChildren ? this.treeView.isVisible(item.dataItem, item.index) : this.treeView.isVisible(item.dataItem, item.index) && !this.treeView.isDisabled(item.dataItem, item.index) && this.treeView.hasCheckbox(item.dataItem, item.index));\n      pendingCheck.push(...descendants.filter(item => this.options.checkDisabledChildren || !this.treeView.isDisabled(item.item.dataItem, item.item.index) || this.treeView.hasCheckbox(item.item.dataItem, item.item.index)).map(({\n        item\n      }) => this.itemKey(item)));\n    }\n    const shouldCheck = !this.state.has(currentKey);\n    pendingCheck.forEach(key => {\n      if (shouldCheck) {\n        this.state.add(key);\n      } else {\n        this.state.delete(key);\n        if (this.options.uncheckCollapsedChildren && this.options.mode === 'multiple' && this.treeView.loadOnDemand) {\n          if (this.checkKey && this.treeView.hasChildren(node.item.dataItem)) {\n            this.uncheckChildren(node.item.dataItem, node.item.index);\n            return;\n          }\n          const checkedKeys = Array.from(this.state).filter(matchKey(node.item.index));\n          checkedKeys.forEach(key => this.state.delete(key));\n        }\n      }\n    });\n  }\n  uncheckChildren(dataItem, parentNodeIndex) {\n    this.treeView.children(dataItem).subscribe(children => children.forEach((item, index) => {\n      const nodeIndex = `${parentNodeIndex}_${index}`;\n      this.state.delete(this.itemKey({\n        dataItem: item,\n        index: nodeIndex\n      }));\n      if (this.treeView.hasChildren(item)) {\n        this.uncheckChildren(item, nodeIndex);\n      }\n    }));\n  }\n  checkParents(parent) {\n    if (!isPresent(parent)) {\n      return;\n    }\n    let currentParent = parent;\n    while (currentParent) {\n      const parentKey = this.itemKey(currentParent.item);\n      const isDisabled = this.treeView.isDisabled(currentParent.item.dataItem, currentParent.item.index);\n      const allChildrenSelected = currentParent.children.every(item => this.state.has(this.itemKey(item)));\n      const hasCheckbox = this.treeView.hasCheckbox(currentParent.item.dataItem, currentParent.item.index);\n      if (hasCheckbox && (!isDisabled || this.options.checkDisabledChildren) && allChildrenSelected) {\n        this.state.add(parentKey);\n      } else {\n        this.state.delete(parentKey);\n      }\n      currentParent = currentParent.parent;\n    }\n  }\n  allChildrenSelected(children) {\n    return children.every(item => {\n      const childrenSel = this.allChildrenSelected(item.children);\n      return this.state.has(this.itemKey(item.item)) && childrenSel;\n    });\n  }\n  notify() {\n    this.lastChange = Array.from(this.state);\n    this.checkedKeysChange.emit(this.lastChange);\n  }\n  addCheckedItemsChildren(lookups) {\n    if (!isPresent(lookups) || lookups.length === 0) {\n      return;\n    }\n    const initiallyCheckedItemsCount = this.state.size;\n    const disabledItems = new Set();\n    lookups.forEach(lookup => {\n      const itemKey = this.itemKey(lookup.item);\n      if (!this.state.has(itemKey)) {\n        return;\n      }\n      lookup.children.forEach(item => {\n        // ensure both the parent item and each child node is enabled\n        if (!this.treeView.isDisabled(lookup.item.dataItem, lookup.item.index) && !this.treeView.isDisabled(item.dataItem, item.index) && this.treeView.hasCheckbox(lookup.item.dataItem, lookup.item.index) && this.treeView.hasCheckbox(item.dataItem, item.index) || this.treeView.disableParentNodesOnly || this.options.checkDisabledChildren) {\n          this.state.add(this.itemKey(item));\n        }\n        if (this.treeView.disableParentNodesOnly && !this.options.checkDisabledChildren && (this.treeView.isDisabled(item.dataItem, item.index) || !this.treeView.hasCheckbox(item.dataItem, item.index))) {\n          disabledItems.add(this.itemKey(item));\n        }\n      });\n    });\n    disabledItems.forEach(item => this.state.delete(item));\n    const hasNewlyCheckedItems = initiallyCheckedItemsCount !== this.state.size;\n    if (hasNewlyCheckedItems) {\n      this.zone.run(() => this.notify());\n    }\n  }\n  static ɵfac = function CheckDirective_Factory(t) {\n    return new (t || CheckDirective)(i0.ɵɵdirectiveInject(TreeViewComponent), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CheckDirective,\n    selectors: [[\"\", \"kendoTreeViewCheckable\", \"\"]],\n    inputs: {\n      isChecked: \"isChecked\",\n      checkKey: [i0.ɵɵInputFlags.None, \"checkBy\", \"checkKey\"],\n      checkedKeys: \"checkedKeys\",\n      checkable: [i0.ɵɵInputFlags.None, \"kendoTreeViewCheckable\", \"checkable\"]\n    },\n    outputs: {\n      checkedKeysChange: \"checkedKeysChange\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CheckDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewCheckable]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: TreeViewComponent\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    isChecked: [{\n      type: Input\n    }],\n    checkKey: [{\n      type: Input,\n      args: [\"checkBy\"]\n    }],\n    checkedKeys: [{\n      type: Input\n    }],\n    checkable: [{\n      type: Input,\n      args: ['kendoTreeViewCheckable']\n    }],\n    checkedKeysChange: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * A directive which manages the disabled in-memory state of the TreeView node\n * ([see example]({% slug disabledstate_treeview %})).\n */\nclass DisableDirective {\n  treeView;\n  cdr;\n  /**\n   * @hidden\n   */\n  set isDisabled(value) {\n    this.treeView.isDisabled = value;\n  }\n  /**\n   * Defines the item key that will be stored in the `disabledKeys` collection.\n   */\n  disableKey;\n  /**\n   * Defines the collection that will store the disabled keys.\n   */\n  disabledKeys = [];\n  constructor(treeView, cdr) {\n    this.treeView = treeView;\n    this.cdr = cdr;\n    this.treeView.isDisabled = (dataItem, index) => this.disabledKeys.indexOf(this.itemKey({\n      dataItem,\n      index\n    })) > -1;\n  }\n  ngOnChanges(changes = {}) {\n    const {\n      disabledKeys\n    } = changes;\n    if (disabledKeys && !disabledKeys.firstChange) {\n      this.cdr.markForCheck();\n    }\n  }\n  itemKey(e) {\n    if (!this.disableKey) {\n      return e.index;\n    }\n    if (typeof this.disableKey === \"string\") {\n      return e.dataItem[this.disableKey];\n    }\n    if (typeof this.disableKey === \"function\") {\n      return this.disableKey(e);\n    }\n  }\n  static ɵfac = function DisableDirective_Factory(t) {\n    return new (t || DisableDirective)(i0.ɵɵdirectiveInject(TreeViewComponent), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DisableDirective,\n    selectors: [[\"\", \"kendoTreeViewDisable\", \"\"]],\n    inputs: {\n      isDisabled: \"isDisabled\",\n      disableKey: [i0.ɵɵInputFlags.None, \"kendoTreeViewDisable\", \"disableKey\"],\n      disabledKeys: \"disabledKeys\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DisableDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewDisable]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: TreeViewComponent\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    isDisabled: [{\n      type: Input\n    }],\n    disableKey: [{\n      type: Input,\n      args: [\"kendoTreeViewDisable\"]\n    }],\n    disabledKeys: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * A directive which enables the update of the initially provided data array during drag-and-drop.\n *\n * Either use this directive in combination with one of the data binding directives ([`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %})\n * or [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %})) which set their own edit handlers, or provide\n * your own [`editService`]({% slug api_treeview_editservice %}) to this directive. The latter subscribes to and calls the\n * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)\n * handlers when the corresponding events are triggered by the TreeView component.\n */\nclass DragAndDropEditingDirective {\n  treeview;\n  /**\n   * Specifies the handlers called on drag-and-drop [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem)\n   * and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem) events.\n   */\n  set editService(service) {\n    this.treeview.editService = service;\n  }\n  subscriptions = new Subscription();\n  constructor(treeview) {\n    this.treeview = treeview;\n    this.subscriptions.add(this.treeview.addItem.subscribe(this.handleAdd.bind(this)));\n    this.subscriptions.add(this.treeview.removeItem.subscribe(this.handleRemove.bind(this)));\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  handleAdd(args) {\n    if (!isPresent(this.treeview.editService)) {\n      throw new Error('No `editService` provided. Either provide your own implementation or use this directive in combination with one of the data binding directives (`kendoTreeViewHierarchyBinding` or `kendoTreeViewFlatDataBinding`).');\n    }\n    this.treeview.editService.add(args);\n  }\n  handleRemove(args) {\n    if (!isPresent(this.treeview.editService)) {\n      throw new Error('No `editService` provided. Either provide your own implementation or use this directive in combination with one of the data binding directives (`kendoTreeViewHierarchyBinding` or `kendoTreeViewFlatDataBinding`).');\n    }\n    this.treeview.editService.remove(args);\n  }\n  static ɵfac = function DragAndDropEditingDirective_Factory(t) {\n    return new (t || DragAndDropEditingDirective)(i0.ɵɵdirectiveInject(TreeViewComponent));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DragAndDropEditingDirective,\n    selectors: [[\"\", \"kendoTreeViewDragAndDropEditing\", \"\"]],\n    inputs: {\n      editService: \"editService\"\n    },\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragAndDropEditingDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewDragAndDropEditing]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: TreeViewComponent\n    }];\n  }, {\n    editService: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Describes the attempted drop action during dragging.\n * Passed as `action` value to the [`kendoTreeViewDragClueTemplate`]({% slug api_treeview_dragcluetemplatedirective %}) directive.\n * By default, this value defines the rendered icon in the drag clue.\n */\nvar DropAction;\n(function (DropAction) {\n  DropAction[DropAction[\"Add\"] = 0] = \"Add\";\n  DropAction[DropAction[\"InsertTop\"] = 1] = \"InsertTop\";\n  DropAction[DropAction[\"InsertBottom\"] = 2] = \"InsertBottom\";\n  DropAction[DropAction[\"InsertMiddle\"] = 3] = \"InsertMiddle\";\n  DropAction[DropAction[\"Invalid\"] = 4] = \"Invalid\";\n})(DropAction || (DropAction = {}));\n\n/**\n * Describes where the dragged item is dropped relative to the drop target item.\n */\nvar DropPosition;\n(function (DropPosition) {\n  DropPosition[DropPosition[\"Over\"] = 0] = \"Over\";\n  DropPosition[DropPosition[\"Before\"] = 1] = \"Before\";\n  DropPosition[DropPosition[\"After\"] = 2] = \"After\";\n})(DropPosition || (DropPosition = {}));\n\n/**\n * @hidden\n */\nvar ScrollDirection;\n(function (ScrollDirection) {\n  ScrollDirection[ScrollDirection[\"Up\"] = -1] = \"Up\";\n  ScrollDirection[ScrollDirection[\"Down\"] = 1] = \"Down\";\n})(ScrollDirection || (ScrollDirection = {}));\n\n/**\n * @hidden\n */\nclass PreventableEvent {\n  prevented = false;\n  /**\n   * Prevents the default action for a specified event.\n   * In this way, the source component suppresses the built-in behavior that follows the event.\n   */\n  preventDefault() {\n    this.prevented = true;\n  }\n  /**\n   * If the event is prevented by any of its subscribers, returns `true`.\n   *\n   * @returns `true` if the default action was prevented. Otherwise, returns `false`.\n   */\n  isDefaultPrevented() {\n    return this.prevented;\n  }\n}\n\n/**\n * Arguments for the TreeView [`nodeDrop`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrop) event.\n */\nclass TreeItemDropEvent extends PreventableEvent {\n  /**\n   * A reference of the TreeView from which the dragged item originates.\n   */\n  sourceTree;\n  /**\n   * A reference of the TreeView onto which the dragged item is dropped.\n   */\n  destinationTree;\n  /**\n   * The look-up info for the dragged item.\n   */\n  sourceItem;\n  /**\n   * The look-up info for the item onto which the dragged item is dropped.\n   */\n  destinationItem;\n  /**\n   * Describes where the dragged item is dropped relative to the drop target item.\n   */\n  dropPosition;\n  /**\n   * The original pointer event holding details about the current pointer position.\n   */\n  originalEvent;\n  /**\n   * @hidden\n   */\n  isValid = true;\n  /**\n   * @hidden\n   */\n  constructor(initializer, originalEvent) {\n    super();\n    Object.assign(this, initializer);\n    this.originalEvent = originalEvent;\n  }\n  /**\n   * Specifies if the drop action should be marked as valid.\n   * If set to `false`, the [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and\n   * [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem) events will not be fired and the drag clue\n   * will be animated back to the source item to indicate the action is marked as invalid.\n   */\n  setValid(isValid) {\n    this.isValid = isValid;\n  }\n}\n\n/**\n * Arguments for the TreeView [`nodeDragStart`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragstart) event.\n */\nclass TreeItemDragStartEvent extends PreventableEvent {\n  /**\n   * The look-up info for the dragged item.\n   */\n  sourceItem;\n  /**\n   * The original pointer event holding details about the current pointer position.\n   */\n  originalEvent;\n  /**\n   * @hidden\n   */\n  constructor(initializer) {\n    super();\n    Object.assign(this, initializer);\n  }\n}\n\n/**\n * Arguments for the TreeView [`nodeDrag`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrag) and\n * [`nodeDragEnd`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragend) events.\n */\nclass TreeItemDragEvent {\n  /** @hidden */\n  constructor() {}\n  /**\n   * The look-up info for the dragged item.\n   */\n  sourceItem;\n  /**\n   * The look-up info for the item that the dragged node is placed over if there is such.\n   */\n  destinationItem;\n  /**\n   * The original pointer event holding details about the current pointer position.\n   */\n  originalEvent;\n}\n\n/**\n * @hidden\n */\nclass DragClueComponent {\n  cdr;\n  hostClasses = true;\n  /**\n   * The text value of the dragged TreeView item.\n   */\n  text;\n  /**\n   * The attempted operation according to the current drop target.\n   */\n  action;\n  /**\n   * The look-up info for the currently dragged item.\n   */\n  sourceItem;\n  /**\n   * The look-up info for the destination item (if hovering a valid drop target).\n   */\n  destinationItem;\n  /**\n   * Defines the drag clue content template.\n   */\n  template;\n  posistionStyle = 'fixed';\n  get statusIconClass() {\n    switch (this.action) {\n      case DropAction.Add:\n        return 'plus';\n      case DropAction.InsertTop:\n        return 'insert-top';\n      case DropAction.InsertBottom:\n        return 'insert-bottom';\n      case DropAction.InsertMiddle:\n        return 'insert-middle';\n      case DropAction.Invalid:\n      default:\n        return 'cancel';\n    }\n  }\n  get statusSVGIcon() {\n    switch (this.action) {\n      case DropAction.Add:\n        return plusIcon;\n      case DropAction.InsertTop:\n        return insertTopIcon;\n      case DropAction.InsertBottom:\n        return insertBottomIcon;\n      case DropAction.InsertMiddle:\n        return insertMiddleIcon;\n      case DropAction.Invalid:\n      default:\n        return cancelIcon;\n    }\n  }\n  constructor(cdr) {\n    this.cdr = cdr;\n  }\n  // exposed as a public method that can be called from outside as the component uses `OnPush` strategy\n  detectChanges() {\n    this.cdr.detectChanges();\n  }\n  static ɵfac = function DragClueComponent_Factory(t) {\n    return new (t || DragClueComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DragClueComponent,\n    selectors: [[\"kendo-treeview-drag-clue\"]],\n    hostVars: 6,\n    hostBindings: function DragClueComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"position\", ctx.posistionStyle);\n        i0.ɵɵclassProp(\"k-header\", ctx.hostClasses)(\"k-drag-clue\", ctx.hostClasses);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"innerCssClass\", \"k-drag-status\", 3, \"name\", \"svgIcon\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function DragClueComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DragClueComponent_ng_container_0_Template, 4, 3, \"ng-container\", 0)(1, DragClueComponent_1_Template, 1, 7, null, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.template);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.template);\n      }\n    },\n    dependencies: [NgIf, IconWrapperComponent, NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragClueComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'kendo-treeview-drag-clue',\n      template: `\n        <ng-container *ngIf=\"!template\">\n            <kendo-icon-wrapper\n                innerCssClass=\"k-drag-status\"\n                [name]=\"statusIconClass\"\n                [svgIcon]=\"statusSVGIcon\"\n                >\n            </kendo-icon-wrapper>\n            <span>{{text}}</span>\n        </ng-container>\n\n        <ng-template\n            *ngIf=\"template\"\n            [ngTemplateOutlet]=\"template\"\n            [ngTemplateOutletContext]=\"{\n                text: text,\n                action: action,\n                sourceItem: sourceItem,\n                destinationItem: destinationItem\n            }\"\n        >\n        </ng-template>\n    `,\n      standalone: true,\n      imports: [NgIf, IconWrapperComponent, NgTemplateOutlet]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    hostClasses: [{\n      type: HostBinding,\n      args: ['class.k-header']\n    }, {\n      type: HostBinding,\n      args: ['class.k-drag-clue']\n    }],\n    posistionStyle: [{\n      type: HostBinding,\n      args: ['style.position']\n    }]\n  });\n})();\n\n/**\n * @hidden\n */\nclass DragAndDropAssetService {\n  get componentRef() {\n    if (!isPresent(this._componentRef)) {\n      throw new Error('The `initalize` method must be called before calling other service methods.');\n    }\n    return this._componentRef;\n  }\n  set componentRef(componentRef) {\n    this._componentRef = componentRef;\n  }\n  get element() {\n    return this.componentRef.location.nativeElement;\n  }\n  _componentRef;\n  ngOnDestroy() {\n    if (!isPresent(this._componentRef)) {\n      return;\n    }\n    this.element.parentElement.removeChild(this.element);\n    this.componentRef.destroy();\n    this.componentRef = null;\n  }\n  show() {\n    this.element.style.display = '';\n  }\n  hide() {\n    this.element.style.display = 'none';\n  }\n  move(left, top, offset = 0) {\n    this.element.style.left = `${left + offset}px`;\n    this.element.style.top = `${top + offset}px`;\n  }\n  static ɵfac = function DragAndDropAssetService_Factory(t) {\n    return new (t || DragAndDropAssetService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DragAndDropAssetService,\n    factory: DragAndDropAssetService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragAndDropAssetService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * Checks if the browser supports relative stacking context.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n */\nconst hasRelativeStackingContext = memoize(() => {\n  if (!(isDocumentAvailable() && isPresent(document.body))) {\n    return false;\n  }\n  const top = 10;\n  const parent = document.createElement(\"div\");\n  parent.style.transform = \"matrix(10, 0, 0, 10, 0, 0)\";\n  const innerDiv = document.createElement('div');\n  innerDiv.innerText = 'child';\n  innerDiv.style.position = 'fixed';\n  innerDiv.style.top = `${top}px`;\n  parent.appendChild(innerDiv);\n  document.body.appendChild(parent);\n  const isDifferent = parent.children[0].getBoundingClientRect().top !== top;\n  document.body.removeChild(parent);\n  return isDifferent;\n});\n/**\n * Stores the result of the passed function's first invokation and returns it instead of invoking it again afterwards.\n */\nfunction memoize(fn) {\n  let result;\n  let called = false;\n  return (...args) => {\n    if (called) {\n      return result;\n    }\n    result = fn(...args);\n    called = true;\n    return result;\n  };\n}\n/**\n * @hidden\n *\n * Gets the offset of the parent element if the latter has the `transform` CSS prop applied.\n * Transformed parents create new stacking context and the `fixed` children must be position based on the transformed parent.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n *\n * If no parent container is `transform`-ed the function will return `{ left: 0, top: 0 }`;\n */\nconst getContainerOffset = element => {\n  if (!(element && hasRelativeStackingContext())) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n  let offsetParent = element.parentElement;\n  while (offsetParent) {\n    if (window.getComputedStyle(offsetParent).transform !== 'none') {\n      break;\n    }\n    offsetParent = offsetParent.parentElement;\n  }\n  if (offsetParent) {\n    const rect = offsetParent.getBoundingClientRect();\n    return {\n      left: rect.left - offsetParent.scrollLeft,\n      top: rect.top - offsetParent.scrollTop\n    };\n  }\n  return {\n    left: 0,\n    top: 0\n  };\n};\n/**\n * @hidden\n */\nconst getDropAction = (dropPosition, dropTarget) => {\n  if (!(isPresent(dropPosition) && isPresent(dropTarget))) {\n    return DropAction.Invalid;\n  }\n  switch (dropPosition) {\n    case DropPosition.Over:\n      return DropAction.Add;\n    case DropPosition.Before:\n      return isPresent(closestNode(dropTarget).previousElementSibling) ? DropAction.InsertMiddle : DropAction.InsertTop;\n    case DropPosition.After:\n      return isPresent(closestNode(dropTarget).nextElementSibling) ? DropAction.InsertMiddle : DropAction.InsertBottom;\n    default:\n      return DropAction.Invalid;\n  }\n};\n/**\n * @hidden\n */\nconst getDropPosition = (draggedItem, target, clientY, targetTreeView, containerOffset) => {\n  if (!(isPresent(draggedItem) && isPresent(target) && isPresent(targetTreeView) && isPresent(containerOffset))) {\n    return;\n  }\n  // the .k-treeview-mid element starts just after the checkbox/expand arrow and stretches till the end of the treeview on the right\n  const item = closestWithMatch(target, '.k-treeview-top, .k-treeview-mid, .k-treeview-bot');\n  if (!isPresent(item)) {\n    return;\n  }\n  // the content element (.k-treeview-leaf:not(.k-treeview-load-more-button)) holds just the treeview item text\n  const content = getContentElement(item);\n  const targetChildOfDraggedItem = hasParent(item, closestNode(draggedItem));\n  if (!isPresent(content) || content === draggedItem || targetChildOfDraggedItem) {\n    return;\n  }\n  const itemViewPortCoords = content.getBoundingClientRect();\n  /*\n      if the user is hovering a treeview item, split the item height into four parts:\n          - dropping into the top quarter should insert the dragged item before the drop target\n          - dropping into the bottom quarter should insert the dragged item after the drop target\n          - dropping into the second or third quarter should add the item as child node of the drop target\n       if the user is NOT hovering a treeview item (he's dragging somewhere on the right), split the item height to just two parts:\n          - dropping should insert before or after\n  */\n  const itemDivisionHeight = itemViewPortCoords.height / (isContent(target) ? 4 : 2);\n  // clear any possible container offset created by parent elements with `transform` css property set\n  const pointerPosition = clientY - containerOffset.top;\n  const itemTop = itemViewPortCoords.top - containerOffset.top;\n  if (pointerPosition < itemTop + itemDivisionHeight) {\n    return DropPosition.Before;\n  }\n  if (pointerPosition >= itemTop + itemViewPortCoords.height - itemDivisionHeight) {\n    return DropPosition.After;\n  }\n  return DropPosition.Over;\n};\n/**\n * @hidden\n */\nconst treeItemFromEventTarget = (treeView, dropTarget) => {\n  if (!(isPresent(treeView) && isPresent(dropTarget))) {\n    return null;\n  }\n  const node = closestNode(dropTarget);\n  const index = nodeId(node);\n  const lookup = treeView.itemLookup(index);\n  if (!(isPresent(lookup) && isPresent(lookup.item.dataItem))) {\n    return null;\n  }\n  return lookup;\n};\n/**\n * @hidden\n *\n * Emits `collapse` on the specified TreeView node if the latter is left empty after its last child node was dragged out.\n */\nconst collapseEmptyParent = (parent, parentNodes, treeview) => {\n  if (isPresent(parent) && parentNodes.length === 0 && treeview.isExpanded(parent.item.dataItem, parent.item.index)) {\n    treeview.collapseNode(parent.item.dataItem, parent.item.index);\n  }\n};\n/**\n * @hidden\n *\n * Expands the node if it's dropped into and it's not yet expanded.\n */\nconst expandDropTarget = (dropTarget, treeView) => {\n  if (!treeView.isExpanded(dropTarget.item.dataItem, dropTarget.item.index)) {\n    treeView.expandNode(dropTarget.item.dataItem, dropTarget.item.index);\n  }\n};\n/**\n * @hidden\n *\n * Extracts the event target from the viewport coords. Required for touch devices\n * where the `event.target` of a `pointermove` event is always the initially dragged item.\n */\nconst getDropTarget = event => {\n  if (!(isDocumentAvailable() && isPresent(document.elementFromPoint))) {\n    return event.target;\n  }\n  return document.elementFromPoint(event.clientX, event.clientY);\n};\n/**\n * @hidden\n *\n * Checks if the original index is before the new one and corrects the new one by decrementing the index for the level, where the original item stood.\n */\nconst updateMovedItemIndex = (newIndex, originalIndex) => {\n  const movedItemNewIndexParts = newIndex.split('_');\n  const originalItemIndexParts = originalIndex.split('_');\n  // if the original item was moved from a deeper level, there's no need for index correction\n  // e.g. 4_0_1 is moved to 5_0 => removing 4_0_1 will not cause 5_0 to be moved\n  if (movedItemNewIndexParts.length < originalItemIndexParts.length) {\n    return newIndex;\n  }\n  // check if the parent item paths are the same - index correction is not required when the original item path differs from the path of the moved item - they belong to different hierarchies\n  // e.g. 4_1 is moved to 5_1 - the parent item paths are differen (4 compared to 5) => removing 4_1 will not cause 5_1 to be moved\n  // e.g 4_1 is moved to 4_3 - the parent paths are the same (both 4) => removing 4_1 will cause 4_3 to be moved\n  const originalItemParentPathLength = originalItemIndexParts.length - 1;\n  const originalItemParentPath = originalItemIndexParts.slice(0, originalItemParentPathLength).join('_');\n  const movedItemParentPath = movedItemNewIndexParts.slice(0, originalItemParentPathLength).join('_');\n  // check if the the index of the level where the original item is taken from is greater than the one of the moved item\n  // e.g. 4_5 is moved to 4_1 (comapre 5 and 1) => removing 4_5 will not cause 4_1 to be moved\n  // e.g. 4_1 is moved to 4_5 (comapre 1 and 5) => removing 4_1 will cause 4_5 to be moved\n  const originalItemIndexLevel = originalItemIndexParts.length - 1;\n  const originalItemLevelIndex = Number(originalItemIndexParts[originalItemIndexLevel]);\n  const movedItemLevelIndex = Number(movedItemNewIndexParts[originalItemIndexLevel]);\n  if (originalItemParentPath === movedItemParentPath && movedItemLevelIndex > originalItemLevelIndex) {\n    // if the removed item causes the dropped item to be moved a position up - decrement the index at that level\n    movedItemNewIndexParts[originalItemIndexLevel] = String(movedItemLevelIndex - 1);\n    return movedItemNewIndexParts.join('_');\n  }\n  return newIndex;\n};\n/**\n * @hidden\n */\nconst SCROLLBAR_REG_EXP = new RegExp('(auto|scroll)');\n/**\n * @hidden\n *\n * Retrives the first scrollable element starting the search from the provided one, traversing to the top of the DOM tree.\n */\nconst getScrollableContainer = node => {\n  while (isPresent(node) && node.nodeName !== 'HTML') {\n    const hasOverflow = node.scrollHeight > node.clientHeight;\n    const hasScrollbar = SCROLLBAR_REG_EXP.test(getComputedStyle(node).overflowY);\n    if (hasOverflow && hasScrollbar) {\n      return node;\n    }\n    node = node.parentNode;\n  }\n  return node;\n};\n/**\n * @hidden\n *\n * Checks if the top of the scrollable element is reached.\n * Floors the scrollTop value.\n */\nconst isTopReached = element => Math.floor(element.scrollTop) <= 0;\n/**\n * @hidden\n *\n * Checks if the bottom of the scrollable element is reached.\n * Ceils the scrollTop value.\n */\nconst isBottomReached = element => Math.ceil(element.scrollTop) >= element.scrollHeight - element.clientHeight;\n/**\n * @hidden\n *\n * Scrolls the element in the given direction by the provided step.\n *\n * If the targeted scroll incrementation doesn't yield any result due to device pixel ratio issues (https://github.com/dimitar-pechev/RenderingIndependentScrollOffsets#readme),\n * increments the step with 1px and again attempts to change the scrollTop of the element, until the content is actually scrolled.\n *\n * Cuts the operation short after 20 unsuccessful attempts to prevent infinite loops in possible corner-case scenarios.\n */\nconst scrollElementBy = (element, step, direction) => {\n  if (!(isPresent(element) && isDocumentAvailable())) {\n    return;\n  }\n  const initialScrollTop = element.scrollTop;\n  let currentStep = step;\n  let iterations = 0;\n  while (initialScrollTop === element.scrollTop && !(direction === ScrollDirection.Up && isTopReached(element)) && !(direction === ScrollDirection.Down && isBottomReached(element)) && iterations < 20 // as the bulgarian saying goes - to ties our underpants\n  ) {\n    element.scrollTop += currentStep * direction;\n    currentStep += 1;\n    iterations += 1;\n  }\n};\n\n/**\n * @hidden\n */\nconst CLUE_OFFSET = 10;\n/**\n * @hidden\n */\nconst RETURN_ANIMATION_DURATION = 200;\n/**\n * @hidden\n */\nclass DragClueService extends DragAndDropAssetService {\n  returnAnimation;\n  scrollInterval;\n  constructor() {\n    super();\n  }\n  initialize(container, template) {\n    if (isPresent(this._componentRef)) {\n      this.ngOnDestroy();\n    }\n    this.componentRef = container.createComponent(DragClueComponent);\n    this.hide();\n    this.componentRef.instance.template = template;\n    this.componentRef.changeDetectorRef.detectChanges();\n  }\n  ngOnDestroy() {\n    this.cancelReturnAnimation();\n    this.cancelScroll();\n    super.ngOnDestroy();\n  }\n  move(left, top) {\n    super.move(left, top, CLUE_OFFSET);\n  }\n  animateDragClueToElementPosition(target) {\n    if (!(isPresent(target) && isPresent(this.element.animate))) {\n      this.hide();\n      return;\n    }\n    const targetElementViewPortCoords = target.getBoundingClientRect();\n    const clueElementViewPortCoords = this.element.getBoundingClientRect();\n    this.returnAnimation = this.element.animate([{\n      transform: 'translate(0, 0)'\n    }, {\n      transform: `translate(${targetElementViewPortCoords.left - clueElementViewPortCoords.left}px, ${targetElementViewPortCoords.top - clueElementViewPortCoords.top}px)`\n    }], RETURN_ANIMATION_DURATION);\n    this.returnAnimation.onfinish = () => this.hide();\n  }\n  cancelReturnAnimation() {\n    if (!isPresent(this.returnAnimation)) {\n      return;\n    }\n    this.returnAnimation.cancel();\n    this.returnAnimation = null;\n  }\n  updateDragClueData(action, sourceItem, destinationItem) {\n    const dragClue = this.componentRef.instance;\n    if (action === dragClue.action && dataItemsEqual(sourceItem, dragClue.sourceItem) && dataItemsEqual(destinationItem, dragClue.destinationItem)) {\n      return;\n    }\n    dragClue.action = action;\n    dragClue.sourceItem = sourceItem;\n    dragClue.destinationItem = destinationItem;\n    dragClue.detectChanges();\n  }\n  updateText(text) {\n    if (text === this.componentRef.instance.text) {\n      return;\n    }\n    this.componentRef.instance.text = text;\n    this.componentRef.instance.detectChanges();\n  }\n  /**\n   * Triggers the first scrollable parent to scroll upwards or downwards.\n   * Uses setInterval, so should be called outside the angular zone.\n   */\n  scrollIntoView({\n    step,\n    interval\n  }) {\n    this.cancelScroll();\n    const scrollableContainer = getScrollableContainer(this.element);\n    if (!isPresent(scrollableContainer)) {\n      return;\n    }\n    const containerRect = scrollableContainer.getBoundingClientRect();\n    const clueRect = this.element.getBoundingClientRect();\n    // if the beginning of the scrollable container is above the current viewport, fall-back to 0\n    const firstVisibleClientTopPart = Math.max(containerRect.top, 0);\n    // start scrolling up when the first visible item is dragged over\n    const topLimit = firstVisibleClientTopPart + clueRect.height;\n    // if the end of the scrollable container is beneath the current viewport, fall-back to its client height\n    // add the distance from the start of the viewport to the beginning of the container to ensure scrolling bottom begins when the actual end of the container is reached\n    const bottomLimit = firstVisibleClientTopPart + Math.min(containerRect.bottom, scrollableContainer.clientHeight);\n    if (clueRect.top < topLimit) {\n      this.scrollInterval = setInterval(() => scrollElementBy(scrollableContainer, step, ScrollDirection.Up), interval);\n    } else if (clueRect.bottom > bottomLimit) {\n      this.scrollInterval = setInterval(() => scrollElementBy(scrollableContainer, step, ScrollDirection.Down), interval);\n    }\n  }\n  /**\n   * Cancels out the on-going scroll animation, if present.\n   */\n  cancelScroll() {\n    if (isPresent(this.scrollInterval)) {\n      clearInterval(this.scrollInterval);\n      this.scrollInterval = null;\n    }\n  }\n  static ɵfac = function DragClueService_Factory(t) {\n    return new (t || DragClueService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DragClueService,\n    factory: DragClueService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragClueService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @hidden\n */\nclass DropHintComponent {\n  changeDetectorRef;\n  hostClass = true;\n  /**\n   * Defines the drag hint content template.\n   */\n  template;\n  position = 'fixed';\n  pointerEvents = 'none';\n  /**\n   * The attempted operation according to the current drop target.\n   */\n  action;\n  /**\n   * The look-up info for the currently dragged item.\n   */\n  sourceItem;\n  /**\n   * The look-up info for the destination item.\n   */\n  destinationItem;\n  constructor(changeDetectorRef) {\n    this.changeDetectorRef = changeDetectorRef;\n  }\n  // exposed as a public method that can be called from outside as the component uses `OnPush` strategy\n  detectChanges() {\n    this.changeDetectorRef.detectChanges();\n  }\n  static ɵfac = function DropHintComponent_Factory(t) {\n    return new (t || DropHintComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DropHintComponent,\n    selectors: [[\"kendo-treeview-drop-hint\"]],\n    hostVars: 6,\n    hostBindings: function DropHintComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"position\", ctx.position)(\"pointer-events\", ctx.pointerEvents);\n        i0.ɵɵclassProp(\"k-drop-hint-container\", ctx.hostClass);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"k-drop-hint k-drop-hint-h\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"k-drop-hint\", \"k-drop-hint-h\"], [1, \"k-drop-hint-start\"], [1, \"k-drop-hint-line\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function DropHintComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DropHintComponent_div_0_Template, 3, 0, \"div\", 0)(1, DropHintComponent_1_Template, 1, 6, null, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.template);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.template);\n      }\n    },\n    dependencies: [NgIf, NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropHintComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'kendo-treeview-drop-hint',\n      template: `\n        <div\n            *ngIf=\"!template\"\n            class=\"k-drop-hint k-drop-hint-h\"\n        >\n            <div class='k-drop-hint-start'></div>\n            <div class='k-drop-hint-line'></div>\n        </div>\n\n        <ng-template\n            *ngIf=\"template\"\n            [ngTemplateOutlet]=\"template\"\n            [ngTemplateOutletContext]=\"{\n                action: action,\n                sourceItem: sourceItem,\n                destinationItem: destinationItem\n            }\"\n        >\n        <ng-template>\n    `,\n      standalone: true,\n      imports: [NgIf, NgTemplateOutlet]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    hostClass: [{\n      type: HostBinding,\n      args: ['class.k-drop-hint-container']\n    }],\n    position: [{\n      type: HostBinding,\n      args: ['style.position']\n    }],\n    pointerEvents: [{\n      type: HostBinding,\n      args: ['style.pointer-events']\n    }]\n  });\n})();\n\n/**\n * @hidden\n */\nclass DropHintService extends DragAndDropAssetService {\n  constructor() {\n    super();\n  }\n  initialize(container, template) {\n    if (isPresent(this._componentRef)) {\n      this.ngOnDestroy();\n    }\n    this.componentRef = container.createComponent(DropHintComponent);\n    this.hide();\n    this.componentRef.instance.template = template;\n    this.componentRef.changeDetectorRef.detectChanges();\n  }\n  updateDropHintData(action, sourceItem, destinationItem) {\n    const dropHint = this.componentRef.instance;\n    if (action === dropHint.action && dataItemsEqual(sourceItem, dropHint.sourceItem) && dataItemsEqual(destinationItem, dropHint.destinationItem)) {\n      return;\n    }\n    dropHint.action = action;\n    dropHint.sourceItem = sourceItem;\n    dropHint.destinationItem = destinationItem;\n    dropHint.detectChanges();\n  }\n  static ɵfac = function DropHintService_Factory(t) {\n    return new (t || DropHintService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DropHintService,\n    factory: DropHintService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropHintService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Represents the template for the TreeView drag clue when an item is dragged. To define the clue template,\n * nest an `<ng-template>` tag with the `kendoTreeViewDragClueTemplate` directive inside a `<kendo-treeview>` tag\n * ([see example]({% slug draganddrop_treeview %}#toc-templates)).\n *\n *\n * The text, attempted drop action, source item and destination item are available as context variables in the template:\n *\n *\n * - `let-text=\"text\"` (`string`)\n * - `let-action=\"action\"` ([`DropAction`]({% slug api_treeview_dropaction %}))\n * - `let-sourceItem=\"sourceItem\"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))\n * - `let-destinationItem=\"destinationItem\"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))\n */\nclass DragClueTemplateDirective {\n  templateRef;\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n  static ɵfac = function DragClueTemplateDirective_Factory(t) {\n    return new (t || DragClueTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DragClueTemplateDirective,\n    selectors: [[\"\", \"kendoTreeViewDragClueTemplate\", \"\"]],\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragClueTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewDragClueTemplate]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Represents the template for the TreeView drop hint when an item is dragged. To define the hint template,\n * nest an `<ng-template>` tag with the `kendoTreeViewDropHintTemplate` directive inside a `<kendo-treeview>` tag\n * ([see example]({% slug draganddrop_treeview %}#toc-templates)).\n *\n * The attempted drop action, source item and destination item are available as context variables in the template:\n *\n * - `let-action=\"action\"` ([`DropAction`]({% slug api_treeview_dropaction %}))\n * - `let-sourceItem=\"sourceItem\"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))\n * - `let-destinationItem=\"destinationItem\"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))\n */\nclass DropHintTemplateDirective {\n  templateRef;\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n  static ɵfac = function DropHintTemplateDirective_Factory(t) {\n    return new (t || DropHintTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DropHintTemplateDirective,\n    selectors: [[\"\", \"kendoTreeViewDropHintTemplate\", \"\"]],\n    standalone: true\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropHintTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewDropHintTemplate]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nconst DEFAULT_SCROLL_SETTINGS = {\n  enabled: true,\n  step: 1,\n  interval: 1\n};\n/**\n * A directive which enables the dragging and dropping items inside the current TreeView or between multiple linked TreeView component instances\n * ([see example]({% slug draganddrop_treeview %})).\n *\n * Triggers the [`nodeDragStart`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragstart),\n * [`nodeDrag`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrag),\n * [`nodeDrop`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrop),\n * [`nodeDragEnd`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragend),\n * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and\n * [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)\n * events when the corresponding actions occur on the respective TreeView instance.\n */\nclass DragAndDropDirective {\n  element;\n  zone;\n  treeview;\n  dragClueService;\n  dropHintService;\n  /**\n   * Specifies whether the `removeItem` event will be fired after an item is dropped when the `ctrl` key is pressed.\n   * If enabled, the `removeItem` event will not be fired on the source TreeView\n   * ([see example]({% slug draganddrop_treeview %}#toc-multiple-treeviews)).\n   *\n   * @default false\n   */\n  allowCopy = false;\n  /**\n   * Specifes the TreeViewComponent instances into which dragged items from the current TreeViewComponent can be dropped\n   * ([see example]({% slug draganddrop_treeview %}#toc-multiple-treeviews)).\n   */\n  dropZoneTreeViews = [];\n  /**\n   * Specifies the distance in pixels from the initial item pointerdown event, before the dragging is initiated.\n   * The `nodeDragStart` and all consequent TreeView drag events will not be fired until the actual dragging begins.\n   *\n   * @default 5\n   */\n  startDragAfter = 5;\n  /**\n   * Controlls the auto-scrolling behavior during drag-and-drop ([see example]({% slug draganddrop_treeview %}#toc-auto-scrolling)).\n   * Enbaled by default. To turn the auto-scrolling off, set this prop to `false`.\n   *\n   * By default, the scrolling will be performed by 1 pixel at every 1 millisecond, when the dragged item reaches the top or the bottom of the scrollable container.\n   * The `step` and `interval` can be overridden by providing a `DragAndDropScrollSettings` object to this prop.\n   *\n   * @default true\n   */\n  autoScroll = true;\n  /**\n   * @hidden\n   */\n  dragClueTemplate;\n  /**\n   * @hidden\n   */\n  dropHintTemplate;\n  /**\n   * @hidden\n   */\n  userSelectStyle = 'none';\n  draggable;\n  draggedItem;\n  /**\n   * The pointer event of the last successful item pointerdown event (the draggable `press` event).\n   * Used for determining whether the `startDragAfter` distance is covered and for the `nodeDragStart` event args.\n   * Used also as a flag for whether a drag attempt is pending. Should be set to `null` once the dragging begins.\n   */\n  pendingDragStartEvent;\n  get scrollSettings() {\n    const userProvidedSettings = typeof this.autoScroll === 'boolean' ? {\n      enabled: this.autoScroll\n    } : this.autoScroll;\n    return Object.assign({}, DEFAULT_SCROLL_SETTINGS, userProvidedSettings);\n  }\n  /**\n   * Describes the offset of the parent element if the latter has the `transform` CSS prop applied.\n   * Transformed parents create new stacking context and the fixed children must be position based on the transformed parent.\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n   */\n  containerOffset = {\n    top: 0,\n    left: 0\n  };\n  constructor(element, zone, treeview, dragClueService, dropHintService) {\n    this.element = element;\n    this.zone = zone;\n    this.treeview = treeview;\n    this.dragClueService = dragClueService;\n    this.dropHintService = dropHintService;\n    this.treeview.touchActions = false;\n  }\n  ngAfterContentInit() {\n    this.initalizeDraggable();\n    this.dragClueService.initialize(this.treeview.assetsContainer, this.dragClueTemplate && this.dragClueTemplate.templateRef);\n    this.dropHintService.initialize(this.treeview.assetsContainer, this.dropHintTemplate && this.dropHintTemplate.templateRef);\n  }\n  ngOnDestroy() {\n    this.draggable.destroy();\n  }\n  /**\n   * @hidden\n   */\n  handlePress({\n    originalEvent\n  }) {\n    if (!isContent(originalEvent.target)) {\n      return;\n    }\n    // store the drag target on press, show it only when it's actually dragged\n    this.draggedItem = closestWithMatch(originalEvent.target, '.k-treeview-leaf');\n    // record the current pointer down coords - copared to the `startDragAfter` value to calculate whether to initiate dragging\n    this.pendingDragStartEvent = originalEvent;\n  }\n  /**\n   * @hidden\n   */\n  handleDrag({\n    originalEvent,\n    clientX,\n    clientY\n  }) {\n    if (this.shouldInitiateDragStart({\n      clientX,\n      clientY\n    })) {\n      this.initiateDragStart();\n    }\n    if (!isPresent(this.draggedItem) || isPresent(this.pendingDragStartEvent)) {\n      return;\n    }\n    const dropTarget = getDropTarget(originalEvent);\n    if (hasObservers(this.treeview.nodeDrag)) {\n      this.zone.run(() => this.notifyDrag(originalEvent, dropTarget));\n    }\n    const targetTreeView = this.getTargetTreeView(dropTarget);\n    const dropPosition = getDropPosition(this.draggedItem, dropTarget, clientY, targetTreeView, this.containerOffset);\n    const dropHintAnchor = closestWithMatch(dropTarget, '.k-treeview-top, .k-treeview-mid, .k-treeview-bot');\n    const dropAction = getDropAction(dropPosition, dropTarget);\n    const sourceItem = treeItemFromEventTarget(this.treeview, this.draggedItem);\n    const destinationItem = treeItemFromEventTarget(targetTreeView, dropTarget);\n    this.updateDropHintState(dropPosition, dropHintAnchor, dropAction, sourceItem, destinationItem);\n    this.updateDragClueState(dropAction, clientX, clientY, sourceItem, destinationItem);\n    if (this.scrollSettings.enabled) {\n      this.dragClueService.scrollIntoView(this.scrollSettings);\n    }\n  }\n  /**\n   * @hidden\n   */\n  handleRelease({\n    originalEvent,\n    clientY\n  }) {\n    if (this.scrollSettings.enabled) {\n      this.dragClueService.cancelScroll();\n    }\n    if (!isPresent(this.draggedItem) || isPresent(this.pendingDragStartEvent)) {\n      this.pendingDragStartEvent = null;\n      this.draggedItem = null;\n      return;\n    }\n    const dropTarget = getDropTarget(originalEvent);\n    const sourceTree = this.treeview;\n    const destinationTree = this.getTargetTreeView(dropTarget);\n    const dropPosition = getDropPosition(this.draggedItem, dropTarget, clientY, this.getTargetTreeView(dropTarget), this.containerOffset);\n    const sourceItem = treeItemFromEventTarget(sourceTree, this.draggedItem);\n    const destinationItem = treeItemFromEventTarget(destinationTree, dropTarget);\n    if (isPresent(destinationItem) && isPresent(dropPosition)) {\n      this.zone.run(() => this.notifyDrop({\n        sourceItem,\n        destinationItem,\n        dropPosition,\n        sourceTree,\n        destinationTree\n      }, originalEvent));\n    } else {\n      this.dragClueService.animateDragClueToElementPosition(this.draggedItem);\n    }\n    if (hasObservers(this.treeview.nodeDragEnd)) {\n      this.zone.run(() => this.notifyDragEnd({\n        sourceItem,\n        destinationItem,\n        originalEvent\n      }));\n    }\n    this.dropHintService.hide();\n    this.draggedItem = null;\n  }\n  updateDropHintState(dropPosition, dropHintAnchor, dropAction, sourceItem, destinationItem) {\n    if (!isPresent(dropHintAnchor) || dropPosition === DropPosition.Over || !isPresent(dropPosition)) {\n      this.dropHintService.hide();\n      return;\n    }\n    const anchorViewPortCoords = dropHintAnchor.getBoundingClientRect();\n    const insertBefore = dropPosition === DropPosition.Before;\n    const top = insertBefore ? anchorViewPortCoords.top : anchorViewPortCoords.top + anchorViewPortCoords.height;\n    this.dropHintService.updateDropHintData(dropAction, sourceItem, destinationItem);\n    // clear any possible container offset created by parent elements with `transform` css property set\n    this.dropHintService.move(anchorViewPortCoords.left - this.containerOffset.left, top - this.containerOffset.top);\n    this.dropHintService.show();\n  }\n  updateDragClueState(dropAction, clientX, clientY, sourceItem, destinationItem) {\n    // clear any possible container offset created by parent elements with `transform` css property set\n    this.dragClueService.move(clientX - this.containerOffset.left, clientY - this.containerOffset.top);\n    this.dragClueService.updateDragClueData(dropAction, sourceItem, destinationItem);\n    this.dragClueService.show();\n  }\n  initalizeDraggable() {\n    this.draggable = new Draggable({\n      press: this.handlePress.bind(this),\n      drag: this.handleDrag.bind(this),\n      release: this.handleRelease.bind(this)\n    });\n    this.zone.runOutsideAngular(() => this.draggable.bindTo(this.element.nativeElement));\n  }\n  notifyDragStart(originalEvent, dropTarget) {\n    const sourceItem = treeItemFromEventTarget(this.treeview, dropTarget);\n    const event = new TreeItemDragStartEvent({\n      sourceItem,\n      originalEvent\n    });\n    this.treeview.nodeDragStart.emit(event);\n    return event;\n  }\n  notifyDrag(originalEvent, dropTarget) {\n    const dragEvent = {\n      sourceItem: treeItemFromEventTarget(this.treeview, this.draggedItem),\n      destinationItem: treeItemFromEventTarget(this.getTargetTreeView(dropTarget), dropTarget),\n      originalEvent\n    };\n    this.treeview.nodeDrag.emit(dragEvent);\n  }\n  notifyDrop(args, originalEvent) {\n    const event = new TreeItemDropEvent(args, originalEvent);\n    args.destinationTree.nodeDrop.emit(event);\n    // disable the animations on drop and restore them afterwards (if they were initially turned on)\n    this.disableAnimationsForNextTick(args.destinationTree);\n    if (args.sourceTree !== args.destinationTree) {\n      this.disableAnimationsForNextTick(args.sourceTree);\n    }\n    if (!event.isDefaultPrevented() && event.isValid) {\n      this.dragClueService.hide();\n      // order matters in a flat data binding scenario (first add, then remove)\n      args.destinationTree.addItem.emit(args);\n      if (!(originalEvent.ctrlKey && this.allowCopy)) {\n        args.sourceTree.removeItem.emit(args);\n      }\n    } else if (event.isDefaultPrevented()) {\n      // directly hide the clue if the default is prevented\n      this.dragClueService.hide();\n    } else if (!event.isValid) {\n      // animate the clue back to the source item position if marked as invalid\n      this.dragClueService.animateDragClueToElementPosition(this.draggedItem);\n    }\n  }\n  notifyDragEnd(dragEndEvent) {\n    this.treeview.nodeDragEnd.emit(dragEndEvent);\n  }\n  getTargetTreeView(dropTarget) {\n    const treeViewTagName = this.treeview.element.nativeElement.tagName;\n    const targetTreeView = closestWithMatch(dropTarget, treeViewTagName);\n    return [this.treeview, ...this.dropZoneTreeViews].find(treeView => isPresent(treeView) && treeView.element.nativeElement === targetTreeView);\n  }\n  disableAnimationsForNextTick(treeView) {\n    // the treeView.animate getter returns `true` when the animations are turned off\n    // confusing, but seems on purpose (the `animate` prop sets the value of the @.disabled host-bound attribute)\n    if (treeView.animate) {\n      return;\n    }\n    treeView.animate = false;\n    this.zone.runOutsideAngular(() => setTimeout(() => treeView.animate = true));\n  }\n  shouldInitiateDragStart(currentPointerCoords) {\n    if (!isPresent(this.pendingDragStartEvent)) {\n      return false;\n    }\n    const distanceFromPointerDown = Math.sqrt(Math.pow(this.pendingDragStartEvent.clientX - currentPointerCoords.clientX, 2) + Math.pow(this.pendingDragStartEvent.clientY - currentPointerCoords.clientY, 2));\n    return distanceFromPointerDown >= this.startDragAfter;\n  }\n  initiateDragStart() {\n    if (hasObservers(this.treeview.nodeDragStart)) {\n      const dragStartEvent = this.zone.run(() => this.notifyDragStart(this.pendingDragStartEvent, getDropTarget(this.pendingDragStartEvent)));\n      if (dragStartEvent.isDefaultPrevented()) {\n        this.pendingDragStartEvent = null;\n        this.draggedItem = null;\n        return;\n      }\n    }\n    this.dragClueService.cancelReturnAnimation();\n    this.dragClueService.updateText(this.draggedItem.innerText);\n    this.containerOffset = getContainerOffset(this.draggedItem);\n    this.pendingDragStartEvent = null;\n  }\n  static ɵfac = function DragAndDropDirective_Factory(t) {\n    return new (t || DragAndDropDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(TreeViewComponent), i0.ɵɵdirectiveInject(DragClueService), i0.ɵɵdirectiveInject(DropHintService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DragAndDropDirective,\n    selectors: [[\"\", \"kendoTreeViewDragAndDrop\", \"\"]],\n    contentQueries: function DragAndDropDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, DragClueTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, DropHintTemplateDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dragClueTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropHintTemplate = _t.first);\n      }\n    },\n    hostVars: 8,\n    hostBindings: function DragAndDropDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"user-select\", ctx.userSelectStyle)(\"-ms-user-select\", ctx.userSelectStyle)(\"-moz-user-select\", ctx.userSelectStyle)(\"-webkit-user-select\", ctx.userSelectStyle);\n      }\n    },\n    inputs: {\n      allowCopy: \"allowCopy\",\n      dropZoneTreeViews: \"dropZoneTreeViews\",\n      startDragAfter: \"startDragAfter\",\n      autoScroll: \"autoScroll\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([DragClueService, DropHintService])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragAndDropDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewDragAndDrop]',\n      providers: [DragClueService, DropHintService],\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: TreeViewComponent\n    }, {\n      type: DragClueService\n    }, {\n      type: DropHintService\n    }];\n  }, {\n    allowCopy: [{\n      type: Input\n    }],\n    dropZoneTreeViews: [{\n      type: Input\n    }],\n    startDragAfter: [{\n      type: Input\n    }],\n    autoScroll: [{\n      type: Input\n    }],\n    dragClueTemplate: [{\n      type: ContentChild,\n      args: [DragClueTemplateDirective, {\n        static: false\n      }]\n    }],\n    dropHintTemplate: [{\n      type: ContentChild,\n      args: [DropHintTemplateDirective, {\n        static: false\n      }]\n    }],\n    userSelectStyle: [{\n      type: HostBinding,\n      args: ['style.user-select']\n    }, {\n      type: HostBinding,\n      args: ['style.-ms-user-select']\n    }, {\n      type: HostBinding,\n      args: ['style.-moz-user-select']\n    }, {\n      type: HostBinding,\n      args: ['style.-webkit-user-select']\n    }]\n  });\n})();\nconst DEFAULT_FILTER_EXPAND_SETTINGS = {\n  maxAutoExpandResults: -1,\n  expandMatches: false,\n  expandedOnClear: \"none\"\n};\n/**\n * A directive which manages the expanded state of the TreeView.\n * ([see example]({% slug expandedstate_treeview %})).\n */\nclass ExpandDirective {\n  component;\n  /**\n   * @hidden\n   */\n  set isExpanded(value) {\n    this.component.isExpanded = value;\n  }\n  /**\n   * Defines the item key that will be stored in the `expandedKeys` collection.\n   */\n  expandKey;\n  /**\n   * Whether or not to auto-expand the nodes leading from the root node to each filter result.\n   * To fine-tune this behavior, pass a [`FilterExpandSettings`]({% slug api_treeview_filterexpandsettings %}) object to this input.\n   * @default false\n   */\n  expandOnFilter = false;\n  get filterExpandSettings() {\n    const settings = isBoolean(this.expandOnFilter) ? {\n      enabled: this.expandOnFilter\n    } : {\n      ...this.expandOnFilter,\n      enabled: true\n    };\n    return Object.assign({}, DEFAULT_FILTER_EXPAND_SETTINGS, settings);\n  }\n  /**\n   * Fires when the `expandedKeys` collection was updated.\n   */\n  expandedKeysChange = new EventEmitter();\n  /**\n   * Defines the collection that will store the expanded keys.\n   */\n  expandedKeys;\n  subscriptions = new Subscription();\n  /**\n   * Reflectes the internal `expandedKeys` state.\n   */\n  state = new Set();\n  originalExpandedKeys = new Set();\n  isFiltered = false;\n  /**\n   * Holds the last emitted `expandedKeys` collection.\n   */\n  lastChange;\n  constructor(component) {\n    this.component = component;\n    this.subscriptions.add(merge(this.component.expand.pipe(map(e => ({\n      expand: true,\n      ...e\n    }))), this.component.collapse.pipe(map(e => ({\n      expand: false,\n      ...e\n    })))).subscribe(this.toggleExpand.bind(this)));\n    if (this.component.filterStateChange) {\n      this.subscriptions.add(this.component.filterStateChange.subscribe(this.handleAutoExpand.bind(this)));\n    }\n    this.component.isExpanded = (dataItem, index) => this.state.has(this.itemKey({\n      dataItem,\n      index\n    }));\n  }\n  ngOnChanges(changes) {\n    if (isChanged('expandedKeys', changes, false) && changes['expandedKeys'].currentValue !== this.lastChange) {\n      this.state = new Set(changes['expandedKeys'].currentValue);\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  /**\n   * @hidden\n   */\n  itemKey(e) {\n    if (this.expandKey) {\n      if (typeof this.expandKey === \"string\") {\n        return e.dataItem[this.expandKey];\n      }\n      if (typeof this.expandKey === \"function\") {\n        return this.expandKey(e);\n      }\n    }\n    return e.index;\n  }\n  toggleExpand({\n    index,\n    dataItem,\n    expand\n  }) {\n    const key = this.itemKey({\n      index,\n      dataItem\n    });\n    const isExpanded = this.state.has(key);\n    let notify = false;\n    if (isExpanded && !expand) {\n      this.state.delete(key);\n      notify = true;\n    } else if (!isExpanded && expand) {\n      this.state.add(key);\n      notify = true;\n    }\n    if (notify) {\n      this.notify();\n    }\n  }\n  handleAutoExpand({\n    nodes,\n    matchCount,\n    term\n  }) {\n    if (!this.filterExpandSettings.enabled) {\n      return;\n    }\n    const {\n      maxAutoExpandResults,\n      expandMatches: autoExpandMatches,\n      expandedOnClear\n    } = this.filterExpandSettings;\n    if (!this.isFiltered) {\n      this.originalExpandedKeys = new Set(this.state);\n    }\n    const exitingFilteredState = this.isFiltered && !term;\n    const maxExceeded = maxAutoExpandResults !== -1 && matchCount > maxAutoExpandResults;\n    const exitAutoExpandedState = exitingFilteredState || maxExceeded;\n    if (exitAutoExpandedState) {\n      switch (expandedOnClear) {\n        case \"initial\":\n          {\n            if (!sameValues(this.state, this.originalExpandedKeys)) {\n              this.state = this.originalExpandedKeys;\n              this.notify();\n            }\n            break;\n          }\n        case \"all\":\n          {\n            this.state = new Set(nodes.reduce((acc, rootNode) => {\n              this.getEveryExpandKey(acc, rootNode);\n              return acc;\n            }, []));\n            this.notify();\n            break;\n          }\n        case \"unchanged\":\n          {\n            break;\n          }\n        case \"none\":\n        default:\n          {\n            if (this.state.size !== 0) {\n              this.state.clear();\n              this.notify();\n            }\n            break;\n          }\n      }\n      this.isFiltered = false;\n      return;\n    }\n    const indicesToExpand = new Set(nodes.reduce((acc, rootNode) => {\n      this.updateExpandedNodes(acc, rootNode, autoExpandMatches);\n      return acc;\n    }, []));\n    if (!sameValues(this.state, indicesToExpand)) {\n      this.state = indicesToExpand;\n      this.notify();\n    }\n    this.isFiltered = true;\n  }\n  /**\n   * Fills array with the correct expand keys according to wrapper metadata.\n   */\n  updateExpandedNodes = (collection, node, autoExpandMatches) => {\n    if (node.containsMatches || node.isMatch && autoExpandMatches && isArrayWithAtLeastOneItem(node.children)) {\n      collection.push(this.itemKey({\n        dataItem: node.dataItem,\n        index: node.index\n      }));\n    }\n    if (isArrayWithAtLeastOneItem(node.children)) {\n      node.children.forEach(child => {\n        this.updateExpandedNodes(collection, child, autoExpandMatches);\n      });\n    }\n  };\n  /**\n   * Fills array with the expand key of every node.\n   */\n  getEveryExpandKey = (collection, node) => {\n    if (isArrayWithAtLeastOneItem(node.children)) {\n      collection.push(this.itemKey({\n        dataItem: node.dataItem,\n        index: node.index\n      }));\n    }\n    if (isArrayWithAtLeastOneItem(node.children)) {\n      node.children.forEach(child => {\n        this.getEveryExpandKey(collection, child);\n      });\n    }\n  };\n  notify() {\n    this.lastChange = Array.from(this.state);\n    this.expandedKeysChange.emit(this.lastChange);\n  }\n  static ɵfac = function ExpandDirective_Factory(t) {\n    return new (t || ExpandDirective)(i0.ɵɵdirectiveInject(ExpandableComponent));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ExpandDirective,\n    selectors: [[\"\", \"kendoTreeViewExpandable\", \"\"]],\n    inputs: {\n      isExpanded: \"isExpanded\",\n      expandKey: [i0.ɵɵInputFlags.None, \"expandBy\", \"expandKey\"],\n      expandOnFilter: \"expandOnFilter\",\n      expandedKeys: \"expandedKeys\"\n    },\n    outputs: {\n      expandedKeysChange: \"expandedKeysChange\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ExpandDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewExpandable]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: ExpandableComponent\n    }];\n  }, {\n    isExpanded: [{\n      type: Input\n    }],\n    expandKey: [{\n      type: Input,\n      args: [\"expandBy\"]\n    }],\n    expandOnFilter: [{\n      type: Input\n    }],\n    expandedKeysChange: [{\n      type: Output\n    }],\n    expandedKeys: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions must have a unary.\n */\nconst compose = (...args) => data => args.reduceRight((acc, curr) => curr(acc), data);\n\n/**\n * @hidden\n */\nconst copyPageSize = (treeview, source, target) => {\n  if (!isPresent(treeview.loadMoreService)) {\n    return;\n  }\n  const sourceGroupSize = treeview.getNodePageSize(source);\n  treeview.setNodePageSize(target, sourceGroupSize);\n};\n/**\n * @hidden\n */\nconst incrementPageSize = (treeview, dataItem) => {\n  if (!isPresent(treeview.loadMoreService)) {\n    return;\n  }\n  const currentPageSize = treeview.getNodePageSize(dataItem);\n  treeview.setNodePageSize(dataItem, currentPageSize + 1);\n};\n/**\n * @hidden\n */\nconst decrementPageSize = (treeview, dataItem) => {\n  if (!isPresent(treeview.loadMoreService)) {\n    return;\n  }\n  const currentPageSize = treeview.getNodePageSize(dataItem);\n  treeview.setNodePageSize(dataItem, currentPageSize - 1);\n};\n\n/**\n * @hidden\n */\nclass FlatEditingService {\n  flatBinding;\n  movedItemNewIndex;\n  constructor(flatBinding) {\n    this.flatBinding = flatBinding;\n  }\n  add({\n    sourceItem,\n    destinationItem,\n    dropPosition,\n    sourceTree,\n    destinationTree\n  }) {\n    // shallow clone the item as not to mistake it for its 'older' version when the remove handler kicks in to splice the item at its old position\n    const clonedSourceDataItem = Object.assign({}, getDataItem(sourceItem));\n    if (dropPosition === DropPosition.Over) {\n      // expand the item that was dropped into\n      expandDropTarget(destinationItem, destinationTree);\n      const destinationItemId = getter(this.flatBinding.idField)(getDataItem(destinationItem));\n      setter(this.flatBinding.parentIdField)(clonedSourceDataItem, destinationItemId);\n      const lastChildNodeIndex = this.getLastVisibleChildNodeIndex(destinationTree, this.flatBinding.originalData, getDataItem(destinationItem));\n      // insert after the last visible child\n      const targetIndex = lastChildNodeIndex + 1;\n      this.flatBinding.originalData.splice(targetIndex, 0, clonedSourceDataItem);\n      // rebind the treeview data before searching for the focus target index\n      this.rebindData();\n      const focusTarget = this.fetchChildNodes(getDataItem(destinationItem), destinationTree).indexOf(clonedSourceDataItem);\n      this.movedItemNewIndex = buildTreeIndex(destinationItem.item.index, focusTarget);\n    } else {\n      const shiftIndex = dropPosition === DropPosition.After ? 1 : 0;\n      const targetIndex = this.flatBinding.originalData.indexOf(getDataItem(destinationItem)) + shiftIndex;\n      this.flatBinding.originalData.splice(targetIndex, 0, clonedSourceDataItem);\n      const destinationItemParentId = getter(this.flatBinding.parentIdField)(getDataItem(destinationItem));\n      setter(this.flatBinding.parentIdField)(clonedSourceDataItem, destinationItemParentId);\n      // rebind the treeview data before searching for the focus target index\n      this.rebindData();\n      const parentIndex = destinationItem.parent ? destinationItem.parent.item.index : null;\n      const parentContainer = destinationItem.parent ? this.fetchChildNodes(getDataItem(destinationItem.parent), destinationTree) : destinationTree.nodes;\n      const focusTarget = parentContainer.indexOf(clonedSourceDataItem);\n      this.movedItemNewIndex = buildTreeIndex(parentIndex, focusTarget);\n    }\n    if (sourceTree !== destinationTree) {\n      this.addChildNodes(clonedSourceDataItem, sourceTree);\n    }\n    // increment the parent page size => an item is moved into it\n    const updatedParent = dropPosition === DropPosition.Over ? getDataItem(destinationItem) : getDataItem(destinationItem.parent);\n    incrementPageSize(destinationTree, updatedParent);\n    // the page sizes are stored by data-item reference => copy the old item ref page size to the new item reference\n    copyPageSize(destinationTree, getDataItem(sourceItem), clonedSourceDataItem);\n    // the source tree nodes are reloaded on `removeItem` - reload the destination tree nodes if the soruce and the destination tree are different\n    if (sourceTree !== destinationTree && !destinationTree.loadOnDemand) {\n      destinationTree.preloadChildNodes();\n    }\n    // if the source and destination trees are the same, focusing the moved item here will not have the desired effect\n    // as the `remove` handler has not yet kicked-in to remove the item from its old position\n    if (sourceTree !== destinationTree) {\n      // ensure the focus target is rendered and registered\n      destinationTree.changeDetectorRef.detectChanges();\n      destinationTree.focus(this.movedItemNewIndex);\n    }\n  }\n  remove({\n    sourceItem,\n    sourceTree,\n    destinationTree\n  }) {\n    const sourceDataItem = getDataItem(sourceItem);\n    const sourceItemIndex = this.flatBinding.originalData.indexOf(sourceDataItem);\n    this.flatBinding.originalData.splice(sourceItemIndex, 1);\n    if (sourceTree !== destinationTree) {\n      this.removeChildNodes(sourceDataItem, sourceTree);\n    }\n    this.rebindData();\n    // emit collapse for the parent node if its last child node was spliced\n    const parentChildren = sourceItem.parent ? sourceItem.parent.children : [];\n    collapseEmptyParent(sourceItem.parent, parentChildren, sourceTree);\n    // decrement source item parent page size => an item has been removed from it\n    decrementPageSize(sourceTree, getDataItem(sourceItem.parent));\n    // reload the treeview nodes\n    if (!sourceTree.loadOnDemand) {\n      sourceTree.preloadChildNodes();\n    }\n    // if the source and destination trees are different we want to focus only the moved item in the destination tree\n    if (sourceTree === destinationTree) {\n      // ensure the focus target is rendered and registered\n      destinationTree.changeDetectorRef.detectChanges();\n      // after the source item is removed from its original position, the candidate index might have to be corrected\n      const index = updateMovedItemIndex(this.movedItemNewIndex, sourceItem.item.index);\n      destinationTree.focus(index);\n    }\n  }\n  addChildNodes(dataItem, source) {\n    const itemChildren = this.fetchAllDescendantNodes(dataItem, source);\n    this.flatBinding.originalData.push(...itemChildren);\n  }\n  removeChildNodes(dataItem, source) {\n    const sourceChildren = this.fetchAllDescendantNodes(dataItem, source);\n    sourceChildren.forEach(item => {\n      const index = this.flatBinding.originalData.indexOf(item);\n      this.flatBinding.originalData.splice(index, 1);\n    });\n  }\n  fetchAllDescendantNodes(node, treeview) {\n    let nodes = this.fetchChildNodes(node, treeview);\n    nodes.forEach(node => nodes = nodes.concat(this.fetchAllDescendantNodes(node, treeview) || []));\n    return nodes;\n  }\n  fetchChildNodes(node, treeview) {\n    if (!node) {\n      return [];\n    }\n    let nodes = [];\n    treeview.children(node).pipe(take(1)).subscribe(children => nodes = nodes.concat(children || []));\n    return nodes;\n  }\n  getLastVisibleChildNodeIndex(treeview, data, node) {\n    if (!isPresent(treeview.loadMoreService) || !treeview.hasChildren(node)) {\n      return data.length;\n    }\n    const visibleNodesCount = treeview.loadMoreService.getGroupSize(node);\n    const visibleChildren = this.fetchChildNodes(node, treeview).slice(0, visibleNodesCount);\n    const lastNode = visibleChildren[visibleChildren.length - 1];\n    const lastNodeIndex = data.indexOf(lastNode);\n    return lastNodeIndex;\n  }\n  rebindData() {\n    this.flatBinding.nodes = this.flatBinding.originalData;\n    this.flatBinding.updateNodes(this.flatBinding.originalData);\n  }\n}\n\n/**\n * @hidden\n */\nconst DEFAULT_FILTER_SETTINGS = {\n  operator: 'contains',\n  ignoreCase: true,\n  mode: \"lenient\"\n};\n\n/**\n * @hidden\n */\nclass FilteringBase {\n  component;\n  /**\n   * Stores the unfiltered nodes\n   */\n  filterData;\n  visibleNodes = new Set();\n  /**\n   * The settings which are applied when performing a filter on the component's data.\n   */\n  set filterSettings(settings) {\n    this._filterSettings = {\n      ...DEFAULT_FILTER_SETTINGS,\n      ...settings\n    };\n  }\n  get filterSettings() {\n    return this._filterSettings;\n  }\n  _filterSettings = DEFAULT_FILTER_SETTINGS;\n  /**\n   * Applies a filter and changes the visibility of the component's nodes accordingly.\n   */\n  set filter(term) {\n    this.handleFilterChange(term);\n  }\n  constructor(component) {\n    this.component = component;\n  }\n  /**\n   * @hidden\n   */\n  handleFilterChange(term) {\n    if (!this.filterData) {\n      return;\n    }\n    this.resetNodesVisibility(this.filterData);\n    if (term) {\n      filterTree(this.filterData, term, this.filterSettings, this.component.textField);\n    }\n    this.updateVisibleNodes(this.filterData);\n    if (isPresent(this.component.filterStateChange)) {\n      this.component.filterStateChange.emit({\n        nodes: this.filterData,\n        matchCount: this.visibleNodes.size,\n        term,\n        filterSettings: this.filterSettings\n      });\n    }\n  }\n  updateVisibleNodes(items) {\n    items.forEach(wrapper => {\n      if (wrapper.visible) {\n        this.visibleNodes.add(wrapper.dataItem);\n      }\n      if (wrapper.children) {\n        this.updateVisibleNodes(wrapper.children);\n      }\n    });\n  }\n  resetNodesVisibility(items) {\n    this.visibleNodes.clear();\n    items.forEach(wrapper => {\n      wrapper.visible = true;\n      if (wrapper.children) {\n        this.resetNodesVisibility(wrapper.children);\n      }\n    });\n  }\n  static ɵfac = function FilteringBase_Factory(t) {\n    return new (t || FilteringBase)(i0.ɵɵdirectiveInject(DataBoundComponent));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FilteringBase,\n    inputs: {\n      filterSettings: \"filterSettings\",\n      filter: \"filter\"\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FilteringBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: DataBoundComponent\n    }];\n  }, {\n    filterSettings: [{\n      type: Input\n    }],\n    filter: [{\n      type: Input\n    }]\n  });\n})();\nconst findChildren = (prop, nodes, value) => nodes.filter(x => prop(x) === value);\nconst indexBuilder$1 = new IndexBuilderService();\nconst mapToTree = (currentLevelNodes, allNodes, parentIdField, idField, parent = null, parentIndex = '') => {\n  if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {\n    return [];\n  }\n  return currentLevelNodes.map((node, idx) => {\n    const index = indexBuilder$1.nodeIndex(idx.toString(), parentIndex);\n    const wrapper = {\n      dataItem: node,\n      index,\n      parent,\n      visible: true\n    };\n    wrapper.children = mapToTree(findChildren(getter(parentIdField), allNodes || [], getter(idField)(node)), allNodes, parentIdField, idField, wrapper, index);\n    return wrapper;\n  });\n};\n/**\n * A directive which encapsulates the retrieval of the child nodes.\n */\nclass FlatDataBindingDirective extends FilteringBase {\n  component;\n  /**\n   * The nodes which will be displayed by the TreeView.\n   */\n  set nodes(nodes) {\n    // Needs to be a setter so that it can be accessed via `super` call (typescript v5)\n    this._nodes = nodes;\n  }\n  get nodes() {\n    return this._nodes;\n  }\n  _nodes;\n  /**\n   * Represents the parent field whose value will be matched with the parent node.\n   */\n  parentIdField;\n  /**\n   * Represents the unique field which identifies a node.\n   */\n  idField;\n  /**\n   * @hidden\n   */\n  loadOnDemand = true;\n  /**\n   * @hidden\n   * A callback which determines whether a TreeView node should be rendered as hidden.\n   */\n  set isVisible(fn) {\n    this.component.isVisible = fn;\n  }\n  /**\n   * @hidden\n   */\n  originalData = [];\n  constructor(component) {\n    super(component);\n    this.component = component;\n    this.component.isVisible = node => this.visibleNodes.has(node);\n  }\n  /**\n   * @hidden\n   */\n  ngOnInit() {\n    if (isPresent(this.parentIdField) && isPresent(this.idField)) {\n      const fetchChildren = node => findChildren(getter(this.parentIdField), this.originalData || [], getter(this.idField)(node));\n      this.component.hasChildren = node => fetchChildren(node).length > 0;\n      this.component.children = node => of(fetchChildren(node));\n      this.component.editService = new FlatEditingService(this);\n      this.component.filterChange.subscribe(this.handleFilterChange.bind(this));\n      if (this.component.filter) {\n        this.handleFilterChange(this.component.filter);\n      }\n      if (!this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {\n        this.component.preloadChildNodes();\n      }\n    }\n  }\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes) {\n    if (isChanged('parentIdField', changes, false)) {\n      this.nodes = this.originalData;\n      this.updateNodes(this.originalData);\n    }\n    if (isChanged('nodes', changes, false)) {\n      this.updateNodes(changes['nodes'].currentValue);\n    }\n    // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items\n    if (anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {\n      this.component.preloadChildNodes();\n    }\n  }\n  /**\n   * @hidden\n   */\n  updateNodes(values) {\n    this.originalData = values || [];\n    if (!isNullOrEmptyString(this.parentIdField)) {\n      const prop = getter(this.parentIdField);\n      this.component.nodes = this.originalData.filter(compose(isBlank, prop));\n      this.filterData = mapToTree(this.component.nodes, this.originalData, this.parentIdField, this.idField);\n      this.updateVisibleNodes(this.filterData);\n    } else {\n      this.component.nodes = this.originalData.slice(0);\n    }\n  }\n  static ɵfac = function FlatDataBindingDirective_Factory(t) {\n    return new (t || FlatDataBindingDirective)(i0.ɵɵdirectiveInject(DataBoundComponent));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FlatDataBindingDirective,\n    selectors: [[\"\", \"kendoTreeViewFlatDataBinding\", \"\"]],\n    inputs: {\n      nodes: \"nodes\",\n      parentIdField: \"parentIdField\",\n      idField: \"idField\",\n      loadOnDemand: \"loadOnDemand\",\n      isVisible: \"isVisible\"\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FlatDataBindingDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[kendoTreeViewFlatDataBinding]\",\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: DataBoundComponent\n    }];\n  }, {\n    nodes: [{\n      type: Input\n    }],\n    parentIdField: [{\n      type: Input\n    }],\n    idField: [{\n      type: Input\n    }],\n    loadOnDemand: [{\n      type: Input\n    }],\n    isVisible: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @hidden\n */\nclass HierarchyEditingService {\n  hierarchyBinding;\n  movedItemNewIndex;\n  constructor(hierarchyBinding) {\n    this.hierarchyBinding = hierarchyBinding;\n  }\n  add({\n    sourceItem,\n    destinationItem,\n    dropPosition,\n    sourceTree,\n    destinationTree\n  }) {\n    // shallow clone the item as not to mistake it for its 'older' version when the remove handler kicks in to splice the item at its old position\n    const clonedSourceDataItem = Object.assign({}, getDataItem(sourceItem));\n    if (dropPosition === DropPosition.Over) {\n      // expand the item that was dropped into\n      expandDropTarget(destinationItem, destinationTree);\n      const destinationChildren = this.childrenFor(getDataItem(destinationItem));\n      // add the moved node just before the load more button if load more is enabled\n      const targetIndex = isPresent(destinationTree.loadMoreService) ? Math.min(destinationTree.loadMoreService.getGroupSize(getDataItem(destinationItem)), destinationChildren.length) :\n      // the page size might be greater than the actual children array length\n      destinationChildren.length;\n      destinationChildren.splice(targetIndex, 0, clonedSourceDataItem);\n      setter(this.hierarchyBinding.childrenField)(getDataItem(destinationItem), destinationChildren);\n      this.movedItemNewIndex = buildTreeIndex(destinationItem.item.index, targetIndex);\n    } else {\n      const destinationParentNodes = this.getParentNodes(destinationItem, destinationTree);\n      const shiftIndex = dropPosition === DropPosition.After ? 1 : 0;\n      const targetIndex = destinationParentNodes.indexOf(getDataItem(destinationItem)) + shiftIndex;\n      destinationParentNodes.splice(targetIndex, 0, clonedSourceDataItem);\n      const parentIndex = destinationItem.parent ? destinationItem.parent.item.index : null;\n      this.movedItemNewIndex = buildTreeIndex(parentIndex, targetIndex);\n    }\n    // increment the parent page size => an item is moved into it\n    const updatedParent = dropPosition === DropPosition.Over ? getDataItem(destinationItem) : getDataItem(destinationItem.parent);\n    incrementPageSize(destinationTree, updatedParent);\n    // the page sizes are stored by data-item reference => copy the old item ref page size to the new item reference\n    copyPageSize(destinationTree, getDataItem(sourceItem), clonedSourceDataItem);\n    // the source tree nodes are reloaded on `removeItem` - reload the destination tree nodes if the soruce and the destination tree are different\n    if (sourceTree !== destinationTree && !destinationTree.loadOnDemand) {\n      destinationTree.preloadChildNodes();\n    }\n    // if the source and destination trees are the same, focusing the moved item here will not have the desired effect\n    // as the `remove` handler has not yet kicked-in to remove the item from its old position\n    if (sourceTree !== destinationTree) {\n      // ensure the focus target is rendered and registered\n      destinationTree.changeDetectorRef.detectChanges();\n      destinationTree.focus(this.movedItemNewIndex);\n    }\n  }\n  remove({\n    sourceItem,\n    sourceTree,\n    destinationTree\n  }) {\n    const sourceParentNodes = this.getParentNodes(sourceItem, sourceTree);\n    const sourceItemIndex = sourceParentNodes.indexOf(getDataItem(sourceItem));\n    sourceParentNodes.splice(sourceItemIndex, 1);\n    // emit collapse for the parent node if its last child node was spliced\n    collapseEmptyParent(sourceItem.parent, sourceParentNodes, sourceTree);\n    // decrement source item parent page size => an item has been removed from it\n    decrementPageSize(sourceTree, getDataItem(sourceItem.parent));\n    // reload the treeview nodes\n    if (!sourceTree.loadOnDemand) {\n      sourceTree.preloadChildNodes();\n    }\n    // if the source and destination trees are different we want to focus only the moved item in the destination tree\n    if (sourceTree === destinationTree) {\n      // ensure the focus target is rendered and registered\n      destinationTree.changeDetectorRef.detectChanges();\n      // after the source item is removed from its original position, the candidate index might have to be corrected\n      const index = updateMovedItemIndex(this.movedItemNewIndex, sourceItem.item.index);\n      destinationTree.focus(index);\n    }\n  }\n  getParentNodes(node, treeView) {\n    return isPresent(node.parent) ? this.childrenFor(getDataItem(node.parent)) : treeView.nodes;\n  }\n  childrenFor(dataItem) {\n    return getter(this.hierarchyBinding.childrenField)(dataItem) || [];\n  }\n}\nconst indexBuilder = new IndexBuilderService();\nconst mapToWrappers = (currentLevelNodes, childrenField, parent = null, parentIndex = '') => {\n  if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {\n    return [];\n  }\n  return currentLevelNodes.map((node, idx) => {\n    const index = indexBuilder.nodeIndex(idx.toString(), parentIndex);\n    const wrapper = {\n      dataItem: node,\n      index,\n      parent,\n      visible: true\n    };\n    wrapper.children = mapToWrappers(getter(childrenField)(node), childrenField, wrapper, index);\n    return wrapper;\n  });\n};\n/**\n * A directive which encapsulates the retrieval of child nodes.\n */\nclass HierarchyBindingDirective extends FilteringBase {\n  component;\n  dragAndDropDirective;\n  /**\n   * The field name which holds the data items of the child component.\n   */\n  set childrenField(value) {\n    if (!value) {\n      throw new Error(\"'childrenField' cannot be empty\");\n    }\n    this._childrenField = value;\n  }\n  /**\n   * The field name which holds the data items of the child component.\n   */\n  get childrenField() {\n    return this._childrenField;\n  }\n  /**\n   * The nodes which will be displayed by the TreeView.\n   */\n  set nodes(nodes) {\n    // Needs to be a setter so that it can be accessed via `super` call (typescript v5)\n    this._nodes = nodes;\n  }\n  get nodes() {\n    return this._nodes;\n  }\n  _nodes;\n  /**\n   * @hidden\n   * A callback which determines whether a TreeView node should be rendered as hidden.\n   */\n  set isVisible(fn) {\n    this.component.isVisible = fn;\n  }\n  /**\n   * @hidden\n   */\n  loadOnDemand = true;\n  _childrenField;\n  originalData = [];\n  constructor(component, dragAndDropDirective) {\n    super(component);\n    this.component = component;\n    this.dragAndDropDirective = dragAndDropDirective;\n    const shouldFilter = !isPresent(this.dragAndDropDirective);\n    this.component.isVisible = shouldFilter ? node => this.visibleNodes.has(node) : isVisible;\n  }\n  ngOnInit() {\n    if (isPresent(this.childrenField)) {\n      this.component.children = item => of(getter(this.childrenField)(item));\n      this.component.hasChildren = item => {\n        const children = getter(this.childrenField)(item);\n        return Boolean(children && children.length);\n      };\n      this.component.editService = new HierarchyEditingService(this);\n      this.component.filterChange.subscribe(this.handleFilterChange.bind(this));\n      if (this.component.filter) {\n        this.handleFilterChange(this.component.filter);\n      }\n      if (!this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {\n        this.component.preloadChildNodes();\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    if (isChanged('childrenField', changes, false)) {\n      this.nodes = this.originalData;\n      this.updateNodes(this.originalData);\n    }\n    if (isChanged('nodes', changes, false)) {\n      this.updateNodes(changes['nodes'].currentValue);\n    }\n    // should react to changes.loadOnDemand as well - should preload the data or clear the already cached items\n    if (anyChanged(['nodes', 'loadOnDemand'], changes) && !this.loadOnDemand && isPresent(this.component.preloadChildNodes)) {\n      this.component.preloadChildNodes();\n    }\n  }\n  /**\n   * @hidden\n   */\n  updateNodes(values) {\n    this.originalData = values || [];\n    this.filterData = mapToWrappers(values, this.childrenField) || [];\n    this.updateVisibleNodes(this.filterData);\n  }\n  static ɵfac = function HierarchyBindingDirective_Factory(t) {\n    return new (t || HierarchyBindingDirective)(i0.ɵɵdirectiveInject(DataBoundComponent), i0.ɵɵdirectiveInject(DragAndDropDirective, 9));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: HierarchyBindingDirective,\n    selectors: [[\"\", \"kendoTreeViewHierarchyBinding\", \"\"]],\n    inputs: {\n      childrenField: \"childrenField\",\n      nodes: \"nodes\",\n      isVisible: \"isVisible\",\n      loadOnDemand: \"loadOnDemand\"\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HierarchyBindingDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewHierarchyBinding]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: DataBoundComponent\n    }, {\n      type: DragAndDropDirective,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Host\n      }]\n    }];\n  }, {\n    childrenField: [{\n      type: Input\n    }],\n    nodes: [{\n      type: Input\n    }],\n    isVisible: [{\n      type: Input\n    }],\n    loadOnDemand: [{\n      type: Input\n    }]\n  });\n})();\nconst LOAD_MORE_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/treeview/load-more-button/';\n/**\n * A directive that enables the display of only a limited amount of nodes per level\n * ([see example]({% slug loadmorebutton_treeview %})).\n */\nclass LoadMoreDirective {\n  treeview;\n  /**\n   * Specifies the callback that will be called when the load more button is clicked.\n   * Providing a function is only required when additional nodes are fetched on demand\n   * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).\n   */\n  set loadMoreNodes(loadMoreNodes) {\n    if (typeof loadMoreNodes === 'string') {\n      return;\n    }\n    this.treeview.loadMoreService.loadMoreNodes = loadMoreNodes;\n  }\n  /**\n   * Specifies the initial number of nodes that will be rendered on each level.\n   * Every time the load more button is clicked, the data item page size will be incremented with this number.\n   */\n  pageSize;\n  /**\n   * Specifies the total number of root nodes.\n   * Used when additional nodes are fetched on demand\n   * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).\n   */\n  totalRootNodes;\n  /**\n   * Specifies which field holds information about the total number of child nodes of the data item.\n   * Used when additional nodes are fetched on demand\n   * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).\n   */\n  totalField;\n  /**\n   * Keeps track of the current page size of each node over expand/collapse cycles.\n   */\n  pageSizes = new Map();\n  /**\n   * Used as an identifier for the root page size as the root collection of nodes is not associated with a data item.\n   */\n  rootLevelId = guid();\n  constructor(treeview) {\n    this.treeview = treeview;\n    this.treeview.loadMoreService = {\n      getInitialPageSize: this.getInitalPageSize.bind(this),\n      getGroupSize: this.getGroupSize.bind(this),\n      setGroupSize: this.setGroupSize.bind(this),\n      getTotalNodesCount: this.getTotalNodesCount.bind(this)\n    };\n  }\n  ngOnChanges() {\n    this.verifySettings();\n  }\n  verifySettings() {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!isPresent(this.pageSize)) {\n      throw new Error(`To use the TreeView \\`kendoTreeViewLoadMore\\` directive, you need to assign a \\`pageSize\\` value. See ${LOAD_MORE_DOC_LINK}.`);\n    }\n    const loadMoreNodes = this.treeview.loadMoreService.loadMoreNodes;\n    if (isPresent(loadMoreNodes) && typeof loadMoreNodes !== 'function') {\n      throw new Error(`The passed value to the \\`kendoTreeViewLoadMore\\` directive must be a function that retrieves additional nodes. See ${LOAD_MORE_DOC_LINK}.`);\n    }\n    if (isPresent(loadMoreNodes) && !isPresent(this.totalField)) {\n      throw new Error(`When a function to fetch additional nodes is provided to the \\`kendoTreeViewLoadMore\\` directive, the \\`totalField\\` and \\`totalRootNodes\\` values must also be provided. See ${LOAD_MORE_DOC_LINK}.`);\n    }\n  }\n  getGroupSize(dataItem) {\n    const itemKey = dataItem || this.rootLevelId;\n    return this.pageSizes.has(itemKey) ? this.pageSizes.get(itemKey) : this.pageSize;\n  }\n  setGroupSize(dataItem, pageSize) {\n    const itemKey = dataItem || this.rootLevelId;\n    const normalizedSizeValue = pageSize > 0 ? pageSize : 0;\n    this.pageSizes.set(itemKey, normalizedSizeValue);\n  }\n  getTotalNodesCount(dataItem, loadedNodesCount) {\n    if (isPresent(dataItem) && isPresent(this.totalField)) {\n      return dataItem[this.totalField];\n    } else if (!isPresent(dataItem) && isPresent(this.totalRootNodes)) {\n      return this.totalRootNodes;\n    } else {\n      return loadedNodesCount;\n    }\n  }\n  getInitalPageSize() {\n    return this.pageSize;\n  }\n  static ɵfac = function LoadMoreDirective_Factory(t) {\n    return new (t || LoadMoreDirective)(i0.ɵɵdirectiveInject(TreeViewComponent));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LoadMoreDirective,\n    selectors: [[\"\", \"kendoTreeViewLoadMore\", \"\"]],\n    inputs: {\n      loadMoreNodes: [i0.ɵɵInputFlags.None, \"kendoTreeViewLoadMore\", \"loadMoreNodes\"],\n      pageSize: \"pageSize\",\n      totalRootNodes: \"totalRootNodes\",\n      totalField: \"totalField\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadMoreDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewLoadMore]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: TreeViewComponent\n    }];\n  }, {\n    loadMoreNodes: [{\n      type: Input,\n      args: ['kendoTreeViewLoadMore']\n    }],\n    pageSize: [{\n      type: Input\n    }],\n    totalRootNodes: [{\n      type: Input\n    }],\n    totalField: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Custom component messages override default component messages\n */\nclass CustomMessagesComponent extends TreeViewMessages {\n  service;\n  constructor(service) {\n    super();\n    this.service = service;\n  }\n  get override() {\n    return true;\n  }\n  static ɵfac = function CustomMessagesComponent_Factory(t) {\n    return new (t || CustomMessagesComponent)(i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CustomMessagesComponent,\n    selectors: [[\"kendo-treeview-messages\"]],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: TreeViewMessages,\n      useExisting: forwardRef(() => CustomMessagesComponent)\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 0,\n    vars: 0,\n    template: function CustomMessagesComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CustomMessagesComponent, [{\n    type: Component,\n    args: [{\n      providers: [{\n        provide: TreeViewMessages,\n        useExisting: forwardRef(() => CustomMessagesComponent)\n      }],\n      selector: 'kendo-treeview-messages',\n      template: ``,\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: i1.LocalizationService\n    }];\n  }, null);\n})();\n\n/**\n * A directive which manages the in-memory selection state of the TreeView node\n * ([see example]({% slug selection_treeview %})).\n */\nclass SelectDirective {\n  treeView;\n  navigationService;\n  /**\n   * @hidden\n   */\n  set isSelected(value) {\n    this.treeView.isSelected = value;\n  }\n  /**\n   * Defines the item key that will be stored in the `selectedKeys` collection.\n   */\n  selectKey;\n  /**\n   * Defines the current selection mode\n   * ([see example](slug:selection_treeview#toc-modes)).\n   */\n  selection;\n  /**\n   * Defines the collection that will store the selected keys\n   * ([see example](slug:selection_treeview#toc-modes)).\n   */\n  selectedKeys;\n  /**\n   * Fires when the `selectedKeys` collection was updated.\n   */\n  selectedKeysChange = new EventEmitter();\n  get getAriaMultiselectable() {\n    return this.options.mode === 'multiple';\n  }\n  subscriptions = new Subscription();\n  get options() {\n    const defaultOptions = {\n      enabled: true,\n      mode: 'single'\n    };\n    if (!isPresent(this.selection) || typeof this.selection === 'string') {\n      return defaultOptions;\n    }\n    const selectionSettings = isBoolean(this.selection) ? {\n      enabled: this.selection\n    } : this.selection;\n    return Object.assign(defaultOptions, selectionSettings);\n  }\n  selectActions = {\n    'multiple': e => this.selectMultiple(e),\n    'single': e => this.selectSingle(e)\n  };\n  /**\n   * Reflectes the internal `selectedKeys` state.\n   */\n  state = new Set();\n  /**\n   * Holds the last emitted `selectedKeys` collection.\n   */\n  lastChange;\n  constructor(treeView, navigationService) {\n    this.treeView = treeView;\n    this.navigationService = navigationService;\n    this.subscriptions.add(this.treeView.selectionChange.subscribe(this.select.bind(this)));\n    this.treeView.isSelected = (dataItem, index) => this.state.has(this.itemKey({\n      dataItem,\n      index\n    }));\n    this.navigationService.deselectAllButCurrentItem.subscribe(node => {\n      this.selectSingle(node);\n    });\n  }\n  ngOnChanges(changes) {\n    if (isChanged('selectedKeys', changes, false) && changes['selectedKeys'].currentValue !== this.lastChange) {\n      this.state = new Set(changes['selectedKeys'].currentValue);\n    }\n    const isSelectionBooleanTrue = typeof this.selection === 'boolean' && this.selection;\n    this.navigationService.selection = isSelectionBooleanTrue ? 'single' : this.selection?.mode;\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  itemKey(e) {\n    if (!this.selectKey) {\n      return e.index;\n    }\n    if (typeof this.selectKey === 'string') {\n      return e.dataItem[this.selectKey];\n    }\n    if (typeof this.selectKey === 'function') {\n      return this.selectKey(e);\n    }\n  }\n  select(e) {\n    const {\n      enabled,\n      mode\n    } = this.options;\n    const performSelection = this.selectActions[mode] || noop;\n    if (!enabled) {\n      return;\n    }\n    performSelection(e);\n  }\n  selectSingle(node) {\n    const key = this.itemKey(node);\n    if (!this.state.has(key)) {\n      this.state.clear();\n      this.state.add(key);\n      this.notify();\n    }\n  }\n  selectMultiple(node) {\n    const key = this.itemKey(node);\n    const isSelected = this.state.has(key);\n    if (!isPresent(key)) {\n      return;\n    }\n    if (isSelected) {\n      this.state.delete(key);\n    } else {\n      this.state.add(key);\n    }\n    this.notify();\n  }\n  notify() {\n    this.lastChange = Array.from(this.state);\n    this.selectedKeysChange.emit(this.lastChange);\n  }\n  static ɵfac = function SelectDirective_Factory(t) {\n    return new (t || SelectDirective)(i0.ɵɵdirectiveInject(TreeViewComponent), i0.ɵɵdirectiveInject(NavigationService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: SelectDirective,\n    selectors: [[\"\", \"kendoTreeViewSelectable\", \"\"]],\n    hostVars: 1,\n    hostBindings: function SelectDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-multiselectable\", ctx.getAriaMultiselectable);\n      }\n    },\n    inputs: {\n      isSelected: \"isSelected\",\n      selectKey: [i0.ɵɵInputFlags.None, \"selectBy\", \"selectKey\"],\n      selection: [i0.ɵɵInputFlags.None, \"kendoTreeViewSelectable\", \"selection\"],\n      selectedKeys: \"selectedKeys\"\n    },\n    outputs: {\n      selectedKeysChange: \"selectedKeysChange\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kendoTreeViewSelectable]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: TreeViewComponent\n    }, {\n      type: NavigationService\n    }];\n  }, {\n    isSelected: [{\n      type: Input\n    }],\n    selectKey: [{\n      type: Input,\n      args: ['selectBy']\n    }],\n    selection: [{\n      type: Input,\n      args: ['kendoTreeViewSelectable']\n    }],\n    selectedKeys: [{\n      type: Input\n    }],\n    selectedKeysChange: [{\n      type: Output\n    }],\n    getAriaMultiselectable: [{\n      type: HostBinding,\n      args: ['attr.aria-multiselectable']\n    }]\n  });\n})();\n\n/**\n * Utility array that contains all `@progress/kendo-angular-treeview` related components and directives\n */\nconst KENDO_TREEVIEW = [TreeViewComponent, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, HierarchyBindingDirective, FlatDataBindingDirective, DragAndDropDirective, DragClueTemplateDirective, DropHintTemplateDirective, DragAndDropEditingDirective, LoadMoreDirective, LoadMoreButtonTemplateDirective, CustomMessagesComponent];\n\n//IMPORTANT: NgModule export kept for backwards compatibility\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi']) definition for the TreeView component.\n */\nclass TreeViewModule {\n  static ɵfac = function TreeViewModule_Factory(t) {\n    return new (t || TreeViewModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TreeViewModule,\n    imports: [TreeViewComponent, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, HierarchyBindingDirective, FlatDataBindingDirective, DragAndDropDirective, DragClueTemplateDirective, DropHintTemplateDirective, DragAndDropEditingDirective, LoadMoreDirective, LoadMoreButtonTemplateDirective, CustomMessagesComponent],\n    exports: [TreeViewComponent, NodeTemplateDirective, CheckDirective, DisableDirective, ExpandDirective, SelectDirective, HierarchyBindingDirective, FlatDataBindingDirective, DragAndDropDirective, DragClueTemplateDirective, DropHintTemplateDirective, DragAndDropEditingDirective, LoadMoreDirective, LoadMoreButtonTemplateDirective, CustomMessagesComponent]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [IconsService, PopupService, ResizeBatchService, DialogContainerService, DialogService, WindowService, WindowContainerService],\n    imports: [TreeViewComponent]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewModule, [{\n    type: NgModule,\n    args: [{\n      imports: [...KENDO_TREEVIEW],\n      exports: [...KENDO_TREEVIEW],\n      providers: [IconsService, PopupService, ResizeBatchService, DialogContainerService, DialogService, WindowService, WindowContainerService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CheckDirective, CustomMessagesComponent, DataBoundComponent, DisableDirective, DragAndDropDirective, DragAndDropEditingDirective, DragClueService, DragClueTemplateDirective, DropAction, DropHintService, DropHintTemplateDirective, DropPosition, ExpandDirective, ExpandableComponent, FlatDataBindingDirective, HierarchyBindingDirective, KENDO_TREEVIEW, LoadMoreButtonTemplateDirective, LoadMoreDirective, LocalizedMessagesDirective, NodeTemplateDirective, SelectDirective, TreeItemDragEvent, TreeItemDragStartEvent, TreeItemDropEvent, TreeViewComponent, TreeViewModule };"],
  "mappings": "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",
  "names": ["id", "children", "isExpanded", "isSelected", "indexBuilder", "nodeIndex", "key", "isDisabled", "hasCheckbox", "DropAction", "DropPosition", "ScrollDirection", "node"]
}
