{
  "version": 3,
  "sources": ["../../../../../node_modules/@progress/kendo-data-query/dist/es/utils.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/filtering/filter-descriptor.interface.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/funcs.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/filter-serialization.common.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/filtering/filter.operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/odata-filtering.operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/odata.operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/accessor.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/mvc/operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/mvc/deserialization.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/sorting/sort-array.operator.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/transducers.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/grouping/aggregate.operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/filtering/filter-no-eval.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/filtering/filter-expression.factory.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/grouping/group.operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/array.operators.js", "../../../../../node_modules/@progress/kendo-data-query/dist/es/filtering/operators.enum.js"],
  "sourcesContent": ["/**\n * @hidden\n */\nexport var isPresent = function (value) { return value !== null && value !== undefined; };\n/**\n * @hidden\n */\nexport var isBlank = function (value) { return value === null || value === undefined; };\n/**\n * @hidden\n */\nexport var isArray = function (value) { return Array.isArray(value); };\n/**\n * @hidden\n */\nexport var isFunction = function (value) { return typeof value === 'function'; };\n/**\n * @hidden\n */\nexport var isString = function (value) { return typeof value === 'string'; };\n/**\n * @hidden\n */\nexport var isTruthy = function (value) { return !!value; };\n/**\n * @hidden\n */\nexport var isNullOrEmptyString = function (value) { return isBlank(value) || value.trim().length === 0; };\n/**\n * @hidden\n */\nexport var isNotNullOrEmptyString = function (value) { return !isNullOrEmptyString(value); };\n/**\n * @hidden\n */\nexport var isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n/**\n * @hidden\n */\nexport var isDate = function (value) { return value && value.getTime; };\n", "import { isPresent } from '../utils';\n// tslint:enable:max-line-length\n/**\n * @hidden\n * Type guard for `CompositeFilterDescriptor`.\n */\nexport var isCompositeFilterDescriptor = function (source) {\n    return isPresent(source.filters);\n};\n", "/**\n * @hidden\n */\nexport var ifElse = function (predicate, right, left) { return function (value) { return predicate(value) ? right(value) : left(value); }; };\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions should have a unary.\n */\nexport var compose = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (data) { return args.reduceRight(function (acc, curr) { return curr(acc); }, data); };\n};\n/**\n * @hidden\n */\nexport var constant = function (x) { return function () { return x; }; };\n/**\n * @hidden\n */\nexport var identity = function (x) { return x; };\n", "import { __makeTemplateObject } from \"tslib\";\nimport { isString, isDate } from './utils';\n/**\n * @hidden\n * Creates a single arity function which wraps the value based on the provided predicate.\n * @example\n * ```\n * wrapIf(() => ignoreCase) `tolower(${field})`\n * //ignoreCase=true -> tolower(${field})`\n * //ignoreCase=false -> ${field}`\n * ```\n */\nexport var wrapIf = function (predicate) { return function (str) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    return predicate() ? \"\".concat(str[0]).concat(args[0]).concat(str[1]) : args[0];\n}; };\n/**\n * @hidden\n */\nexport var toUTC = function (date) {\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n};\n/**\n * @hidden\n */\nexport var quote = function (_a) {\n    var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n    return ({\n        value: \"'\".concat(value.replace(/'/g, \"''\"), \"'\"),\n        field: field,\n        ignoreCase: ignoreCase,\n        operator: operator\n    });\n};\n/**\n * @hidden\n */\nexport var encodeValue = function (_a) {\n    var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n    return ({\n        value: \"\".concat(encodeURIComponent(value)),\n        field: field,\n        ignoreCase: ignoreCase,\n        operator: operator\n    });\n};\n/**\n * @hidden\n */\nexport var toLower = function (_a) {\n    var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n    return ({\n        field: wrapIf(function () { return ignoreCase; })(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"tolower(\", \")\"], [\"tolower(\", \")\"])), field),\n        value: value,\n        ignoreCase: ignoreCase,\n        operator: operator\n    });\n};\n/**\n * @hidden\n */\nexport var normalizeField = function (_a) {\n    var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n    return ({\n        value: value,\n        field: field.replace(/\\./g, \"/\"),\n        ignoreCase: ignoreCase,\n        operator: operator\n    });\n};\n/**\n * @hidden\n */\nexport var isStringValue = function (x) { return isString(x.value); };\n/**\n * @hidden\n */\nexport var isDateValue = function (x) { return isDate(x.value); };\n/**\n * @hidden\n */\nexport var serializeFilters = function (map, join) { return function (filter) {\n    var brackets = wrapIf(function () { return filter.filters.length > 1; });\n    return brackets(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"(\", \")\"], [\"(\", \")\"])), filter.filters\n        .map(map)\n        .join(join(filter)));\n}; };\nvar templateObject_1, templateObject_2;\n", "import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nvar operatorMap = function (key) { return ({\n    \"!=\": \"neq\",\n    \"<\": \"lt\",\n    \"<=\": \"lte\",\n    \"==\": \"eq\",\n    \">\": \"gt\",\n    \">=\": \"gte\",\n    equal: \"eq\",\n    equals: \"eq\",\n    equalto: \"eq\",\n    ge: \"gte\",\n    greater: \"gt\",\n    greaterthan: \"gt\",\n    greaterthanequal: \"gte\",\n    isempty: \"isempty\",\n    isequalto: \"eq\",\n    isgreaterthan: \"gt\",\n    isgreaterthanorequalto: \"gte\",\n    islessthan: \"lt\",\n    islessthanorequalto: \"lte\",\n    isnotempty: \"isnotempty\",\n    isnotequalto: \"neq\",\n    isnull: \"isnull\",\n    le: \"lte\",\n    less: \"lt\",\n    lessthan: \"lt\",\n    lessthanequal: \"lte\",\n    ne: \"neq\",\n    notequal: \"neq\",\n    notequals: \"neq\",\n    notequalto: \"neq\",\n    notsubstringof: \"doesnotcontain\"\n}[key.toLowerCase()] || key); };\nvar normalizeOperator = function (descriptor) {\n    if (descriptor.filters) {\n        descriptor.filters = descriptor.filters.map(function (filter) {\n            var result = Object.assign({}, filter);\n            if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n                result.operator = operatorMap(filter.operator);\n            }\n            if (isCompositeFilterDescriptor(filter)) {\n                normalizeOperator(result);\n            }\n            return result;\n        });\n    }\n};\nvar normalizeDescriptor = function (descriptor) {\n    if (!isCompositeFilterDescriptor(descriptor)) {\n        return {\n            filters: isArray(descriptor) ? descriptor : [descriptor],\n            logic: \"and\"\n        };\n    }\n    return Object.assign({}, descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Converts a [`FilterDescriptor`]({% slug api_kendo-data-query_filterdescriptor %}) into a [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\nexport var normalizeFilters = function (descriptor) {\n    if (isPresent(descriptor)) {\n        descriptor = normalizeDescriptor(descriptor);\n        normalizeOperator(descriptor);\n    }\n    return descriptor;\n};\n", "import { __assign } from \"tslib\";\nimport { isCompositeFilterDescriptor } from './filtering/filter-descriptor.interface';\nimport { compose, ifElse } from './funcs';\nimport { normalizeField, quote, toLower, isDateValue, isStringValue, serializeFilters, encodeValue, toUTC } from './filter-serialization.common';\nimport { normalizeFilters } from './filtering/filter.operators';\nvar formatDate = function (_a) {\n    var utcDates = _a.utcDates;\n    return function (_a) {\n        var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n        return ({\n            value: (!utcDates ? toUTC(value) : value).toISOString(),\n            field: field,\n            ignoreCase: ignoreCase,\n            operator: operator\n        });\n    };\n};\nvar fnFormatter = function (_a) {\n    var operator = _a.operator;\n    return function (_a) {\n        var field = _a.field, value = _a.value;\n        return \"\".concat(operator, \"(\").concat(field, \",\").concat(value, \")\");\n    };\n};\nvar singleOperatorFormatter = function (_a) {\n    var operator = _a.operator;\n    return function (_a) {\n        var field = _a.field, value = _a.value;\n        return \"\".concat(field, \" \").concat(operator, \" \").concat(value);\n    };\n};\nvar stringFormat = function (formatter) { return compose(formatter, encodeValue, quote, toLower, normalizeField); };\nvar stringFnOperator = function (settings) { return stringFormat(fnFormatter(settings)); };\nvar stringOperator = function (settings) { return stringFormat(singleOperatorFormatter(settings)); };\nvar numericOperator = function (settings) { return compose(singleOperatorFormatter(settings), normalizeField); };\nvar dateOperator = function (settings) { return compose(singleOperatorFormatter(settings), normalizeField, formatDate(settings)); };\nvar ifDate = function (settings) { return ifElse(isDateValue, dateOperator(settings), numericOperator(settings)); };\nvar typedOperator = function (settings) { return ifElse(isStringValue, stringOperator(settings), ifDate(settings)); };\nvar appendEqual = function (str) { return \"\".concat(str, \" eq -1\"); };\nvar nonValueExpression = function (formatter) { return compose(formatter, normalizeField); };\nvar filterOperators = function (operator, settings) { return ({\n    contains: stringFnOperator(__assign(__assign({}, settings), { operator: \"contains\" })),\n    doesnotcontain: compose(appendEqual, stringFnOperator(__assign(__assign({}, settings), { operator: \"indexof\" }))),\n    endswith: stringFnOperator(__assign(__assign({}, settings), { operator: \"endswith\" })),\n    eq: typedOperator(__assign(__assign({}, settings), { operator: \"eq\" })),\n    gt: typedOperator(__assign(__assign({}, settings), { operator: \"gt\" })),\n    gte: typedOperator(__assign(__assign({}, settings), { operator: \"ge\" })),\n    isempty: nonValueExpression(function (_a) {\n        var field = _a.field;\n        return \"\".concat(field, \" eq ''\");\n    }),\n    isnotempty: nonValueExpression(function (_a) {\n        var field = _a.field;\n        return \"\".concat(field, \" ne ''\");\n    }),\n    isnotnull: nonValueExpression(function (_a) {\n        var field = _a.field;\n        return \"\".concat(field, \" ne null\");\n    }),\n    isnull: nonValueExpression(function (_a) {\n        var field = _a.field;\n        return \"\".concat(field, \" eq null\");\n    }),\n    lt: typedOperator(__assign(__assign({}, settings), { operator: \"lt\" })),\n    lte: typedOperator(__assign(__assign({}, settings), { operator: \"le\" })),\n    neq: typedOperator(__assign(__assign({}, settings), { operator: \"ne\" })),\n    startswith: stringFnOperator(__assign(__assign({}, settings), { operator: \"startswith\" }))\n}[operator]); };\nvar join = function (x) { return \" \".concat(x.logic, \" \"); };\nvar serialize = function (settings) { return function (x) { return filterOperators(x.operator, settings)(x); }; };\nvar serializeAll = function (settings) { return serializeFilters(function (filter) { return ifElse(isCompositeFilterDescriptor, serializeAll(settings), serialize(settings))(filter); }, join); };\n/**\n * @hidden\n */\nexport var serializeFilter = function (filter, settings) {\n    if (settings === void 0) { settings = {}; }\n    if (filter.filters && filter.filters.length) {\n        return \"$filter=\" + serializeAll(settings)(normalizeFilters(filter));\n    }\n    return \"\";\n};\n", "import { __makeTemplateObject } from \"tslib\";\nimport { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { ifElse, constant } from './funcs';\nvar serializeSort = function (orderby) {\n    var str = orderby\n        .filter(function (sort) { return isPresent(sort.dir); })\n        .map(function (sort) {\n        var order = sort.field.replace(/\\./g, \"/\");\n        return sort.dir === \"desc\" ? order + \" desc\" : order;\n    }).join(\",\");\n    return str ? \"$orderby=\".concat(str) : str;\n};\nvar emptyString = constant('');\nvar concat = function (a) { return function (b) { return a + b; }; };\nvar serializeKey = function (strings, val) { return ifElse(isPresent, concat(strings[0]), emptyString)(val); };\nvar rules = function (settings, state) { return function (key) { return ({\n    \"filter\": serializeFilter(state.filter || {}, settings),\n    \"skip\": serializeKey(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"$skip=\", \"\"], [\"$skip=\", \"\"])), state.skip),\n    \"sort\": serializeSort(state.sort || []),\n    \"take\": serializeKey(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"$top=\", \"\"], [\"$top=\", \"\"])), state.take)\n}[key]); }; };\n// tslint:enable:max-line-length\n/**\n * Converts a [State]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @param {ODataSettings} settings - The settings that are used during the serialization.\n * @returns {string} - The serialized state.\n */\nexport var toODataString = function (state, settings) {\n    if (settings === void 0) { settings = {}; }\n    return (Object.keys(state)\n        .map(rules(settings, state))\n        .filter(isNotNullOrEmptyString)\n        .join('&'));\n};\nvar templateObject_1, templateObject_2;\n", "import { isPresent } from './utils';\nvar getterCache = {};\nvar FIELD_REGEX = /\\[(?:(\\d+)|['\"](.*?)['\"])\\]|((?:(?!\\[.*?\\]|\\.).)+)/g;\n// tslint:disable-next-line:no-string-literal\ngetterCache['undefined'] = function (obj) { return obj; };\n/**\n * @hidden\n */\nexport var getter = function (field, safe) {\n    var key = field + safe;\n    if (getterCache[key]) {\n        return getterCache[key];\n    }\n    var fields = [];\n    field.replace(FIELD_REGEX, function (_, index, indexAccessor, field) {\n        fields.push(isPresent(index) ? index : (indexAccessor || field));\n        return undefined;\n    });\n    getterCache[key] = function (obj) {\n        var result = obj;\n        for (var idx = 0; idx < fields.length; idx++) {\n            result = result[fields[idx]];\n            if (!isPresent(result) && safe) {\n                return result;\n            }\n        }\n        return result;\n    };\n    return getterCache[key];\n};\n", "import { __assign, __spreadArray } from \"tslib\";\nimport { isCompositeFilterDescriptor } from '../filtering/filter-descriptor.interface';\nimport { isPresent, isNotNullOrEmptyString, isArray } from '../utils';\nimport { getter } from '../accessor';\nimport { compose, ifElse, identity } from '../funcs';\nimport { isStringValue, isDateValue, quote, serializeFilters, toUTC, encodeValue } from '../filter-serialization.common';\nvar toQueryString = function (values) { return values.reduce(function (acc, _a) {\n    var key = _a[0], value = _a[1];\n    return __spreadArray(__spreadArray([], acc, true), [\"\".concat(key, \"=\").concat(value)], false);\n}, []); };\nvar toObject = function (values) { return values.reduce(function (acc, _a) {\n    var _b;\n    var key = _a[0], value = _a[1];\n    return (__assign(__assign({}, acc), (_b = {}, _b[key] = value, _b)));\n}, {}); };\nvar pairwise = function (key) { return function (value) { return [key, value]; }; };\nvar empty = function () { return null; };\nvar isNotEmptyArray = function (value) { return isPresent(value) && isArray(value) && value.length > 0; };\nvar has = function (accessor) { return function (value) { return isPresent(accessor(value)); }; };\nvar isNotEmpty = function (accessor) { return function (value) { return isNotEmptyArray(accessor(value)); }; };\nvar runOrEmpty = function (predicate, fn) { return ifElse(predicate, fn, empty); };\nvar calcPage = function (_a) {\n    var skip = _a.skip, take = _a.take;\n    return Math.floor((skip || 0) / take) + 1;\n};\nvar formatDescriptors = function (accessor, formatter) { return function (state) { return (accessor(state).map(formatter).join(\"~\")); }; };\nvar removeAfter = function (what) { return function (str) { return str.slice(0, str.indexOf(what)); }; };\nvar replace = function (patterns) {\n    return compose.apply(void 0, patterns.map(function (_a) {\n        var left = _a[0], right = _a[1];\n        return function (s) { return s.replace(new RegExp(left, \"g\"), right); };\n    }));\n};\nvar sanitizeDateLiterals = replace([[\"\\\"\", \"\"], [\":\", \"-\"]]);\nvar removeAfterDot = removeAfter(\".\");\nvar directionFormatter = function (_a) {\n    var field = _a.field, _b = _a.dir, dir = _b === void 0 ? \"asc\" : _b;\n    return \"\".concat(field, \"-\").concat(dir);\n};\nvar aggregateFormatter = function (_a) {\n    var field = _a.field, aggregate = _a.aggregate;\n    return \"\".concat(field, \"-\").concat(aggregate);\n};\nvar take = getter(\"take\");\nvar aggregates = getter(\"aggregates\");\nvar skip = getter(\"skip\");\nvar group = getter(\"group\");\nvar sort = getter(\"sort\", true);\nvar formatSort = formatDescriptors(sort, directionFormatter);\nvar formatGroup = formatDescriptors(group, directionFormatter);\nvar formatAggregates = formatDescriptors(aggregates, aggregateFormatter);\nvar prefixDateValue = function (value) { return \"datetime'\".concat(value, \"'\"); };\nvar formatDateValue = compose(prefixDateValue, removeAfterDot, sanitizeDateLiterals, JSON.stringify, toUTC);\nvar formatDate = function (_a) {\n    var field = _a.field, value = _a.value, ignoreCase = _a.ignoreCase, operator = _a.operator;\n    return ({\n        value: formatDateValue(value),\n        field: field,\n        ignoreCase: ignoreCase,\n        operator: operator\n    });\n};\nvar normalizeSort = function (state) { return Object.assign({}, state, {\n    sort: (sort(state) || []).filter(function (_a) {\n        var dir = _a.dir;\n        return isNotNullOrEmptyString(dir);\n    })\n}); };\nvar transformSkip = compose(pairwise('page'), calcPage);\nvar transformTake = compose(pairwise('pageSize'), take);\nvar transformGroup = compose(pairwise('group'), formatGroup);\nvar transformSort = compose(pairwise('sort'), formatSort);\nvar transformAggregates = compose(pairwise('aggregate'), formatAggregates);\nvar serializePage = runOrEmpty(has(skip), transformSkip);\nvar serializePageSize = runOrEmpty(has(take), transformTake);\nvar serializeGroup = runOrEmpty(isNotEmpty(group), transformGroup);\nvar serializeAggregates = runOrEmpty(has(aggregates), transformAggregates);\nvar serializeSort = compose(runOrEmpty(isNotEmpty(sort), transformSort), normalizeSort);\nvar hasField = function (_a) {\n    var field = _a.field;\n    return isNotNullOrEmptyString(field);\n};\nvar filterFormatter = function (_a) {\n    var field = _a.field, operator = _a.operator, value = _a.value;\n    return \"\".concat(field, \"~\").concat(operator, \"~\").concat(value);\n};\nvar dateFormatter = ifElse(isDateValue, compose(filterFormatter, formatDate), filterFormatter);\nvar typedFormatter = function (encode) { return runOrEmpty(hasField, ifElse(isStringValue, compose(filterFormatter, quote, encode ? encodeValue : identity), dateFormatter)); };\nvar join = function (_a) {\n    var logic = _a.logic;\n    return \"~\".concat(logic, \"~\");\n};\nvar serialize = function (encode) { return serializeFilters(function (filter) { return ifElse(isCompositeFilterDescriptor, serialize(encode), typedFormatter(encode))(filter); }, join); };\nvar serializeFilter = function (_a, encode) {\n    var filter = _a.filter;\n    if (filter && filter.filters) {\n        var filters = serialize(encode)(filter);\n        if (filters.length) {\n            return ['filter', filters];\n        }\n    }\n    return null;\n};\nvar rules = function (state, encode) {\n    if (encode === void 0) { encode = true; }\n    return function (key) { return ({\n        \"aggregates\": serializeAggregates(state),\n        \"filter\": serializeFilter(state, encode),\n        \"group\": serializeGroup(state),\n        \"skip\": serializePage(state),\n        \"sort\": serializeSort(state),\n        \"take\": serializePageSize(state)\n    }[key]); };\n};\n/**\n * Converts a [DataSourceRequestState]({% slug api_kendo-data-query_datasourcerequeststate %}) into a string\n * that is comparable with the `DataSourceRequest` format in UI for ASP.NET MVC.\n *\n * @param {DataSourceRequestState} state - The state that will be serialized.\n * @returns {string} - The serialized state.\n *\n * @example\n * {% platform_content angular %}\n * ```ts\n *  import {\n *      toDataSourceRequestString,\n *      translateDataSourceResultGroups,\n *      translateAggregateResults\n * } from '@progress/kendo-data-query';\n *\n * export class Service {\n *  private BASE_URL: string = '...';\n *\n *  constructor(private http: Http) { }\n *\n *  // Omitted for brevity...\n *\n *  private fetch(state: DataSourceRequestState): Observable<DataResult> {\n *   const queryStr = `${toDataSourceRequestString(state)}`; //serialize the state\n *   const hasGroups = state.group && state.group.length;\n *\n *   return this.http\n *       .get(`${this.BASE_URL}?${queryStr}`) //send the state to the server\n *       .map(response => response.json())\n *       .map(({Data, Total, AggregateResults}) => // process the response\n *           (<GridDataResult>{\n *               //if there are groups convert them to compatible format\n *               data: hasGroups ? translateDataSourceResultGroups(Data) : Data,\n *               total: Total,\n *               // convert the aggregates if such exists\n *               aggregateResult: translateAggregateResults(AggregateResults)\n *           })\n *       );\n *  }\n * }\n * ```\n * {% endplatform_content %}\n *\n * {% platform_content react %}\n * ```jsx\n * import React from 'react';\n * import { toDataSourceRequestString, translateDataSourceResultGroups } from '@progress/kendo-data-query';\n *\n * export function withState(WrappedGrid) {\n *     return class StatefullGrid extends React.Component {\n *         constructor(props) {\n *             super(props);\n *             this.state = { dataState: { skip: 0, take: 20 } };\n *         }\n *\n *         render() {\n *             return (\n *                 <WrappedGrid\n *                     filterable={true}\n *                     sortable={true}\n *                     pageable={{ pageSizes: true }}\n *                     {...this.props}\n *                     total={this.state.total}\n *                     data={this.state.data}\n *                     skip={this.state.dataState.skip}\n *                     pageSize={this.state.dataState.take}\n *                     filter={this.state.dataState.filter}\n *                     sort={this.state.dataState.sort}\n *                     dataStateChange={this.dataStateChange}\n *                 />\n *             );\n *         }\n *\n *         componentDidMount() {\n *             this.fetchData(this.state.dataState);\n *         }\n *\n *         dataStateChange = (changeEvent) => {\n *             this.setState({ dataState: changeEvent.data });\n *             this.fetchData(changeEvent.data);\n *         }\n *\n *         fetchData(dataState) {\n *             const queryStr = `${toDataSourceRequestString(dataState)}`; // Serialize the state\n *             const hasGroups = dataState.group && dataState.group.length;\n *\n *             const base_url = 'api/Products';\n *             const init = { method: 'GET', accept: 'application/json', headers: {} };\n *\n *             fetch(`${base_url}?${queryStr}`, init)\n *                 .then(response => response.json())\n *                 .then(({ data, total }) => {\n *                     this.setState({\n *                         data: hasGroups ? translateDataSourceResultGroups(data) : data,\n *                         total,\n *                         dataState\n *                     });\n *                 });\n *         }\n *     }\n * }\n * ```\n * {% endplatform_content %}\n */\nexport var toDataSourceRequestString = function (state) { return (toQueryString(Object.keys(state)\n    .map(rules(state))\n    .filter(isPresent)).join('&')); };\n/**\n * Converts a [DataSourceRequestState]({% slug api_kendo-data-query_datasourcerequeststate %}) into an object\n * that is compatible with the `DataSourceRequest` format in UI for ASP.NET MVC.\n *\n * @param {DataSourceRequestState} state - The state that will be serialized.\n * @returns {any} - The serialized state.\n */\nexport var toDataSourceRequest = function (state) { return (toObject(Object.keys(state)\n    .map(rules(state, false))\n    .filter(isPresent))); };\n", "import { isPresent } from '../utils';\nimport { compose } from '../funcs';\n// tslint:enable:max-line-length\nvar set = function (field, target, value) {\n    target[field] = value;\n    return target;\n};\nvar toCamelCase = function (str) { return str.replace(/(^[A-Z])/g, function (_, g1) { return g1.toLowerCase(); }); };\nvar prop = function (fieldName) { return function (obj) {\n    var value = obj[fieldName];\n    if (isPresent(value)) {\n        return value;\n    }\n    return obj[toCamelCase(fieldName)];\n}; };\nvar member = prop(\"Member\");\nvar aggregateMethodName = prop(\"AggregateMethodName\");\nvar value = prop(\"Value\");\nvar convert = function (mapper) { return function (values) { return Object.keys(values).reduce(mapper.bind(null, values), {}); }; };\nvar translateAggregate = convert(function (source, acc, field) { return set(field.toLowerCase(), acc, source[field]); });\nvar translateAggregates = convert(function (source, acc, field) { return set(field, acc, translateAggregate(source[field])); });\nvar valueOrDefault = function (value, defaultValue) { return isPresent(value) ? value : defaultValue; };\nvar normalizeGroup = function (group) { return ({\n    aggregates: group.Aggregates || group.aggregates,\n    field: group.Member || group.member || group.field,\n    hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n    items: group.Items || group.items,\n    value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n}); };\nvar translateGroup = compose(function (_a) {\n    var field = _a.field, hasSubgroups = _a.hasSubgroups, value = _a.value, aggregates = _a.aggregates, items = _a.items;\n    return ({\n        aggregates: translateAggregates(aggregates),\n        field: field,\n        items: hasSubgroups ? items.map(translateGroup) : items,\n        value: value\n    });\n}, normalizeGroup);\n// tslint:disable:max-line-length\n/**\n * Converts the grouped result, which is returned into the `Data` field of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\nexport var translateDataSourceResultGroups = function (data) { return data.map(translateGroup); };\n/**\n * Converts the `AggregateResults` field content, which is returned by the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n// tslint:enable:max-line-length\nexport var translateAggregateResults = function (data) { return ((data || []).reduce(function (acc, x) { return set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x))); }, {})); };\n", "import { isPresent, isBlank } from '../utils';\nimport { getter } from '../accessor';\nvar compare = function (a, b) {\n    if (isBlank(a)) {\n        return a === b ? 0 : -1;\n    }\n    if (isBlank(b)) {\n        return 1;\n    }\n    if (a.localeCompare) {\n        return a.localeCompare(b);\n    }\n    return a > b ? 1 : (a < b ? -1 : 0);\n};\nvar compareDesc = function (a, b) { return compare(b, a); };\nvar descriptorAsFunc = function (descriptor) {\n    if (typeof descriptor.compare === 'function') {\n        return descriptor.compare;\n    }\n    var prop = getter(descriptor.field, true);\n    return function (a, b) { return (descriptor.dir === 'asc' ? compare : compareDesc)(prop(a), prop(b)); };\n};\nvar initial = function (_a, _b) { return 0; };\n// tslint:disable:max-line-length\n/**\n * Converts the `SortDescriptors` into a [Comparer]({% slug api_kendo-data-query_comparer %}) function that can be used through `Array.sort`. If multiple descriptors are provided, sorting is applied in a right-to-left order.\n * @param {SortDescriptor[]} descriptors - The descriptors which will be converted.\n * @returns {Comparer} - The produced function.\n *\n * @example\n * ```ts\n * import { composeSortDescriptors } from '@progress/kendo-data-query';\n *\n * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n * const comparer = composeSortDescriptors([{ field: \"name\", dir: \"asc\" }]);\n * const result = data.sort(comparer);\n * // output: [{ name: \"Beef\" }, { name: \"Pepper\" }, { name: \"Pork\" }];\n * ```\n */\n// tslint:enable:max-line-length\nexport var composeSortDescriptors = function (descriptors) { return (descriptors\n    .filter(function (x) { return isPresent(x.dir) || isPresent(x.compare); })\n    .map(function (descriptor) { return descriptorAsFunc(descriptor); })\n    .reduce(function (acc, curr) { return function (a, b) { return acc(a, b) || curr(a, b); }; }, initial)); };\n", "import { isPresent, isNumeric, isDate } from './utils';\nimport { getter } from './accessor';\nvar valueToString = function (value) {\n    value = isPresent(value) && value.getTime ? value.getTime() : value;\n    return value + \"\";\n};\n/**\n * @hidden\n */\nexport var groupCombinator = function (field) {\n    var prop = getter(field, true);\n    var position = 0;\n    return function (agg, value) {\n        agg[field] = agg[field] || {};\n        var groupValue = prop(value);\n        var key = valueToString(groupValue);\n        var values = agg[field][key] || { __position: position++, aggregates: {}, items: [], value: groupValue };\n        values.items.push(value);\n        agg[field][key] = values;\n        return agg;\n    };\n};\n/**\n * @hidden\n */\nexport var expandAggregates = function (result) {\n    if (result === void 0) { result = {}; }\n    Object.keys(result).forEach(function (field) {\n        var aggregates = result[field];\n        Object.keys(aggregates).forEach(function (aggregate) {\n            aggregates[aggregate] = aggregates[aggregate].result();\n        });\n    });\n    return result;\n};\nvar aggregatesFuncs = function (name) { return ({\n    average: function () {\n        var value = 0;\n        var count = 0;\n        return {\n            calc: function (curr) {\n                if (isNumeric(curr)) {\n                    value += curr;\n                    count++;\n                }\n                else {\n                    value = curr;\n                }\n            },\n            result: function () { return isNumeric(value) ? value / count : value; }\n        };\n    },\n    count: function () {\n        var state = 0;\n        return {\n            calc: function () { return state++; },\n            result: function () { return state; }\n        };\n    },\n    max: function () {\n        var state = Number.NEGATIVE_INFINITY;\n        return {\n            calc: function (value) {\n                state = isNumeric(state) || isDate(state) ? state : value;\n                if (state < value && (isNumeric(value) || isDate(value))) {\n                    state = value;\n                }\n            },\n            result: function () { return state; }\n        };\n    },\n    min: function () {\n        var state = Number.POSITIVE_INFINITY;\n        return {\n            calc: function (value) {\n                state = isNumeric(state) || isDate(state) ? state : value;\n                if (state > value && (isNumeric(value) || isDate(value))) {\n                    state = value;\n                }\n            },\n            result: function () { return state; }\n        };\n    },\n    sum: function () {\n        var state = 0;\n        return {\n            calc: function (value) {\n                value = isPresent(value) ? value : 0;\n                state += value;\n            },\n            result: function () { return state; }\n        };\n    }\n}[name]()); };\n/**\n * @hidden\n */\nexport var aggregatesCombinator = function (descriptors) {\n    var functions = descriptors.map(function (descriptor) {\n        var fieldAccessor = getter(descriptor.field, true);\n        var aggregateName = (descriptor.aggregate || \"\").toLowerCase();\n        var aggregateAccessor = getter(aggregateName, true);\n        return function (state, value) {\n            var fieldAggregates = state[descriptor.field] || {};\n            var aggregateFunction = aggregateAccessor(fieldAggregates)\n                || aggregatesFuncs(aggregateName);\n            aggregateFunction.calc(fieldAccessor(value));\n            fieldAggregates[descriptor.aggregate] = aggregateFunction;\n            state[descriptor.field] = fieldAggregates;\n            return state;\n        };\n    });\n    return function (state, value) { return functions.reduce(function (agg, calc) { return calc(agg, value); }, state); };\n};\n/**\n * @hidden\n * Adds the value to the `arr` and produces a new array.\n *\n * > The original array will be modified.\n */\nexport var concat = function (arr, value) {\n    arr.push(value);\n    return arr;\n};\n/**\n * @hidden\n * Returns a reducer that will apply the specified transformation to the value.\n */\nexport var map = function (transform) { return (function (reduce) { return (function (acc, curr, index) { return reduce(acc, transform(curr, index)); }); }); };\n/**\n * @hidden\n * Returns a reducer that will filter out items which do not match the `Predicate`.\n */\nexport var filter = function (predicate) { return (function (reduce) { return (function (acc, curr) { return predicate(curr) ? reduce(acc, curr) : acc; }); }); };\n/**\n * @hidden\n */\nexport var isTransformerResult = function (source) {\n    return isPresent(source.__value);\n};\nvar reduced = function (x) {\n    if (isTransformerResult(x)) {\n        return x;\n    }\n    return {\n        __value: x,\n        reduced: true\n    };\n};\n/**\n * @hidden\n * Returns a reducer that will take the specified number of items.\n */\nexport var take = function (count) { return (function (reduce) { return (function (acc, curr) { return count-- > 0 ? reduce(acc, curr) : reduced(acc); }); }); };\n/**\n * @hidden\n * Returns a reducer that will take the specified number of items.\n */\nexport var takeWhile = function (predicate) { return (function (reduce) { return (function (acc, curr) { return predicate(curr) ? reduce(acc, curr) : reduced(acc); }); }); };\n/**\n * @hidden\n * Returns a reducer that will skip the specified number of items.\n */\nexport var skip = function (count) { return (function (reduce) { return (function (acc, curr) { return count-- <= 0 ? reduce(acc, curr) : acc; }); }); };\n/**\n * @hidden\n * Transforms the data by applying the supplied transformer.\n */\nexport var exec = function (transform, initialValue, data) {\n    var result = initialValue;\n    for (var idx = 0, length_1 = data.length; idx < length_1; idx++) {\n        result = transform(result, data[idx], idx);\n        if (isTransformerResult(result)) {\n            result = result.__value;\n            break;\n        }\n    }\n    return result;\n};\n", "import { exec, map, aggregatesCombinator, expandAggregates } from '../transducers';\nvar identity = map(function (x) { return x; });\n// tslint:disable:max-line-length\n/**\n * Applies the specified [`AggregateDescriptors`]({% slug api_kendo-data-query_aggregatedescriptor %}) to the data. Returns an [`AggregateResult`]({% slug api_kendo-data-query_aggregateresult %}) instance.\n *\n * @example\n * ```ts\n * const data = [\n *    { unitPrice: 23, unitsInStock: 21 },\n *    { unitPrice: 10, unitsInStock: 12 },\n *    { unitPrice: 20, unitsInStock: 33 }\n * ];\n *\n * const result = aggregateBy(data, [\n *   { aggregate: \"sum\", field: \"unitPrice\" },\n *   { aggregate: \"sum\", field: \"unitsInStock\" }\n * ]);\n *\n * //output:\n * // {\n * //     \"unitPrice\": { \"sum\": 53 },\n * //     \"unitsInStock\": { \"sum\": 66 }\n * // }\n * ```\n * @param {T[]} data - The data on which the calculation will be executed.\n * @param {AggregateDescriptor[]} descriptors - The aggregate operations that will be executed.\n * @param {any} transformers - For internal use.\n * @returns {AggregateResult} - The aggregated result.\n * For more information, refer to the [aggregateresult](slug:api_kendo-data-query_aggregateresult) configuration.\n */\n// tslint:enable:max-line-length\nexport var aggregateBy = function (data, descriptors, transformers) {\n    if (descriptors === void 0) { descriptors = []; }\n    if (transformers === void 0) { transformers = identity; }\n    var initialValue = {};\n    if (!descriptors.length) {\n        return initialValue;\n    }\n    var result = exec(transformers(aggregatesCombinator(descriptors)), initialValue, data);\n    return expandAggregates(result);\n};\n", "import { isCompositeFilterDescriptor } from \"./filter-descriptor.interface\";\nimport { getter } from \"../accessor\";\nimport { isFunction, isPresent, isDate, isString, isBlank } from \"../utils\";\nvar logic = {\n    \"or\": {\n        concat: function (acc, fn) { return function (a) { return acc(a) || fn(a); }; },\n        identity: function () { return false; }\n    },\n    \"and\": {\n        concat: function (acc, fn) { return function (a) { return acc(a) && fn(a); }; },\n        identity: function () { return true; }\n    }\n};\nvar operatorsMap = {\n    contains: function (a, b) { return (a || \"\").indexOf(b) >= 0; },\n    doesnotcontain: function (a, b) { return (a || \"\").indexOf(b) === -1; },\n    doesnotendwith: function (a, b) { return (a || \"\").indexOf(b, (a || \"\").length - (b || \"\").length) < 0; },\n    doesnotstartwith: function (a, b) { return (a || \"\").lastIndexOf(b, 0) === -1; },\n    endswith: function (a, b) { return (a || \"\").indexOf(b, (a || \"\").length - (b || \"\").length) >= 0; },\n    eq: function (a, b) { return a === b; },\n    gt: function (a, b) { return a > b; },\n    gte: function (a, b) { return a >= b; },\n    isempty: function (a) { return a === ''; },\n    isnotempty: function (a) { return a !== ''; },\n    isnotnull: function (a) { return isPresent(a); },\n    isnull: function (a) { return isBlank(a); },\n    lt: function (a, b) { return a < b; },\n    lte: function (a, b) { return a <= b; },\n    neq: function (a, b) { return a != b; },\n    startswith: function (a, b) { return (a || \"\").lastIndexOf(b, 0) === 0; }\n};\nvar dateRegExp = /^\\/Date\\((.*?)\\)\\/$/;\nvar convertValue = function (value, ignoreCase) {\n    if (value != null && isString(value)) {\n        var date = dateRegExp.exec(value);\n        if (date) {\n            return new Date(+date[1]).getTime();\n        }\n        else if (ignoreCase) {\n            return value.toLowerCase();\n        }\n    }\n    else if (value != null && isDate(value)) {\n        return value.getTime();\n    }\n    return value;\n};\nvar typedGetter = function (prop, value, ignoreCase) {\n    if (!isPresent(value)) {\n        return prop;\n    }\n    var acc = prop;\n    if (isString(value)) {\n        var date = dateRegExp.exec(value);\n        if (date) {\n            value = new Date(+date[1]);\n        }\n        else {\n            acc = function (a) {\n                var x = prop(a);\n                if (x === null) {\n                    return x;\n                }\n                var stringValue = typeof x === 'string' ? x : x + \"\";\n                return ignoreCase ? stringValue.toLowerCase() : stringValue;\n            };\n        }\n    }\n    if (isDate(value)) {\n        return function (a) {\n            var x = acc(a);\n            return isDate(x) ? x.getTime() : x;\n        };\n    }\n    return acc;\n};\nvar transformFilter = function (_a) {\n    var field = _a.field, ignoreCase = _a.ignoreCase, value = _a.value, operator = _a.operator;\n    field = !isPresent(field) ? function (a) { return a; } : field;\n    ignoreCase = isPresent(ignoreCase) ? ignoreCase : true;\n    var itemProp = typedGetter(isFunction(field) ? field : getter(field, true), value, ignoreCase);\n    value = convertValue(value, ignoreCase);\n    var op = isFunction(operator) ? operator : operatorsMap[operator];\n    return function (a) { return op(itemProp(a), value, ignoreCase); };\n};\n/**\n * @hidden\n */\nexport var transformCompositeFilter = function (filter) {\n    var combiner = logic[filter.logic];\n    return filter.filters\n        .filter(isPresent)\n        .map(function (x) { return isCompositeFilterDescriptor(x) ? transformCompositeFilter(x) : transformFilter(x); })\n        .reduce(combiner.concat, combiner.identity);\n};\n", "import { isPresent } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nimport { normalizeFilters } from './filter.operators';\nimport { transformCompositeFilter } from \"./filter-no-eval\";\n// tslint:disable:max-line-length\n/**\n * Creates a [Predicate]({% slug api_kendo-data-query_predicate %}) function for the specified [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n *\n * @param {CompositeFilterDescriptor} descriptor - The descriptor for which the predicate is created.\n * @returns {Predicate} - The created function instance.\n *\n * @example\n * ```ts\n * import { compileFilter } from '@progress/kendo-data-query';\n *\n * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n * const predicate = compileFilter({ logic: \"and\", filters: [{ field: \"name\", operator: \"startswith\", value: \"P\" }] });\n * const result = data.filter(predicate);\n *\n * ```\n */\n// tslint:enable:max-line-length\nexport var compileFilter = function (descriptor) {\n    if (!descriptor || descriptor.filters.length === 0) {\n        return function () { return true; };\n    }\n    return transformCompositeFilter(descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Filters the provided array according to the specified [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n *\n * @param {T[]} data - The data that will be filtered.\n * @param {(CompositeFilterDescriptor | FilterDescriptor)} descriptor - The filter criteria that will be applied.\n * @returns {T[]} - The filtered data.\n *\n * @example\n * ```ts\n * import { filterBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *  { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *  { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *  { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = filterBy(data, {\n *     logic: 'and',\n *     filters: [\n *           { field: \"name\", operator: \"startswith\", value: \"p\", ignoreCase: true },\n *           { field: \"subcategory\", operator: \"eq\", value: \"Meat\" },\n *     ]\n * });\n *\n * // output:\n * // [{ \"name\": \"Pork\", \"category\": \"Food\", \"subcategory\": \"Meat\" }]\n * ```\n */\n// tslint:enable:max-line-length\nexport var filterBy = function (data, descriptor) {\n    if (!isPresent(descriptor) || (isCompositeFilterDescriptor(descriptor) && descriptor.filters.length === 0)) {\n        return data;\n    }\n    return data.filter(compileFilter(normalizeFilters(descriptor)));\n};\n", "import { exec, map, groupCombinator } from '../transducers';\nimport { isArray, isPresent } from '../utils';\nimport { aggregateBy } from './aggregate.operators';\nimport { filterBy } from '../filtering/filter-expression.factory';\n/**\n * @hidden\n */\nexport var normalizeGroups = function (descriptors) {\n    descriptors = isArray(descriptors) ? descriptors : [descriptors];\n    return descriptors.map(function (x) { return Object.assign({ dir: \"asc\" }, x); });\n};\nvar identity = map(function (x) { return x; });\n/**\n * Groups the provided data according to the specified descriptors.\n *\n * @param {Array} data - The data that will be grouped.\n * @param {GroupDescriptor[]} descriptors - The descriptors.\n * @param {any} transformers - For internal use.\n * @param {Array} originalData - For internal use.\n * @returns {(Array<GroupResult<T>> | T[])} - The grouped data.\n *\n * @example\n * ```ts\n *\n * import { groupBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = groupBy(data, [{ field: \"subcategory\" }]);\n * ```\n */\nexport var groupBy = function (data, descriptors, transformers, originalData) {\n    if (descriptors === void 0) { descriptors = []; }\n    if (transformers === void 0) { transformers = identity; }\n    if (originalData === void 0) { originalData = data; }\n    descriptors = normalizeGroups(descriptors);\n    if (!descriptors.length) {\n        return data;\n    }\n    var descriptor = descriptors[0];\n    var initialValue = {};\n    var view = exec(transformers(groupCombinator(descriptor.field)), initialValue, data);\n    var result = [];\n    Object.keys(view).forEach(function (field) {\n        Object.keys(view[field]).forEach(function (value) {\n            var group = view[field][value];\n            var aggregateResult = {};\n            var filteredData = originalData;\n            if (isPresent(descriptor.aggregates)) {\n                filteredData = filterBy(originalData, {\n                    field: descriptor.field,\n                    ignoreCase: false,\n                    operator: 'eq',\n                    value: group.value\n                });\n                aggregateResult = aggregateBy(filteredData, descriptor.aggregates);\n            }\n            result[group.__position] = {\n                aggregates: aggregateResult,\n                field: field,\n                items: descriptors.length > 1 ?\n                    groupBy(group.items, descriptors.slice(1), identity, filteredData)\n                    : group.items,\n                value: group.value\n            };\n        });\n    });\n    return result;\n};\n", "import { __spreadArray } from \"tslib\";\nimport { isPresent, isString } from './utils';\nimport { composeSortDescriptors } from './sorting/sort-array.operator';\nimport { groupBy, normalizeGroups } from './grouping/group.operators';\nimport { normalizeFilters } from './filtering/filter.operators';\nimport { compileFilter } from './filtering/filter-expression.factory';\nimport { exec, skip, take, filter, concat } from './transducers';\nimport { getter } from './accessor';\nimport { compose } from './funcs';\n/**\n * Orders the specified array according to the provided sort descriptors.\n *\n * @param {T[]} data - The data to be sorted.\n * @param {SortDescriptor[]} descriptors - The descriptors by which the data will be sorted.\n * @returns {T[]} - The sorted data.\n *\n * @example\n * ```ts\n * import { orderBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const sortDesc: SortDescriptor[] = [{ field: \"name\", dir: \"asc\" }];\n *\n * const result = orderBy(data, sortDesc);\n * ```\n */\nexport var orderBy = function (data, descriptors) {\n    if (descriptors.some(function (x) { return isPresent(x.dir) || isPresent(x.compare); })) {\n        data = data.slice(0);\n        var comparer = composeSortDescriptors(descriptors);\n        data.sort(comparer);\n    }\n    return data;\n};\nvar defaultComparer = function (a, b) { return a === b; };\nvar normalizeComparer = function (comparer) {\n    if (isString(comparer)) {\n        var accessor_1 = getter(comparer);\n        comparer = function (a, b) { return accessor_1(a) === accessor_1(b); };\n    }\n    return comparer;\n};\nvar _distinct = function (data, comparer) {\n    return data.filter(function (x, idx, xs) { return xs.findIndex(comparer.bind(null, x)) === idx; });\n};\n/**\n * Reduces the provided array so it contains only unique values.\n *\n * @param {T[]} data - The array that will be reduced.\n * @param {(Comparer | string)} comparer - An optional custom comparer function or the field name that will be used for comparison.\n * @returns {T[]} - The reduced data.\n *\n * @example\n * ```ts\n * import { distinct } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = distinct(data, \"subcategory\");\n *\n * // output:\n * // result => [\n * //     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n * //     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" }\n * // ];\n * ```\n */\nexport var distinct = function (data, comparer) {\n    if (comparer === void 0) { comparer = defaultComparer; }\n    return _distinct(data, normalizeComparer(comparer));\n};\n/**\n * @hidden\n */\nexport var count = function (data, predicate) {\n    var counter = 0;\n    for (var idx = 0, length_1 = data.length; idx < length_1; idx++) {\n        if (predicate(data[idx])) {\n            counter++;\n        }\n    }\n    return counter;\n};\n/**\n * @hidden\n */\nexport var limit = function (data, predicate) {\n    if (predicate) {\n        return data.filter(predicate);\n    }\n    return data;\n};\n/**\n * Applies the specified operation descriptors to the data.\n *\n * @param {T[]} data - The data to be processed.\n * @param {State} state - The operation descriptors that will be applied to the data.\n * @returns {DataResult} - The processed data.\n *\n * @example\n * ```ts\n *\n * const result = process(data, {\n *     skip: 10,\n *     take: 20,\n *     group: [{\n *       field: 'category.categoryName',\n *             aggregates: [\n *                   { aggregate: \"sum\", field: \"unitPrice\" },\n *                   { aggregate: \"sum\", field: \"unitsInStock\" }\n *             ]\n *       }],\n *     sort: [{ field: 'productName', dir: 'desc' }],\n *     filter: {\n *         logic: \"or\",\n *         filters: [\n *           { field: \"discontinued\", operator: \"eq\", value: true },\n *           { field: \"unitPrice\", operator: \"lt\", value: 22 }\n *         ]\n *     }\n * });\n *\n * ```\n */\nexport var process = function (data, state) {\n    var skipCount = state.skip, takeCount = state.take, filterDescriptor = state.filter, sort = state.sort, group = state.group;\n    var sortDescriptors = __spreadArray(__spreadArray([], normalizeGroups(group || []), true), sort || [], true);\n    if (sortDescriptors.length) {\n        data = orderBy(data, sortDescriptors);\n    }\n    var hasFilters = isPresent(filterDescriptor) && filter.length;\n    var hasGroups = isPresent(group) && group.length;\n    if (!hasFilters && !hasGroups) {\n        return {\n            data: takeCount ? data.slice(skipCount, skipCount + takeCount) : data,\n            total: data.length\n        };\n    }\n    var total;\n    var transformers = [];\n    var predicate;\n    if (hasFilters) {\n        predicate = compileFilter(normalizeFilters(filterDescriptor));\n        total = count(data, predicate);\n        transformers.push(filter(predicate));\n    }\n    else {\n        total = data.length;\n    }\n    if (isPresent(skipCount) && isPresent(takeCount)) {\n        transformers.push(skip(skipCount));\n        transformers.push(take(takeCount));\n    }\n    if (transformers.length) {\n        var transform = compose.apply(void 0, transformers);\n        var result = hasGroups ?\n            groupBy(data, group, transform, limit(data, predicate)) :\n            exec(transform(concat), [], data);\n        return { data: result, total: total };\n    }\n    return {\n        data: hasGroups ? groupBy(data, group) : data,\n        total: total\n    };\n};\n", "/**\n * Represents the list of supported [`FilterDescriptor`]({% slug api_kendo-data-query_filterdescriptor %}) operators.\n * Allows restricting `FilterDescriptor.operator` definition to available values only.\n */\nexport var FilterOperator;\n(function (FilterOperator) {\n    /**\n     * The `contains` operator.\n     */\n    FilterOperator[\"Contains\"] = \"contains\";\n    /**\n     * The `doesnotcontain` operator.\n     */\n    FilterOperator[\"DoesNotContain\"] = \"doesnotcontain\";\n    /**\n     * The `doesnotendwith` operator.\n     */\n    FilterOperator[\"DoesNotEndWith\"] = \"doesnotendwith\";\n    /**\n     * The `doesnotstartwith` operator.\n     */\n    FilterOperator[\"DoesNotStartWith\"] = \"doesnotstartwith\";\n    /**\n     * The `endswith` operator.\n     */\n    FilterOperator[\"EndsWith\"] = \"endswith\";\n    /**\n     * The `eq` operator.\n     */\n    FilterOperator[\"EqualTo\"] = \"eq\";\n    /**\n     * The `gt` operator.\n     */\n    FilterOperator[\"GreaterThan\"] = \"gt\";\n    /**\n     * The `gte` operator.\n     */\n    FilterOperator[\"GreaterThanOrEqual\"] = \"gte\";\n    /**\n     * The `isempty` operator.\n     */\n    FilterOperator[\"IsEmpty\"] = \"isempty\";\n    /**\n     * The `isnotempty` operator.\n     */\n    FilterOperator[\"IsNotEmpty\"] = \"isnotempty\";\n    /**\n     * The `isnotnull` operator.\n     */\n    FilterOperator[\"IsNotNull\"] = \"isnotnull\";\n    /**\n     * The `isnull` operator.\n     */\n    FilterOperator[\"IsNull\"] = \"isnull\";\n    /**\n     * The `lt` operator.\n     */\n    FilterOperator[\"LessThan\"] = \"lt\";\n    /**\n     * The `lte` operator.\n     */\n    FilterOperator[\"LessThanOrEqual\"] = \"lte\";\n    /**\n     * The `neq` operator.\n     */\n    FilterOperator[\"NotEqualTo\"] = \"neq\";\n    /**\n     * The `startswith` operator.\n     */\n    FilterOperator[\"StartsWith\"] = \"startswith\";\n})(FilterOperator || (FilterOperator = {}));\n"],
  "mappings": "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",
  "names": ["value", "value", "value", "value", "map", "join", "filter", "filter", "_a", "value", "filter", "sort", "templateObject_1", "templateObject_2", "field", "value", "skip", "take", "formatDate", "serializeSort", "join", "logic", "serialize", "filter", "serializeFilter", "rules", "value", "group", "aggregates", "prop", "value", "prop", "aggregates", "count", "concat", "take", "skip", "count", "identity", "value", "prop", "filter", "identity", "value", "group", "sort", "group", "skip", "take", "concat", "FilterOperator"]
}
